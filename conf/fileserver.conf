# fileserver.conf

# Puppet automatically serves PLUGINS and FILES FROM MODULES: anything in
# <module name>/files/<file name> is available to authenticated nodes at
# puppet:///modules/<module name>/<file name>. You do not need to edit this
# file to enable this.

# MOUNT POINTS

# If you need to serve files from a directory that is NOT in a module,
# you must create a static mount point in this file:
#
# [extra_files]
#   path /etc/puppetlabs/puppet/files
#   allow *
#
# In the example above, anything in /etc/puppetlabs/puppet/files/<file name> would be
# available to authenticated nodes at puppet:///extra_files/<file name>.
#
# Mount points may also use three placeholders as part of their path:
#
# %H - The node's certname.
# %h - The portion of the node's certname before the first dot. (Usually the
#      node's short hostname.)
# %d - The portion of the node's certname after the first dot. (Usually the
#      node's domain name.)

# PERMISSIONS

# The ability to set permissions - for example, using the allow, allow_ip, or
# deny directives - has been removed. Instead, you can control file access in
# auth.conf by controlling the /file_metadata(s)/<mount point> and
# /file_content(s)/<mount point> paths.
#
# For auth.conf functionality, it is recommended that you use Puppet Server as
# your Puppet master, with the "jruby-puppet.use-legacy-auth-conf" setting
# either set to "false" or, for Puppet Server 5 or later, not present.  The
# legacy auth.conf format used by Ruby Puppet code is expected to eventually be
# dropped in favor of the HOCON-based auth.conf format that Puppet Server uses.
#
# If you are using Puppet Server and have the "jruby-puppet.use-legacy-auth-conf"
# setting in the "/etc/puppetlabs/puppetserver/conf.d/puppetserver.conf" file
# set to "false", you can set the desired file access in a new rule in the
# "/etc/puppetlabs/puppetserver/conf.d/auth.conf" file. For example:
#
# {
#   match-request: {
#     path: "^/file_(metadata|content)s?/extra_files/"
#     type: regex
#   }
#   allow: "/^(.+)\.example\.com$/"
#   sort-order: 200
#   name: "extra files mount"
# }
#
# If added to auth.conf with a "sort-order" LESS than that of the default
# "path /file" rule, this rule will add stricter restrictions to the extra_files
# mount point. The "sort-order" parameter sets the order in which Puppet Server
# evaluates the rule by prioritizing it on a numeric value between 1 and 399 (to
# be evaluated before default Puppet rules) or 601 to 998 (to be evaluated after
# Puppet), with lower-numbered values evaluated first.
#
# If you are not using Puppet Server or are using Puppet Server but with the
# "jruby-puppet.use-legacy-auth-conf" setting set to "true", you could set the
# desired file access in a new rule in the "/etc/puppetlabs/puppet/auth.conf"
# file. For example:
#
# path ~ ^/file_(metadata|content)s?/extra_files/
# auth yes
# allow /^(.+)\.example\.com$/
# allow_ip 192.168.100.0/24
#
# If added to auth.conf BEFORE the default "path /file" rule, this rule
# will add stricter restrictions to the extra_files mount point.
