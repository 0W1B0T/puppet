#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 858)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'75,77,157,-279,60,70,144,71,-276,114,-143,-267,289,165,473,311,-281',
'144,312,449,400,334,385,116,20,119,126,113,115,145,51,271,54,290,66',
'12,386,58,43,46,145,53,44,10,11,-279,166,61,19,118,-276,45,-143,-267',
'17,18,-142,132,-281,101,100,125,82,335,96,97,75,77,52,127,167,95,42',
'78,396,80,81,79,403,-141,59,48,67,68,62,63,64,65,55,-184,-184,57,75',
'77,69,449,60,70,-142,71,102,114,-140,278,450,144,128,129,130,131,277',
'445,445,444,444,116,20,119,126,113,115,-141,51,404,54,271,66,137,145',
'58,43,46,279,53,44,-183,-183,-183,-183,61,19,118,406,45,-140,395,17',
'18,281,132,394,101,100,125,82,380,96,97,-182,-182,52,127,-221,95,42',
'78,412,80,81,-184,-184,-138,59,48,67,68,62,63,64,65,55,-181,-181,57',
'75,77,69,305,60,70,414,71,102,114,326,327,315,314,128,129,130,131,134',
'135,-179,-179,306,116,20,119,148,113,115,-138,51,274,54,273,66,12,271',
'58,43,46,84,53,44,10,11,-178,-178,61,19,118,421,45,134,135,17,18,422',
'98,99,101,100,384,82,332,96,97,-178,-178,52,333,126,95,42,78,425,80',
'81,289,-182,-182,59,48,67,68,62,63,64,65,55,289,293,57,75,77,69,369',
'60,70,290,71,102,132,289,381,289,125,428,289,-181,-181,-180,-180,282',
'127,126,293,20,293,271,380,293,380,51,290,54,290,66,12,290,58,43,46',
'148,53,44,10,11,324,94,61,19,435,436,45,437,132,17,18,438,125,128,129',
'130,131,82,376,94,127,261,260,52,442,157,446,42,78,448,80,81,309,86',
'195,59,48,67,68,62,63,64,65,55,192,373,57,75,77,69,458,60,70,190,71',
'494,309,128,129,130,131,461,371,332,368,364,362,361,465,126,313,20,397',
'467,332,126,340,51,470,54,332,66,12,149,58,43,46,148,53,44,10,11,86',
'94,61,19,94,476,45,448,132,17,18,478,125,94,132,479,480,82,125,481,127',
'332,94,52,485,486,127,42,78,487,80,81,488,489,490,59,48,67,68,62,63',
'64,65,55,94,332,57,75,77,69,86,60,70,498,71,492,114,128,129,130,131',
'499,83,128,129,130,131,501,502,503,116,20,119,364,113,115,,51,,54,,66',
'12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,,98,99,101,100,,82',
',96,97,,,52,,126,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,102,132,,,,125,,,,,,,,127,126,,20,,,,-266,,51,,54',
',66,137,,58,43,46,,53,44,,,,,61,19,,,45,,132,17,18,,125,128,129,130',
'131,82,,,127,,,52,,-266,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,114,128,129,130,131,,,,,,,,126,,116,20,119',
'126,113,115,122,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45',
'132,,17,18,125,132,,431,,125,82,,127,,,,52,127,,95,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,128,129,130,131,,128',
'129,130,131,,,,126,,,20,,126,,,,51,,54,,66,12,,58,43,46,,53,44,10,11',
',,61,19,,,45,132,,17,18,125,132,,,,125,82,,127,,,,52,127,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,128,129,130',
'131,,128,129,130,131,,,,126,,,20,,126,,,,51,,54,,66,137,,58,43,46,,53',
'44,,,,,61,19,,,45,132,,17,18,125,132,,,,125,82,,127,,,,52,127,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,484,128',
'129,130,131,,128,129,130,131,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,',
'53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,75,77,,,167,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,114,165,',
',162,,,,75,77,,,167,,116,20,119,,113,115,,51,,54,82,66,137,,58,43,46',
',53,44,166,78,,,61,19,118,,45,,,17,18,165,,,162,,,82,75,77,,,167,52',
',,95,42,78,,80,81,,,82,59,48,67,68,62,63,64,65,55,166,78,57,75,77,69',
',60,70,,71,,114,165,,,162,,,,75,77,,,167,,116,20,119,,113,115,,51,,54',
'82,66,137,,58,43,46,,53,44,166,78,,,61,19,118,,45,,,17,18,165,,,162',
',,82,,96,97,,,52,,,95,42,78,,80,81,,,82,59,48,67,68,62,63,64,65,55,166',
'78,57,75,77,69,114,60,70,,71,,114,,,,,,,,116,,119,,113,115,116,20,119',
',113,115,,51,,54,,66,137,,58,43,46,,53,44,118,,,,61,19,118,,45,,,17',
'18,,,96,97,,,82,,,95,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,,60,70,,71,,114,,,,,,,,,,,,,,116,20,119,,113,115,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,118,,45,,,17,18,87,88,89,',
',,82,,96,97,,,52,,,95,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,114,60,70,,71,,114,,,,90,92,91,93,116,,119,,113,115,116,20',
'119,,113,115,,51,,54,,66,137,,58,43,46,,53,44,118,,,,61,19,118,,45,',
',17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,143,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,114,60,70,,71,,,,,,,',
',,116,,119,,113,115,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,118,,,',
'61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62',
'63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54',
',66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,',
'42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71',
',,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,333,,,,,,,,,,,,,',
'20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,183,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,172',
'169,67,68,62,63,64,65,170,179,178,171,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,',
',,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53',
'44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,',
'52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70',
',71,378,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11',
',,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,388,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11',
',,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,174,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,172,169,67,68,62,63,64,65,170,179,178,171,75',
'77,69,,60,70,181,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,172,169,67,68,62,63,64,65,170,179,178,171,75,77,69,,60,70,,71,407',
',,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,172,169,67,68,62,63',
'64,65,170,179,178,171,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,390,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10',
'11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,194,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,',
'61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62',
'63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54',
',66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,451,,,,,,,,,,,,,,,,20,,,,,,51,,54',
',66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,',
'42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71',
',,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12',
',58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45',
',,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65',
'55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46',
',53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,',
',,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,',
',,20,,,,,,212,230,222,231,66,224,233,225,43,210,,214,208,,,,,61,19,234',
'229,209,,,17,207,,,,,,,82,,,,,232,213,,,,42,78,,80,81,,,,226,211,227',
'228,217,218,219,220,223,235,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,',
'20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,',
',82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77',
'69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44',
',,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67',
'68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18',
',,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57',
'75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46',
',53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59',
'48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20',
',,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82',
',,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69',
',60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,',
',,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68',
'62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,',
'54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52',
',,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,',
'71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19',
',,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64',
'65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,257,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43',
'46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,',
',,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53',
'44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,',
',,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78',
',80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,',
',,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,',
'57,75,77,69,,60,70,,71,303,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58',
'43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17',
'18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,172,169,67,68,62,63,64,65,170',
'179,178,171,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137',
',58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80',
'81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,',
',,,,,,20,295,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,',
',17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55',
',,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58',
'43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81',
',,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,',
',,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,',
',,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75',
'77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53',
'44,,,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48',
'67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,',
',,51,,54,,66,137,,58,43,46,,53,44,,,,,61,19,,,45,,,17,18,,,,,,,82,,',
',,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60',
'70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66,137,,58,43,46,,53,44,,,,,61',
'19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,59,48,67,68,62,63',
'64,65,55,,,57,75,77,69,,60,70,,71,,,,,,,,,,,,,,,,,20,,,,,,51,,54,,66',
'12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,,,52,,,,42',
'78,,80,81,,,,59,48,67,68,62,63,64,65,55,,,57,75,77,69,,60,70,,71,,,',
',,,,,,,,,,,,,20,,,,,,51,,54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,',
'45,,,17,18,,,,,,,82,,,,,,52,,,,42,78,,80,81,,,,172,169,67,68,62,63,64',
'65,170,179,178,171,75,77,69,,60,70,,71,183,,,,,,,,,,,,,,,,20,,,,,,51',
',54,,66,12,,58,43,46,,53,44,10,11,,,61,19,,,45,,,17,18,,,,,,,82,,,,',
',52,,,,42,78,,80,81,,,,172,169,67,68,62,63,64,65,170,179,178,171,,114',
'69,296,,,,,,,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,',
',,,,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114,,297,,,95,,',
',,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,102,,,,,,118',
',,,112,111,,,98,99,101,100,103,104,,96,97,114,,298,,,95,,,,,,,110,105',
'116,,119,,113,115,,106,108,107,109,,,,,,,,,,102,,,,,,118,,,,112,111',
',,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115',
',106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103',
'104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109',
',,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,',
',,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102',
',,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105',
'116,,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111',
',,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,114,113',
'115,,106,108,107,109,,,,,,,116,,119,,113,115,102,,,118,,,,112,111,,',
'98,99,101,100,103,104,,96,97,118,,,,,95,,,98,99,101,100,103,104,114',
'96,97,,,,,,95,,,,110,105,116,,119,114,113,115,102,106,108,107,109,,',
',,,,116,,119,,113,115,102,,,118,,,,112,111,,,98,99,101,100,103,104,',
'96,97,118,,,,,95,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105',
'116,,119,114,113,115,102,106,108,107,109,,,,,,105,116,,119,,113,115',
'102,106,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,118,,,,,95,,',
'98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,365,119,,113',
'115,102,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101',
'100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108',
'107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114',
'96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109,,,,,,,,',
',,,,102,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,',
',,110,105,116,330,119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118',
',,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116',
',119,,113,115,,106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98',
'99,101,100,103,104,114,96,97,,,336,,,95,,,,110,105,116,,119,,113,115',
',106,108,107,109,,,,,,,,,,,,,102,,,118,,,,112,111,,,98,99,101,100,103',
'104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,115,,106,108,107,109',
',,,,,,,,,,,,102,,,118,,,,112,111,,114,98,99,101,100,103,104,,96,97,',
',,105,116,95,119,,113,115,,106,,,,,326,327,,,,,,,,,,,,,118,,,,102,114',
',,98,99,101,100,103,104,,96,97,110,105,116,,119,95,113,115,114,106,108',
'107,109,,,,,,,,110,105,116,,119,,113,115,118,106,108,107,109,111,102',
',98,99,101,100,103,104,,96,97,,,,118,,95,,,114,,,98,99,101,100,103,104',
',96,97,,105,116,,119,95,113,115,114,106,,,,,102,,,,,,,105,116,,119,',
'113,115,118,106,,,,,102,,98,99,101,100,103,104,,96,97,,,,118,,95,,,',
',,98,99,101,100,103,104,,96,97,,352,230,351,231,95,349,233,353,,342',
',348,350,102,,,,,,234,229,354,,,,347,,,,,,,,102,,,,232,355,,,,,,,,,',
',,358,356,359,357,343,344,345,346,360,235,352,230,351,231,,349,233,353',
',342,,348,350,,,,,,,234,229,354,,,,347,,,,,,,,,,,,232,355,,,,,,,,,,',
',358,356,359,357,343,344,345,346,360,235,352,230,351,231,,349,233,353',
',342,,348,350,,,,,,,234,229,354,,,,347,,,,,,,,,,,,232,355,,,,,,,,,,',
',358,356,359,357,343,344,345,346,360,235,352,230,351,231,,349,233,353',
',342,,348,350,,,,,,,234,229,354,,,,347,,,,,,,,,,,,232,355,,,,,,,,,,',
',358,356,359,357,343,344,345,346,360,235,352,230,351,231,,349,233,353',
',342,,348,350,,,,,,,234,229,354,,,,347,,,,,,,,,,,,232,355,,,,,,,,,,',
',358,356,359,357,343,344,345,346,360,235,352,230,351,231,,349,233,353',
',342,,348,350,,,,,,,234,229,354,,,,347,,,,,,,,,,,,232,355,,,,,,,,,,',
',358,356,359,357,343,344,345,346,360,235' ]
        racc_action_table = arr = ::Array.new(10073, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,57,228,0,0,169,0,209,239,220,208,291,306,441,182,227,48,182,441',
'304,221,294,239,0,239,55,239,239,169,0,155,0,291,0,0,294,0,0,0,48,0',
'0,0,0,228,306,0,0,239,209,0,220,208,0,0,219,55,227,239,239,55,0,221',
'239,239,190,190,0,55,190,239,0,0,301,0,0,0,307,218,0,0,0,0,0,0,0,0,0',
'220,220,0,487,487,0,391,487,487,219,487,239,240,217,145,391,211,55,55',
'55,55,145,388,442,388,442,240,487,240,133,240,240,218,487,308,487,154',
'487,487,211,487,487,487,145,487,487,219,219,64,64,487,487,240,310,487',
'217,300,487,487,147,133,299,240,240,133,487,323,240,240,218,218,487',
'133,328,240,487,487,329,487,487,65,65,210,487,487,487,487,487,487,487',
'487,487,217,217,487,4,4,487,158,4,4,331,4,240,244,412,412,187,187,133',
'133,133,133,56,56,60,60,160,244,4,244,143,244,244,210,4,142,4,140,4',
'4,168,4,4,4,4,4,4,4,4,46,46,4,4,244,337,4,16,16,4,4,339,244,244,244',
'244,292,4,341,244,244,210,210,4,347,59,244,4,4,363,4,4,148,63,63,4,4',
'4,4,4,4,4,4,4,290,148,4,479,479,4,271,479,479,148,479,244,59,192,289',
'271,59,366,380,62,62,61,61,148,59,54,192,479,271,123,370,380,283,479',
'192,479,271,479,479,380,479,479,479,373,479,479,479,479,192,121,479',
'479,375,376,479,377,54,479,479,379,54,59,59,59,59,479,279,120,54,117',
'116,479,387,171,389,479,479,390,479,479,173,85,83,479,479,479,479,479',
'479,479,479,479,79,275,479,478,478,479,398,478,478,78,478,478,180,54',
'54,54,54,411,272,413,269,266,265,263,420,172,185,478,302,424,427,170',
'259,478,432,478,433,478,478,50,478,478,478,49,478,478,478,478,196,201',
'478,478,202,445,478,446,172,478,478,448,172,203,170,450,453,478,170',
'456,172,457,204,478,460,463,170,478,478,464,478,478,469,471,472,478',
'478,478,478,478,478,478,478,478,8,206,478,476,476,478,5,476,476,482',
'476,476,245,172,172,172,172,483,1,170,170,170,170,491,493,495,245,476',
'245,500,245,245,,476,,476,,476,476,,476,476,476,,476,476,476,476,,,476',
'476,245,,476,,,476,476,,245,245,245,245,,476,,245,245,,,476,,226,245',
'476,476,,476,476,,,,476,476,476,476,476,476,476,476,476,,,476,214,214',
'476,,214,214,,214,245,226,,,,226,,,,,,,,226,224,,214,,,,224,,214,,214',
',214,214,,214,214,214,,214,214,,,,,214,214,,,214,,224,214,214,,224,226',
'226,226,226,214,,,224,,,214,,224,,214,214,,214,214,,,,214,214,214,214',
'214,214,214,214,214,,,214,10,10,214,,10,10,,10,,237,224,224,224,224',
',,,,,,,368,,237,10,237,12,237,237,12,10,,10,,10,10,,10,10,10,,10,10',
'10,10,,,10,10,237,,10,368,,10,10,368,12,,368,,12,10,,368,,,,10,12,,237',
'10,10,,10,10,,,,10,10,10,10,10,10,10,10,10,,,10,11,11,10,,11,11,,11',
',368,368,368,368,,12,12,12,12,,,,156,,,11,,223,,,,11,,11,,11,11,,11',
'11,11,,11,11,11,11,,,11,11,,,11,156,,11,11,156,223,,,,223,11,,156,,',
',11,223,,,11,11,,11,11,,,,11,11,11,11,11,11,11,11,11,,,11,213,213,11',
',213,213,,213,,156,156,156,156,,223,223,223,223,,,,222,,,213,,137,,',
',213,,213,,213,213,,213,213,213,,213,213,,,,,213,213,,,213,222,,213',
'213,222,137,,,,137,213,,222,,,,213,137,,,213,213,,213,213,,,,213,213',
'213,213,213,213,213,213,213,,,213,458,458,213,,458,458,,458,458,222',
'222,222,222,,137,137,137,137,,,,,,,458,,,,,,458,,458,,458,458,,458,458',
'458,,458,458,458,458,,,458,458,,,458,,,458,458,,,,,,,458,225,225,,,225',
'458,,,,458,458,,458,458,,,,458,458,458,458,458,458,458,458,458,,,458',
'17,17,458,,17,17,,17,,238,225,,,225,,,,400,400,,,400,,238,17,238,,238',
'238,,17,,17,225,17,17,,17,17,17,,17,17,225,225,,,17,17,238,,17,,,17',
'17,400,,,400,,,17,58,58,,,58,17,,,238,17,17,,17,17,,,400,17,17,17,17',
'17,17,17,17,17,400,400,17,18,18,17,,18,18,,18,,242,58,,,58,,,,305,305',
',,305,,242,18,242,,242,242,,18,,18,58,18,18,,18,18,18,,18,18,58,58,',
',18,18,242,,18,,,18,18,305,,,305,,,18,,242,242,,,18,,,242,18,18,,18',
'18,,,305,18,18,18,18,18,18,18,18,18,305,305,18,19,19,18,243,19,19,,19',
',136,,,,,,,,243,,243,,243,243,136,19,136,,136,136,,19,,19,,19,19,,19',
'19,19,,19,19,243,,,,19,19,136,,19,,,19,19,,,243,243,,,19,,,243,,,19',
',,,19,19,,19,19,,,,19,19,19,19,19,19,19,19,19,,,19,20,20,19,,20,20,',
'20,,241,,,,,,,,,,,,,,241,20,241,,241,241,,20,,20,,20,20,,20,20,20,,20',
'20,20,20,,,20,20,241,,20,,,20,20,7,7,7,,,,20,,241,241,,,20,,,241,20',
'20,,20,20,,,,20,20,20,20,20,20,20,20,20,,,20,449,449,20,236,449,449',
',449,,138,,,,7,7,7,7,236,,236,,236,236,138,449,138,,138,138,,449,,449',
',449,449,,449,449,449,,449,449,236,,,,449,449,138,,449,,,449,449,,,',
',,,449,,,,,,449,,,,449,449,,449,449,,,,449,449,449,449,449,449,449,449',
'449,,,449,47,47,449,,47,47,,47,,,,,,,,,,,,,,,,,47,47,,,,,47,,47,,47',
'47,,47,47,47,,47,47,47,47,,,47,47,,,47,,,47,47,,,,,,,47,,,,,,47,,,,47',
'47,,47,47,,,,47,47,47,47,47,47,47,47,47,,,47,444,444,47,139,444,444',
',444,,,,,,,,,,139,,139,,139,139,,444,,,,,,444,,444,,444,444,,444,444',
'444,,444,444,139,,,,444,444,,,444,,,444,444,,,,,,,444,,,,,,444,,,,444',
'444,,444,444,,,,444,444,444,444,444,444,444,444,444,,,444,212,212,444',
',212,212,,212,,,,,,,,,,,,,,,,,212,,,,,,212,,212,,212,212,,212,212,212',
',212,212,,,,,212,212,,,212,,,212,212,,,,,,,212,,,,,,212,,,,212,212,',
'212,212,,,,212,212,212,212,212,212,212,212,212,,,212,436,436,212,,436',
'436,,436,,,,,,,,,,,,,,,,,436,,,,,,436,,436,,436,436,,436,436,436,,436',
'436,436,436,,,436,436,,,436,,,436,436,,,,,,,436,,,,,,436,,,,436,436',
',436,436,,,,436,436,436,436,436,436,436,436,436,,,436,51,51,436,,51',
'51,,51,,,,,,,,,,,,,,,,,51,,,,,,51,,51,,51,51,,51,51,51,,51,51,,,,,51',
'51,,,51,,,51,51,,,,,,,51,,,,,,51,,,,51,51,,51,51,,,,51,51,51,51,51,51',
'51,51,51,,,51,52,52,51,,52,52,,52,,,,,,,,,,,,,,,,,52,,,,,,52,,52,,52',
'52,,52,52,52,,52,52,,,,,52,52,,,52,,,52,52,,,,,,,52,,,,,,52,,,,52,52',
',52,52,,,,52,52,52,52,52,52,52,52,52,,,52,53,53,52,,53,53,,53,,,,,,',
',,,,,,,,,,53,,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53',
'53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,,,53,53,53,53,53,53,53,53,53,,',
'53,207,207,53,,207,207,,207,,,207,,,,,,,,,,,,,,207,,,,,,207,,207,,207',
'207,,207,207,207,,207,207,,,,,207,207,,,207,,,207,207,,,,,,,207,,,,',
',207,,,,207,207,,207,207,,,,207,207,207,207,207,207,207,207,207,,,207',
'194,194,207,,194,194,,194,194,,,,,,,,,,,,,,,,194,,,,,,194,,194,,194',
'194,,194,194,194,,194,194,194,194,,,194,194,,,194,,,194,194,,,,,,,194',
',,,,,194,,,,194,194,,194,194,,,,194,194,194,194,194,194,194,194,194',
'194,194,194,428,428,194,,428,428,,428,,,,,,,,,,,,,,,,,428,,,,,,428,',
'428,,428,428,,428,428,428,,428,428,428,428,,,428,428,,,428,,,428,428',
',,,,,,428,,,,,,428,,,,428,428,,428,428,,,,428,428,428,428,428,428,428',
'428,428,,,428,191,191,428,,191,191,,191,,,,,,,,,,,,,,,,,191,,,,,,191',
',191,,191,191,,191,191,191,,191,191,191,191,,,191,191,,,191,,,191,191',
',,,,,,191,,,,,,191,,,,191,191,,191,191,,,,191,191,191,191,191,191,191',
'191,191,,,191,257,257,191,,257,257,,257,,,,,,,,,,,,,,,,,257,,,,,,257',
',257,,257,257,,257,257,257,,257,257,,,,,257,257,,,257,,,257,257,,,,',
',,257,,,,,,257,,,,257,257,,257,257,,,,257,257,257,257,257,257,257,257',
'257,,,257,274,274,257,,274,274,,274,,,,,,,,,,,,,,,,,274,,,,,,274,,274',
',274,274,,274,274,274,,274,274,274,274,,,274,274,,,274,,,274,274,,,',
',,,274,,,,,,274,,,,274,274,,274,274,,,,274,274,274,274,274,274,274,274',
'274,,,274,421,421,274,,421,421,,421,,,,,,,,,,,,,,,,,421,,,,,,421,,421',
',421,421,,421,421,421,,421,421,,,,,421,421,,,421,,,421,421,,,,,,,421',
',,,,,421,,,,421,421,,421,421,,,,421,421,421,421,421,421,421,421,421',
',,421,277,277,421,,277,277,,277,,,,,,,,,,,,,,,,,277,,,,,,277,,277,,277',
'277,,277,277,277,,277,277,,,,,277,277,,,277,,,277,277,,,,,,,277,,,,',
',277,,,,277,277,,277,277,,,,277,277,277,277,277,277,277,277,277,,,277',
'278,278,277,,278,278,,278,,,,,,,,,,,,,,,,,278,,,,,,278,,278,,278,278',
',278,278,278,,278,278,278,278,,,278,278,,,278,,,278,278,,,,,,,278,,',
',,,278,,,,278,278,,278,278,,,,278,278,278,278,278,278,278,278,278,,',
'278,281,281,278,,281,281,,281,281,,,,,,,,,,,,,,,,281,,,,,,281,,281,',
'281,281,,281,281,281,,281,281,281,281,,,281,281,,,281,,,281,281,,,,',
',,281,,,,,,281,,,,281,281,,281,281,,,,281,281,281,281,281,281,281,281',
'281,,,281,296,296,281,,296,296,,296,296,,,,,,,,,,,,,,,,296,,,,,,296',
',296,,296,296,,296,296,296,,296,296,296,296,,,296,296,,,296,,,296,296',
',,,,,,296,,,,,,296,,,,296,296,,296,296,,,,296,296,296,296,296,296,296',
'296,296,,,296,403,403,296,,403,403,,403,,,,,,,,,,,,,,,,,403,,,,,,403',
',403,,403,403,,403,403,403,,403,403,403,403,,,403,403,,,403,,,403,403',
',,,,,,403,,,,,,403,,,,403,403,,403,403,,,,403,403,403,403,403,403,403',
'403,403,,,403,69,69,403,,69,69,69,69,,,,,,,,,,,,,,,,,69,,,,,,69,,69',
',69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69',
',,,69,69,,69,69,,,,69,69,69,69,69,69,69,69,69,69,69,69,70,70,69,,70',
'70,70,70,,,,,,,,,,,,,,,,,70,,,,,,70,,70,,70,70,,70,70,70,,70,70,70,70',
',,70,70,,,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70,,70,70,,,,70,70,70,70',
'70,70,70,70,70,70,70,70,312,312,70,,312,312,,312,312,,,,,,,,,,,,,,,',
'312,,,,,,312,,312,,312,312,,312,312,312,,312,312,312,312,,,312,312,',
',312,,,312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312,,,,312,312,312',
'312,312,312,312,312,312,312,312,312,76,76,312,,76,76,,76,,,,,,,,,,,',
',,,,,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76',
'76,,,,,,,76,,,,,,76,,,,76,76,,76,76,,,,76,76,76,76,76,76,76,76,76,,',
'76,297,297,76,,297,297,,297,297,,,,,,,,,,,,,,,,297,,,,,,297,,297,,297',
'297,,297,297,297,,297,297,297,297,,,297,297,,,297,,,297,297,,,,,,,297',
',,,,,297,,,,297,297,,297,297,,,,297,297,297,297,297,297,297,297,297',
',,297,395,395,297,,395,395,,395,,,,,,,,,,,,,,,,,395,,,,,,395,,395,,395',
'395,,395,395,395,,395,395,395,395,,,395,395,,,395,,,395,395,,,,,,,395',
',,,,,395,,,,395,395,,395,395,,,,395,395,395,395,395,395,395,395,395',
',,395,81,81,395,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81',
'81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81',
',,,81,81,81,81,81,81,81,81,81,,,81,394,394,81,,394,394,,394,,,,,,,,',
',,,,,,,,394,,,,,,394,,394,,394,394,,394,394,394,,394,394,394,394,,,394',
'394,,,394,,,394,394,,,,,,,394,,,,,,394,,,,394,394,,394,394,,,,394,394',
'394,394,394,394,394,394,394,,,394,84,84,394,,84,84,,84,,,,,,,,,,,,,',
',,,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84',
',,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,84,84,84,84,,,84',
'392,392,84,,392,392,,392,392,,,,,,,,,,,,,,,,392,,,,,,392,,392,,392,392',
',392,392,392,,392,392,,,,,392,392,,,392,,,392,392,,,,,,,392,,,,,,392',
',,,392,392,,392,392,,,,392,392,392,392,392,392,392,392,392,,,392,86',
'86,392,,86,86,,86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86',
'86,86,86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86',
'86,86,86,86,86,86,86,86,,,86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87',
',,,,,87,,87,,87,87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,',
',87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,87,87,,,87,88,88',
'87,,88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88',
'88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88',
'88,88,88,88,88,88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,',
',,89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89',
',,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,89,89,89,89,,,89,90,90,89',
',90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90',
'90,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90',
'90,90,90,90,90,90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91',
',91,,91,91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,',
',91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,91,91,,,91,92,92,91,,92',
'92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92',
',,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92',
'92,92,92,92,92,,,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,',
'93,,93,93,,93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,',
'93,,,,93,93,,93,93,,,,93,93,93,93,93,93,93,93,93,,,93,94,94,93,,94,94',
',94,,,,,,,,,,,,,,,,,94,,,,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,',
',94,94,94,94,94,,,94,94,,,,,,,94,,,,,94,94,,,,94,94,,94,94,,,,94,94',
'94,94,94,94,94,94,94,94,,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,',
',,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,',
',,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,95,95,,,95,96,96,95,',
'96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,',
',96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96',
'96,96,96,96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,',
'97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,',
',,97,97,,97,97,,,,97,97,97,97,97,97,97,97,97,,,97,98,98,97,,98,98,,98',
',,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98',
',,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,98',
'98,,,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99',
'99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99',
',,,99,99,99,99,99,99,99,99,99,,,99,100,100,99,,100,100,,100,,,,,,,,',
',,,,,,,,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100',
',,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100',
'100,100,100,100,100,100,,,100,101,101,100,,101,101,,101,,,,,,,,,,,,',
',,,,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101',
',,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101',
'101,101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,',
'102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,',
',102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102',
'102,102,102,102,,,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103',
',,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103',
'103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,103',
'103,103,103,,,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,,,,',
',104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104',
',,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,104,104',
'104,104,,,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,,,,,,105',
',105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,',
',,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,105,105,105',
'105,,,105,106,106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,,,,,,106,,106',
',106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106',
',,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106,106,106,106',
',,106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107',
'107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,',
',107,,,,107,107,,107,107,,,,107,107,107,107,107,107,107,107,107,,,107',
'108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108',
',108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108',
',,,108,108,,108,108,,,,108,108,108,108,108,108,108,108,108,,,108,109',
'109,108,,109,109,,109,,,,,,,,,,,,,,,,,109,,,,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109',
'109,,109,109,,,,109,109,109,109,109,109,109,109,109,,,109,110,110,109',
',110,110,,110,,,,,,,,,,,,,,,,,110,,,,,,110,,110,,110,110,,110,110,110',
',110,110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,',
'110,110,,,,110,110,110,110,110,110,110,110,110,,,110,111,111,110,,111',
'111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111,111,,111,111,111,,111',
'111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111',
',,,111,111,111,111,111,111,111,111,111,,,111,112,112,111,,112,112,,112',
',,,,,,,,,,,,,,,,112,,,,,,112,,112,,112,112,,112,112,112,,112,112,,,',
',112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112',
'112,112,112,112,112,112,112,112,,,112,113,113,112,,113,113,,113,,,,',
',,,,,,,,,,,,113,,,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113',
'113,,,113,,,113,113,,,,,,,113,,,,,,113,,,113,113,113,,113,113,,,,113',
'113,113,113,113,113,113,113,113,,,113,114,114,113,,114,114,,114,,,,',
',,,,,,,,,,,,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114',
'114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114',
'114,114,114,114,114,114,114,,,114,385,385,114,,385,385,,385,,,,,,,,',
',,,,,,,,385,,,,,,385,,385,,385,385,,385,385,385,,385,385,385,385,,,385',
'385,,,385,,,385,385,,,,,,,385,,,,,,385,,,,385,385,,385,385,,,,385,385',
'385,385,385,385,385,385,385,,,385,384,384,385,,384,384,,384,,,,,,,,',
',,,,,,,,384,,,,,,384,,384,,384,384,,384,384,384,,384,384,,,,,384,384',
',,384,,,384,384,,,,,,,384,,,,,,384,,,,384,384,,384,384,,,,384,384,384',
'384,384,384,384,384,384,,,384,118,118,384,,118,118,,118,,,,,,,,,,,,',
',,,,118,,,,,,118,,118,,118,118,,118,118,118,,118,118,,,,,118,118,,,118',
',,118,118,,,,,,,118,,,,,,118,,,,118,118,,118,118,,,,118,118,118,118',
'118,118,118,118,118,,,118,119,119,118,,119,119,,119,,,,,,,,,,,,,,,,',
'119,,,,,,119,,119,,119,119,,119,119,119,,119,119,,,,,119,119,,,119,',
',119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119,,,,119,119,119,119,119',
'119,119,119,119,,,119,381,381,119,,381,381,,381,,,,,,,,,,,,,,,,,381',
',,,,,381,,381,,381,381,,381,381,381,,381,381,,,,,381,381,,,381,,,381',
'381,,,,,,,381,,,,,,381,,,,381,381,,381,381,,,,381,381,381,381,381,381',
'381,381,381,,,381,298,298,381,,298,298,,298,,,,,,,,,,,,,,,,,298,,,,',
',298,,298,,298,298,,298,298,298,,298,298,,,,,298,298,,,298,,,298,298',
',,,,,,298,,,,,,298,,,,298,298,,298,298,,,,298,298,298,298,298,298,298',
'298,298,,,298,122,122,298,,122,122,,122,,,,,,,,,,,,,,,,,122,,,,,,122',
',122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122,,,122,122,,,,',
',,122,,,,,,122,,,,122,122,,122,122,,,,122,122,122,122,122,122,122,122',
'122,,,122,157,157,122,,157,157,,157,157,,,,,,,,,,,,,,,,157,,,,,,157',
',157,,157,157,,157,157,157,,157,157,157,157,,,157,157,,,157,,,157,157',
',,,,,,157,,,,,,157,,,,157,157,,157,157,,,,157,157,157,157,157,157,157',
'157,157,,,157,309,309,157,,309,309,,309,,,,,,,,,,,,,,,,,309,,,,,,309',
',309,,309,309,,309,309,309,,309,309,309,309,,,309,309,,,309,,,309,309',
',,,,,,309,,,,,,309,,,,309,309,,309,309,,,,309,309,309,309,309,309,309',
'309,309,309,309,309,364,364,309,,364,364,,364,,,,,,,,,,,,,,,,,364,,',
',,,364,,364,,364,364,,364,364,364,,364,364,,,,,364,364,,,364,,,364,364',
',,,,,,364,,,,,,364,,,,364,364,,364,364,,,,364,364,364,364,364,364,364',
'364,364,,,364,149,149,364,,149,149,,149,,,,,,,,,,,,,,,,,149,149,,,,',
'149,,149,,149,149,,149,149,149,,149,149,149,149,,,149,149,,,149,,,149',
'149,,,,,,,149,,,,,,149,,,,149,149,,149,149,,,,149,149,149,149,149,149',
'149,149,149,,,149,340,340,149,,340,340,,340,,,,,,,,,,,,,,,,,340,,,,',
',340,,340,,340,340,,340,340,340,,340,340,,,,,340,340,,,340,,,340,340',
',,,,,,340,,,,,,340,,,,340,340,,340,340,,,,340,340,340,340,340,340,340',
'340,340,,,340,336,336,340,,336,336,,336,,,,,,,,,,,,,,,,,336,,,,,,336',
',336,,336,336,,336,336,336,,336,336,,,,,336,336,,,336,,,336,336,,,,',
',,336,,,,,,336,,,,336,336,,336,336,,,,336,336,336,336,336,336,336,336',
'336,,,336,335,335,336,,335,335,,335,,,,,,,,,,,,,,,,,335,,,,,,335,,335',
',335,335,,335,335,335,,335,335,,,,,335,335,,,335,,,335,335,,,,,,,335',
',,,,,335,,,,335,335,,335,335,,,,335,335,335,335,335,335,335,335,335',
',,335,334,334,335,,334,334,,334,,,,,,,,,,,,,,,,,334,,,,,,334,,334,,334',
'334,,334,334,334,,334,334,,,,,334,334,,,334,,,334,334,,,,,,,334,,,,',
',334,,,,334,334,,334,334,,,,334,334,334,334,334,334,334,334,334,,,334',
'333,333,334,,333,333,,333,,,,,,,,,,,,,,,,,333,,,,,,333,,333,,333,333',
',333,333,333,,333,333,,,,,333,333,,,333,,,333,333,,,,,,,333,,,,,,333',
',,,333,333,,333,333,,,,333,333,333,333,333,333,333,333,333,,,333,318',
'318,333,,318,318,,318,,,,,,,,,,,,,,,,,318,,,,,,318,,318,,318,318,,318',
'318,318,,318,318,318,318,,,318,318,,,318,,,318,318,,,,,,,318,,,,,,318',
',,,318,318,,318,318,,,,318,318,318,318,318,318,318,318,318,,,318,313',
'313,318,,313,313,,313,,,,,,,,,,,,,,,,,313,,,,,,313,,313,,313,313,,313',
'313,313,,313,313,313,313,,,313,313,,,313,,,313,313,,,,,,,313,,,,,,313',
',,,313,313,,313,313,,,,313,313,313,313,313,313,313,313,313,313,313,313',
'71,71,313,,71,71,,71,71,,,,,,,,,,,,,,,,71,,,,,,71,,71,,71,71,,71,71',
'71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71',
',,,71,71,71,71,71,71,71,71,71,71,71,71,,150,71,150,,,,,,,,,,150,150',
'150,,150,,150,150,,150,150,150,150,,,,,,,,,,,,,,,,150,,,,150,150,,,150',
'150,150,150,150,150,,150,150,152,,152,,,150,,,,,,,152,152,152,,152,',
'152,152,,152,152,152,152,,,,,,,,,,150,,,,,,152,,,,152,152,,,152,152',
'152,152,152,152,,152,152,153,,153,,,152,,,,,,,153,153,153,,153,,153',
'153,,153,153,153,153,,,,,,,,,,152,,,,,,153,,,,153,153,,,153,153,153',
'153,153,153,9,153,153,,,,,,153,,,,9,9,9,,9,,9,9,,9,9,9,9,,,,,,,,,,,',
',153,,,9,,,,9,9,,,9,9,9,9,9,9,440,9,9,,,,,,9,,,,440,440,440,,440,,440',
'440,,440,440,440,440,,,,,,,,,,,,,9,,,440,,,,440,440,,,440,440,440,440',
'440,440,374,440,440,,,,,,440,,,,374,374,374,,374,,374,374,,374,374,374',
'374,,,,,,,,,,,,,440,,,374,,,,374,374,,,374,374,374,374,374,374,416,374',
'374,,,,,,374,,,,416,416,416,,416,,416,416,,416,416,416,416,,,,,,,,,',
',,,374,,,416,,,,416,416,,,416,416,416,416,416,416,417,416,416,,,,,,416',
',,,417,417,417,,417,246,417,417,,417,417,417,417,,,,,,,246,,246,,246',
'246,416,,,417,,,,417,417,,,417,417,417,417,417,417,,417,417,246,,,,',
'417,,,246,246,246,246,246,246,418,246,246,,,,,,246,,,,418,418,418,,418',
'247,418,418,417,418,418,418,418,,,,,,,247,,247,,247,247,246,,,418,,',
',418,418,,,418,418,418,418,418,418,,418,418,247,,,,,418,,,247,247,247',
'247,247,247,419,247,247,,,,,,247,,,,419,419,419,,419,248,419,419,418',
'419,419,419,419,,,,,,248,248,,248,,248,248,247,248,,419,,,,419,419,',
',419,419,419,419,419,419,,419,419,248,,,,,419,,,248,248,248,248,248',
'248,267,248,248,,,,,,248,,,,267,267,267,267,267,,267,267,419,267,267',
'267,267,,,,,,,,,,,,,248,,,267,,,,267,267,,,267,267,267,267,267,267,262',
'267,267,,,,,,267,,,,262,262,262,,262,,262,262,,262,262,262,262,,,,,',
',,,,,,,267,,,262,,,,262,262,,,262,262,262,262,262,262,258,262,262,,',
',,,262,,,,258,258,258,,258,,258,258,,258,258,258,258,,,,,,,,,,,,,262',
',,258,,,,258,258,,,258,258,258,258,258,258,205,258,258,,,,,,258,,,,205',
'205,205,205,205,,205,205,,205,205,205,205,,,,,,,,,,,,,258,,,205,,,,205',
'205,,,205,205,205,205,205,205,423,205,205,,,,,,205,,,,423,423,423,,423',
',423,423,,423,423,423,423,,,,,,,,,,,,,205,,,423,,,,423,423,,,423,423',
'423,423,423,423,254,423,423,,,254,,,423,,,,254,254,254,,254,,254,254',
',254,254,254,254,,,,,,,,,,,,,423,,,254,,,,254,254,,,254,254,254,254',
'254,254,193,254,254,,,,,,254,,,,193,193,193,,193,,193,193,,193,193,193',
'193,,,,,,,,,,,,,254,,,193,,,,193,193,,249,193,193,193,193,193,193,,193',
'193,,,,249,249,193,249,,249,249,,249,,,,,193,193,,,,,,,,,,,,,249,,,',
'193,253,,,249,249,249,249,249,249,,249,249,253,253,253,,253,249,253',
'253,252,253,253,253,253,,,,,,,,252,252,252,,252,,252,252,253,252,252',
'252,252,253,249,,253,253,253,253,253,253,,253,253,,,,252,,253,,,251',
',,252,252,252,252,252,252,,252,252,,251,251,,251,252,251,251,250,251',
',,,,253,,,,,,,250,250,,250,,250,250,251,250,,,,,252,,251,251,251,251',
'251,251,,251,251,,,,250,,251,,,,,,250,250,250,250,250,250,,250,250,',
'261,261,261,261,250,261,261,261,,261,,261,261,251,,,,,,261,261,261,',
',,261,,,,,,,,250,,,,261,261,,,,,,,,,,,,261,261,261,261,261,261,261,261',
'261,261,396,396,396,396,,396,396,396,,396,,396,396,,,,,,,396,396,396',
',,,396,,,,,,,,,,,,396,396,,,,,,,,,,,,396,396,396,396,396,396,396,396',
'396,396,371,371,371,371,,371,371,371,,371,,371,371,,,,,,,371,371,371',
',,,371,,,,,,,,,,,,371,371,,,,,,,,,,,,371,371,371,371,371,371,371,371',
'371,371,365,365,365,365,,365,365,365,,365,,365,365,,,,,,,365,365,365',
',,,365,,,,,,,,,,,,365,365,,,,,,,,,,,,365,365,365,365,365,365,365,365',
'365,365,330,330,330,330,,330,330,330,,330,,330,330,,,,,,,330,330,330',
',,,330,,,,,,,,,,,,330,330,,,,,,,,,,,,330,330,330,330,330,330,330,330',
'330,330,332,332,332,332,,332,332,332,,332,,332,332,,,,,,,332,332,332',
',,,332,,,,,,,,,,,,332,332,,,,,,,,,,,,332,332,332,332,332,332,332,332',
'332,332' ]
        racc_action_check = arr = ::Array.new(10073, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   475,   nil,   nil,   182,   450,   nil,  1328,   448,  8718,
   642,   734,   664,   nil,   nil,   nil,   145,  1010,  1102,  1194,
  1286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   138,  1470,    -9,   337,
   378,  1838,  1930,  2022,   292,    20,   111,    -7,  1073,   248,
   113,   203,   201,   171,    46,    78,   nil,   nil,   nil,  3218,
  3310,  8462,   nil,   nil,   nil,   nil,  3494,   nil,   298,   294,
   nil,  3770,   nil,   355,  3954,   341,  4138,  4230,  4322,  4414,
  4506,  4598,  4690,  4782,  4874,  4966,  5058,  5150,  5242,  5334,
  5426,  5518,  5610,  5702,  5794,  5886,  5978,  6070,  6162,  6254,
  6346,  6438,  6530,  6622,  6714,   nil,   302,   333,  6990,  7082,
   331,   313,  7358,   276,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   112,   nil,   nil,  1198,   848,  1382,  1560,
   190,   nil,   202,   139,   nil,    94,   nil,   139,   225,  7726,
  8550,   nil,  8607,  8664,    99,     5,   751,  7450,   174,   nil,
   185,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   194,   -20,
   390,   337,   384,   340,   nil,   nil,   nil,   nil,   nil,   nil,
   364,   nil,     5,   nil,   nil,   379,   nil,   192,   nil,   nil,
    64,  2390,   250,  9471,  2206,   nil,   400,   nil,   nil,   nil,
   nil,   405,   408,   417,   426,  9309,   445,  2114,    -1,    -4,
   159,    79,  1654,   826,   550,   nil,   nil,    90,    67,    44,
    -2,     9,   843,   756,   568,   981,   524,     4,    -9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1376,   646,  1014,     2,
    94,  1290,  1106,  1192,   186,   462,  8951,  9022,  9093,  9518,
  9648,  9628,  9583,  9563,  9417,   nil,   nil,  2482,  9255,   384,
   nil,  9681,  9201,   340,   nil,   363,   344,  9147,   nil,   347,
   nil,   252,   374,   nil,  2574,   339,   nil,  2758,  2850,   290,
   nil,  2942,   nil,   292,   nil,   nil,   nil,   nil,   nil,   271,
   237,   -24,   238,   nil,     9,   nil,  3034,  3586,  7266,   141,
   136,    65,   383,   nil,   -18,  1119,   -28,    69,   115,  7542,
   134,   nil,  3402,  8370,   nil,   nil,   nil,   nil,  8278,   nil,
   nil,   nil,   nil,   142,   nil,   nil,   nil,   nil,   150,   156,
  9921,   180,  9981,  8186,  8094,  8002,  7910,   221,   nil,   232,
  7818,   234,   nil,   nil,   nil,   nil,   nil,   241,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   248,  7634,  9861,   281,   nil,   659,   nil,
   290,  9801,   nil,   245,  8826,   315,   317,   318,   nil,   261,
   255,  7174,   nil,   nil,  6898,  6806,   nil,   335,    78,   337,
   317,    82,  4046,   nil,  3862,  3678,  9741,   nil,   362,   nil,
  1027,   nil,   nil,  3126,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   311,   114,   371,   nil,   nil,  8880,  8934,  9005,  9076,
   379,  2666,   nil,  9363,   384,   nil,   nil,   382,  2298,   nil,
   nil,   nil,   372,   388,   nil,   nil,  1746,   nil,   nil,   nil,
  8772,     6,    79,   nil,  1562,   409,   387,   nil,   415,  1378,
   419,   nil,   nil,   419,   nil,   nil,   422,   421,   918,   nil,
   427,   nil,   nil,   428,   400,   nil,   nil,   nil,   nil,   435,
   nil,   436,   437,   nil,   nil,   nil,   458,   nil,   366,   274,
   nil,   nil,   456,   464,   nil,   nil,   nil,    90,   nil,   nil,
   nil,   470,   nil,   471,   nil,   472,   nil,   nil,   nil,   nil,
   444,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -285,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -285,  -285,  -185,   -33,   -34,   -35,   -36,  -285,  -285,  -285,
  -285,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,  -285,  -285,   -95,
   -99,  -285,  -285,  -285,  -285,  -285,  -285,  -285,  -285,  -285,
  -235,  -258,  -207,  -208,  -209,  -210,  -204,  -205,  -206,  -285,
  -285,  -285,  -231,  -232,  -233,  -234,  -285,  -237,  -285,  -250,
  -253,  -285,  -259,  -285,  -285,    -7,  -285,  -285,  -285,  -285,
  -285,  -285,  -285,  -285,  -135,  -285,  -285,  -285,  -285,  -285,
  -285,  -285,  -285,  -285,  -285,  -285,  -285,  -285,  -285,  -285,
  -285,  -285,  -285,  -285,  -285,   -93,  -285,  -130,  -284,  -284,
   -22,   -23,  -285,  -284,  -154,  -178,  -179,  -180,  -181,  -182,
  -183,  -184,  -185,  -285,  -151,  -152,   -47,  -185,   -48,   -55,
  -285,   -14,  -260,   -90,   -94,  -285,   -96,  -285,  -285,  -285,
  -285,  -106,  -285,  -285,  -284,  -284,  -285,  -285,  -260,  -165,
  -167,  -168,  -169,  -170,  -171,  -173,  -174,  -235,  -284,  -225,
  -227,  -230,  -226,  -260,  -212,  -221,  -222,  -223,  -228,  -229,
  -260,  -214,  -285,  -217,  -218,  -285,  -236,  -285,  -241,  -244,
  -285,  -248,  -285,  -285,  -285,   505,    -6,    -9,   -11,   -12,
   -13,   -17,   -18,   -19,   -20,  -285,  -260,  -285,   -86,   -87,
   -88,  -278,  -271,  -277,  -265,  -136,  -139,  -207,  -208,  -209,
  -210,  -285,  -268,  -282,  -185,  -274,  -280,  -205,  -206,  -264,
  -269,  -270,  -272,  -273,  -275,  -283,   -37,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,   -49,   -50,   -51,   -52,
   -53,   -54,   -56,   -57,  -285,   -58,  -124,  -285,   -61,  -260,
  -100,  -135,  -134,  -285,  -133,  -285,  -262,  -285,   -28,  -284,
  -186,  -285,  -285,   -59,  -261,  -285,   -92,  -285,  -248,  -285,
  -101,  -285,  -104,  -260,  -189,  -191,  -192,  -193,  -194,  -196,
  -285,  -285,  -199,  -258,  -285,   -98,  -285,  -285,  -285,  -285,
  -285,  -285,  -285,  -162,  -284,  -261,  -285,  -285,  -285,  -261,
  -285,  -215,  -285,  -285,  -238,  -239,  -240,  -242,  -285,  -245,
  -246,  -247,  -249,  -260,  -251,  -254,  -256,  -257,    -8,  -285,
  -135,  -285,  -261,  -285,  -285,  -285,  -285,  -260,  -126,  -285,
  -261,  -260,  -138,  -140,  -141,  -142,  -143,  -285,  -265,  -266,
  -267,  -268,  -271,  -274,  -276,  -277,  -278,  -279,  -280,  -281,
  -282,  -131,  -132,  -285,  -263,  -135,  -285,  -157,  -285,  -187,
  -260,  -135,   -15,   -89,  -201,  -285,  -285,  -285,  -103,  -285,
  -261,  -285,  -197,  -198,  -285,  -285,   -97,  -285,  -109,  -285,
  -115,  -285,  -285,  -119,  -284,  -284,  -135,  -161,  -285,  -175,
  -285,  -166,  -172,  -284,  -211,  -224,  -213,  -216,  -219,  -220,
  -243,  -285,  -285,  -260,   -26,  -137,  -146,  -144,  -145,  -128,
  -285,  -261,   -60,   -62,  -285,   -25,   -29,  -260,  -284,  -158,
  -159,  -160,  -285,  -260,   -91,  -202,  -248,  -102,  -105,  -190,
  -195,  -285,  -109,  -108,  -285,  -285,  -115,  -114,  -285,  -285,
  -285,  -118,  -120,  -285,  -155,  -156,  -285,  -260,  -285,  -176,
  -285,  -252,  -255,  -285,   -30,  -125,  -127,  -129,   -27,  -285,
  -188,  -285,  -285,  -200,  -107,  -110,  -285,  -113,  -285,  -284,
  -147,  -148,  -285,  -285,  -164,  -177,   -24,   -31,  -153,  -150,
  -203,  -285,  -112,  -285,  -117,  -285,  -122,  -123,  -149,  -163,
  -262,  -111,  -116,  -121,   -32 ]

racc_goto_table = [
     2,   124,   136,   138,   139,   266,   140,   146,   161,   163,
   259,   206,   186,   321,   256,   325,   363,   264,   264,   177,
   177,   292,   401,   142,   283,   393,    85,   133,   429,   120,
   121,   337,   269,   141,   173,   180,   150,   152,   153,   263,
   265,   463,   426,   154,   155,   495,   447,   366,   168,   415,
   398,   443,   392,   402,   439,   175,   175,   175,   383,   382,
   475,   255,   188,   299,   300,   292,   193,   156,   323,   408,
   280,   319,   197,   198,   199,   200,   320,   307,     3,   205,
   236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
   246,   247,   248,   249,   250,   251,   252,   253,   254,   258,
   375,   276,   477,   262,   262,   474,   196,   267,   275,   201,
   202,   203,   204,   317,   453,   456,   318,   459,   316,   452,
   189,   191,   272,   460,   304,   294,   124,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   nil,   nil,   nil,   308,
   nil,   nil,   nil,   nil,   292,   301,   310,   370,   469,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   302,   338,   155,
   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,   367,   nil,
   nil,   nil,   331,   nil,   nil,   161,   163,   nil,   341,   nil,
   328,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   322,   138,   nil,   329,   nil,   nil,   150,   152,   153,
   nil,   nil,   nil,   399,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   154,   155,   124,   nil,   168,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   339,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   462,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   254,   nil,   nil,   nil,   nil,   413,   nil,   379,
   504,   nil,   nil,   292,   410,   161,   163,   nil,   472,   405,
   372,   nil,   374,   409,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   322,   nil,
   441,   377,   427,   258,   nil,   nil,   nil,   nil,   433,   411,
   nil,   nil,   nil,   455,   455,   175,   387,   389,   175,   175,
   nil,   nil,   455,   420,   188,   nil,   nil,   424,   nil,   nil,
   nil,   nil,   nil,   457,   nil,   nil,   nil,   nil,   416,   417,
   418,   419,   466,   nil,   nil,   423,   nil,   455,   nil,   nil,
   nil,   434,   nil,   nil,   nil,   nil,   432,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   267,
   161,   163,   nil,   nil,   nil,   nil,   nil,   430,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   440,   nil,   nil,   258,
   500,   372,   nil,   nil,   nil,   nil,   nil,   258,   496,   464,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   468,   nil,   nil,   nil,   nil,   nil,   471,
   nil,   nil,   nil,   nil,   nil,   nil,   254,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   482,   nil,   nil,   nil,   nil,   nil,   150,
   nil,   nil,   nil,   nil,   423,   nil,   322,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   483,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   267,   nil,   nil,   nil,   491,   nil,   493,   497 ]

racc_goto_check = [
     2,    65,    10,    10,    10,    13,     6,    45,    42,    41,
    22,    11,    93,    83,    58,   100,    14,    57,    57,    87,
    87,    43,    74,     8,    50,    55,     5,    68,    71,     9,
     9,    59,    66,     6,    84,    84,    10,    10,    10,    61,
    61,    12,    16,    65,    65,    56,    53,    70,    65,    62,
    73,    52,    54,    76,    77,     6,     6,     6,    78,    80,
    51,    21,     6,    66,    66,    43,    10,    68,    50,    86,
    49,    89,     6,     6,     6,     6,    90,    66,     3,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    83,    45,    53,    10,    10,    52,     5,    10,    15,     9,
     9,     9,     9,    94,    67,    67,    95,    74,    97,    55,
    98,    99,    65,    67,    15,     8,    65,     1,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,    43,    65,    15,    50,    67,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,    58,    65,
   nil,    65,   nil,   nil,   nil,   nil,   nil,   nil,    57,   nil,
   nil,   nil,    15,   nil,   nil,    42,    41,   nil,    11,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,    10,   nil,     2,   nil,   nil,    10,    10,    10,
   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    65,    65,    65,   nil,    65,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   100,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,    11,   nil,    15,
    14,   nil,   nil,    43,    93,    42,    41,   nil,    83,    87,
     6,   nil,    10,    87,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
    22,     2,    11,    10,   nil,   nil,   nil,   nil,    11,    15,
   nil,   nil,   nil,    57,    57,     6,     2,     2,     6,     6,
   nil,   nil,    57,    15,     6,   nil,   nil,    15,   nil,   nil,
   nil,   nil,   nil,    11,   nil,   nil,   nil,   nil,    10,    10,
    10,    10,    58,   nil,   nil,    10,   nil,    57,   nil,   nil,
   nil,    45,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
    42,    41,   nil,   nil,   nil,   nil,   nil,    65,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,
    13,     6,   nil,   nil,   nil,   nil,   nil,    10,    57,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,    10,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   127,     0,    78,   nil,    22,   -14,   nil,   -24,    19,
   -15,   -83,  -372,  -117,  -250,   -34,  -322,   nil,   nil,   nil,
   nil,   -52,  -104,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -49,   -50,  -127,   nil,   -42,   nil,   nil,   nil,   -77,
  -124,  -384,  -337,  -344,  -246,  -273,  -434,  -101,   -99,  -226,
   nil,   -79,  -283,   nil,   nil,   -11,   -91,  -280,    11,   nil,
  -222,  -340,   nil,  -254,  -283,   nil,  -253,  -326,  -233,   nil,
  -231,   nil,   nil,  -178,   -35,   nil,  -243,   -50,   nil,  -119,
  -114,   nil,   nil,   -64,   -74,   -71,   nil,   -69,    42,    42,
  -178 ]

racc_goto_default = [
   nil,   nil,   454,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   268,    13,    14,    15,
    16,   nil,   391,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    47,   nil,    49,    50,   147,   nil,
   nil,   151,   nil,   nil,   nil,   nil,   nil,   270,   nil,   nil,
   117,   nil,   215,   221,   216,    56,   nil,   nil,   nil,   123,
   nil,   nil,   158,   nil,   159,   160,   164,   284,   285,   286,
   287,   288,   291,   nil,   nil,   182,   184,   185,   176,    72,
    73,    74,    76,   nil,   nil,   nil,   187,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 100, :_reduce_1,
  1, 100, :_reduce_2,
  0, 100, :_reduce_3,
  1, 101, :_reduce_4,
  1, 103, :_reduce_5,
  3, 103, :_reduce_6,
  2, 103, :_reduce_7,
  1, 104, :_reduce_8,
  3, 104, :_reduce_9,
  1, 105, :_reduce_none,
  3, 105, :_reduce_11,
  3, 105, :_reduce_12,
  3, 105, :_reduce_13,
  1, 107, :_reduce_14,
  3, 107, :_reduce_15,
  1, 106, :_reduce_none,
  3, 106, :_reduce_17,
  3, 106, :_reduce_18,
  3, 106, :_reduce_19,
  3, 106, :_reduce_20,
  1, 108, :_reduce_none,
  2, 108, :_reduce_22,
  2, 108, :_reduce_23,
  7, 108, :_reduce_24,
  5, 108, :_reduce_25,
  5, 108, :_reduce_26,
  4, 115, :_reduce_27,
  1, 112, :_reduce_28,
  3, 112, :_reduce_29,
  1, 111, :_reduce_30,
  2, 111, :_reduce_31,
  4, 111, :_reduce_32,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_37,
  3, 109, :_reduce_38,
  3, 109, :_reduce_39,
  3, 109, :_reduce_40,
  3, 109, :_reduce_41,
  3, 109, :_reduce_42,
  3, 109, :_reduce_43,
  3, 109, :_reduce_44,
  3, 109, :_reduce_45,
  3, 109, :_reduce_46,
  2, 109, :_reduce_47,
  2, 109, :_reduce_48,
  3, 109, :_reduce_49,
  3, 109, :_reduce_50,
  3, 109, :_reduce_51,
  3, 109, :_reduce_52,
  3, 109, :_reduce_53,
  3, 109, :_reduce_54,
  2, 109, :_reduce_55,
  3, 109, :_reduce_56,
  3, 109, :_reduce_57,
  3, 109, :_reduce_58,
  3, 109, :_reduce_59,
  5, 119, :_reduce_60,
  1, 121, :_reduce_61,
  3, 121, :_reduce_62,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 116, :_reduce_84,
  1, 116, :_reduce_85,
  1, 116, :_reduce_86,
  1, 116, :_reduce_87,
  1, 116, :_reduce_88,
  4, 118, :_reduce_89,
  2, 118, :_reduce_90,
  5, 118, :_reduce_91,
  3, 118, :_reduce_92,
  2, 143, :_reduce_93,
  2, 143, :_reduce_94,
  1, 123, :_reduce_95,
  2, 123, :_reduce_96,
  4, 145, :_reduce_97,
  3, 145, :_reduce_98,
  1, 145, :_reduce_99,
  3, 146, :_reduce_100,
  2, 144, :_reduce_101,
  3, 148, :_reduce_102,
  2, 148, :_reduce_103,
  2, 147, :_reduce_104,
  4, 147, :_reduce_105,
  2, 126, :_reduce_106,
  5, 150, :_reduce_107,
  4, 150, :_reduce_108,
  0, 151, :_reduce_none,
  2, 151, :_reduce_110,
  4, 151, :_reduce_111,
  3, 151, :_reduce_112,
  6, 127, :_reduce_113,
  5, 127, :_reduce_114,
  0, 152, :_reduce_none,
  4, 152, :_reduce_116,
  3, 152, :_reduce_117,
  5, 125, :_reduce_118,
  1, 153, :_reduce_119,
  2, 153, :_reduce_120,
  5, 154, :_reduce_121,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 120, :_reduce_none,
  4, 120, :_reduce_125,
  1, 158, :_reduce_126,
  3, 158, :_reduce_127,
  3, 157, :_reduce_128,
  6, 124, :_reduce_129,
  2, 124, :_reduce_130,
  3, 159, :_reduce_131,
  3, 159, :_reduce_132,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 110, :_reduce_135,
  1, 110, :_reduce_136,
  3, 110, :_reduce_137,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_144,
  3, 161, :_reduce_145,
  3, 161, :_reduce_146,
  6, 128, :_reduce_147,
  6, 129, :_reduce_148,
  7, 117, :_reduce_149,
  7, 117, :_reduce_150,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  7, 130, :_reduce_153,
  1, 168, :_reduce_154,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_158,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  4, 132, :_reduce_161,
  3, 132, :_reduce_162,
  7, 131, :_reduce_163,
  6, 131, :_reduce_164,
  1, 171, :_reduce_165,
  3, 171, :_reduce_166,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_169,
  1, 173, :_reduce_none,
  1, 174, :_reduce_171,
  3, 174, :_reduce_172,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_176,
  6, 134, :_reduce_177,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_185,
  1, 165, :_reduce_186,
  2, 165, :_reduce_187,
  4, 165, :_reduce_188,
  1, 149, :_reduce_189,
  3, 149, :_reduce_190,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 179, :_reduce_195,
  1, 179, :_reduce_196,
  2, 180, :_reduce_197,
  2, 178, :_reduce_198,
  1, 181, :_reduce_199,
  4, 181, :_reduce_200,
  4, 135, :_reduce_201,
  5, 136, :_reduce_202,
  7, 136, :_reduce_203,
  1, 122, :_reduce_204,
  1, 137, :_reduce_205,
  1, 137, :_reduce_206,
  1, 137, :_reduce_207,
  1, 137, :_reduce_208,
  1, 137, :_reduce_209,
  1, 137, :_reduce_210,
  4, 138, :_reduce_211,
  2, 138, :_reduce_212,
  4, 138, :_reduce_213,
  2, 138, :_reduce_214,
  3, 139, :_reduce_215,
  4, 139, :_reduce_216,
  2, 139, :_reduce_217,
  1, 184, :_reduce_218,
  3, 184, :_reduce_219,
  3, 185, :_reduce_220,
  1, 186, :_reduce_none,
  1, 186, :_reduce_222,
  1, 183, :_reduce_223,
  3, 183, :_reduce_224,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 188, :_reduce_234,
  1, 188, :_reduce_235,
  2, 189, :_reduce_236,
  1, 191, :_reduce_237,
  1, 193, :_reduce_238,
  1, 194, :_reduce_239,
  2, 192, :_reduce_240,
  1, 195, :_reduce_241,
  1, 196, :_reduce_242,
  2, 196, :_reduce_243,
  2, 190, :_reduce_244,
  2, 197, :_reduce_245,
  2, 197, :_reduce_246,
  3, 102, :_reduce_247,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 198, :_reduce_250,
  2, 198, :_reduce_251,
  4, 198, :_reduce_252,
  1, 133, :_reduce_253,
  3, 133, :_reduce_254,
  5, 133, :_reduce_255,
  1, 199, :_reduce_none,
  1, 199, :_reduce_none,
  1, 142, :_reduce_258,
  1, 140, :_reduce_259,
  0, 114, :_reduce_none,
  1, 114, :_reduce_261,
  0, 113, :_reduce_none,
  1, 113, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  0, 156, :_reduce_284 ]

racc_reduce_n = 285

racc_shift_n = 505

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :TYPE => 83,
  :PRIVATE => 84,
  :ATTR => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :SITE_R => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :SITE => 93,
  :LOW => 94,
  :HIGH => 95,
  :LISTSTART => 96,
  :SPLAT => 97,
  :MODULO => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "SITE_R",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_60(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_61(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_84(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_85(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_86(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_87(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_88(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_89(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_90(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_93(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_94(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_96(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_97(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_98(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_100(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_101(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_102(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_103(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_104(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_105(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_106(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_107(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_108(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_110(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_111(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_112(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_113(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_114(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_116(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_117(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_118(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_120(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_121(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_125(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_126(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_127(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_128(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_129(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_130(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_131(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_132(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_135(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_136(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_137(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_144(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_145(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_146(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 511)
  def _reduce_148(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_149(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_150(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 541)
  def _reduce_153(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_154(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_161(val, _values, result)
        result = add_definition(Factory.SITE(val[2]))
    loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_162(val, _values, result)
        result = add_definition(Factory.SITE(nil))
    loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_163(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_164(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_165(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_169(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_171(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_172(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_176(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_177(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_185(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_186(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_187(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_188(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_189(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_190(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_195(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_196(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_197(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_198(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_199(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_200(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_201(val, _values, result)
          result = add_definition(Factory.TYPE_ALIAS(val[1][:value], val[3]))
      loc(result, val[0], val[3])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_202(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], nil, val[3]))
        loc(result, val[0], val[4])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_203(val, _values, result)
            result = add_definition(Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5]))
        loc(result, val[0], val[6])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_204(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_205(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_206(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_207(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_208(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_209(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_210(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_211(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 723)
  def _reduce_212(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_213(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_214(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 728)
  def _reduce_215(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_216(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_217(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_218(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_219(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_220(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 741)
  def _reduce_222(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_223(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 745)
  def _reduce_224(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 762)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 763)
  def _reduce_235(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 765)
  def _reduce_236(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 766)
  def _reduce_237(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 767)
  def _reduce_238(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 768)
  def _reduce_239(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_240(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 770)
  def _reduce_241(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 773)
  def _reduce_242(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_243(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_244(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 780)
  def _reduce_245(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_246(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_247(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 248 omitted

# reduce 249 omitted

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_250(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_251(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_252(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_253(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_254(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_255(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 256 omitted

# reduce 257 omitted

module_eval(<<'.,.,', 'egrammar.ra', 804)
  def _reduce_258(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 807)
  def _reduce_259(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 260 omitted

module_eval(<<'.,.,', 'egrammar.ra', 813)
  def _reduce_261(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 262 omitted

# reduce 263 omitted

# reduce 264 omitted

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_284(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
