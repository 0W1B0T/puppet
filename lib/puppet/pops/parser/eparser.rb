#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 705)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'71,247,209,222,53,55,316,113,315,90,91,87,82,94,242,98,284,93,-208,-199',
'83,85,84,86,-129,209,-127,224,237,53,55,117,232,231,117,116,321,206',
'116,97,237,57,248,89,88,53,55,75,76,78,77,80,81,270,73,74,53,55,117',
'-208,-199,72,116,71,62,-129,126,-127,238,124,79,92,90,91,87,82,94,117',
'98,344,93,116,57,83,85,84,86,283,117,62,53,55,116,126,227,330,124,117',
'236,226,299,116,97,237,244,62,89,88,301,205,75,76,78,77,80,81,62,73',
'74,53,55,316,229,315,72,230,71,126,303,290,124,219,66,79,92,90,91,87',
'82,94,246,98,269,93,308,71,83,85,84,86,62,71,67,69,68,70,126,309,94',
'124,98,310,93,209,94,97,98,196,93,89,88,313,286,75,76,78,77,80,81,62',
'73,74,317,319,97,268,172,72,244,71,97,246,326,327,106,268,79,92,90,91',
'87,82,94,71,98,262,93,261,66,83,85,84,86,137,260,337,94,246,98,246,93',
'118,244,340,106,107,225,106,97,219,319,346,89,88,347,348,75,76,78,77',
'80,81,97,73,74,349,103,351,352,353,72,287,71,66,63,360,361,362,363,79',
'92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,',
',75,76,78,77,80,81,,73,74,,,,,,72,,71,,95,,,,,79,92,90,91,87,82,94,',
'98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81',
',73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86',
',,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,',
',,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,',
'89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,228,,79,92,90,91,87',
'82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77',
'80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85',
'84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72',
',71,,215,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,',
',,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90',
'91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76',
'78,77,80,81,,73,74,,,,,,72,,71,,214,,,,,79,92,90,91,87,82,94,,98,,93',
',,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74',
',,,,,72,,71,,213,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,',
',,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,212,',
',,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89',
'88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94',
',98,,93,,201,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80',
'81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84',
'86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71',
',,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,',
',,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87',
'82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77',
'80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85',
'84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72',
',71,,,,,,,79,92,90,91,87,82,94,71,98,,93,,71,83,85,84,86,,,,94,,98,',
'93,94,,98,,93,,,97,,,,89,88,,,75,76,78,77,80,81,97,73,74,53,55,97,,49',
'72,50,,,,,,73,74,79,92,,73,74,72,,,13,,72,,,,174,191,185,192,48,186',
'194,187,183,181,,176,189,,,,,58,12,195,190,188,53,55,11,,49,,50,,,,62',
',,,71,193,175,,,,56,,13,,,,,94,39,98,46,93,48,100,,47,61,57,,41,60,',
',,,58,12,,,59,53,55,11,97,49,129,50,,,,62,,,78,77,,40,,73,74,56,,13',
',,72,,,39,,46,,48,100,79,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,',
'58,12,53,55,59,71,49,11,50,,,,,,,62,,,94,,98,40,93,,13,56,,,,,39,,46',
',48,100,,47,61,57,,41,60,,97,,,58,12,53,55,59,,49,11,50,,,,73,74,,62',
',,,72,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57',
',41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,',
',39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,',
',,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47',
'61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,336,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43',
',47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,',
',,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39',
',46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,',
',,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,',
'40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,',
'49,,50,322,,,62,,,,,,40,,,171,56,,13,,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,174',
'191,185,192,48,186,194,187,183,181,,176,189,,,,,58,12,195,190,188,53',
'55,11,,49,,50,,,,62,,,,,193,175,,,,56,,13,,,,,,39,,46,,48,100,,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,',
'39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62',
',,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55',
'59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,',
'46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94,39,98,46,93,48,100,,47,61',
'57,,41,60,,,,,58,12,,,59,53,55,11,97,49,,50,,,,62,,,78,77,,40,,73,74',
'56,,13,203,,72,,,39,,46,,48,100,79,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94,39',
'98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,97,49,,50,',
',,62,75,76,78,77,,40,,73,74,56,,13,211,,72,,,39,,46,,48,100,79,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,',
'39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62',
',,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55',
'59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,',
'46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,294,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94,39',
'98,46,93,48,43,,47,61,57,,41,60,44,45,,,58,12,,,59,53,55,11,97,49,292',
'50,,,,62,75,76,78,77,,40,,73,74,56,,13,,,72,,,39,,46,,48,100,79,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,',
'39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,132,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39',
',46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,274,,,,,,62',
',,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53',
'55,59,,49,11,50,272,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61',
'57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,266,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,71,41,60,,,,,58,12,,,59,,94,11,98,,93',
',,,,62,,,71,,,40,,,,56,,,,,,94,97,98,,93,,,,,75,76,78,77,80,81,,73,74',
',,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74,71,,,,,72,,,,,,,82,94',
'79,98,,93,,,83,,,,,71,,,,,,,,,,,,82,94,97,98,,93,,,83,,75,76,78,77,80',
'81,,73,74,,,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74,71,,,,,72,',
',,,,,82,94,79,98,,93,,,83,,,,,71,,,,,,,,,,,,82,94,97,98,,93,,,83,,75',
'76,78,77,80,81,,73,74,,,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74',
'71,,,,,72,,,,,,87,82,94,79,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,',
',,,71,,75,76,78,77,80,81,,73,74,87,82,94,,98,72,93,,,83,85,84,86,,79',
',,,,,,,,,,53,55,,97,49,,50,355,88,,,75,76,78,77,80,81,,73,74,,,13,,',
'72,,,39,,46,,48,43,79,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11',
'50,357,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44',
'45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'43,,47,61,57,64,41,60,44,45,,,58,12,53,55,59,,49,11,50,359,,,,,,62,',
',,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55',
'59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,',
'46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62',
',,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,,,59,',
',11,,,,256,191,255,192,62,253,194,257,251,250,40,252,254,,56,,,,,195',
'190,258,256,191,255,192,,253,194,257,251,250,,252,254,,,193,259,,,195',
'190,258,256,191,255,192,,253,194,257,251,250,,252,254,,,193,259,,,195',
'190,258,,,,,,,,,,,,,,,,193,259' ]
        racc_action_table = arr = ::Array.new(5222, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'173,184,106,120,74,74,272,43,272,173,173,173,173,173,173,173,219,173',
'188,189,173,173,173,173,183,219,181,120,275,222,222,186,136,136,43,186',
'275,106,43,173,210,74,184,173,173,73,73,173,173,173,173,173,173,210',
'173,173,187,187,185,188,189,173,185,168,74,183,222,181,168,222,173,173',
'168,168,168,168,168,100,168,316,168,100,73,168,168,168,168,217,283,222',
'47,47,283,187,128,283,187,46,144,128,239,46,168,144,216,73,168,168,243',
'105,168,168,168,168,168,168,187,168,168,224,224,313,131,313,168,131',
'167,47,245,225,47,119,138,168,168,167,167,167,167,167,249,167,209,167',
'263,145,167,167,167,167,47,101,7,7,7,7,224,265,145,224,145,267,145,268',
'101,167,101,96,101,167,167,271,220,167,167,167,167,167,167,224,167,167',
'273,274,145,207,94,167,278,166,101,279,280,281,203,285,167,167,166,166',
'166,166,166,99,166,202,166,200,65,166,166,166,166,63,198,298,99,178',
'99,300,99,44,177,307,308,38,122,37,166,114,317,319,166,166,320,324,166',
'166,166,166,166,166,99,166,166,325,36,331,332,335,166,221,165,5,1,350',
'354,356,358,166,166,165,165,165,165,165,,165,,165,,,165,165,165,165',
',,,,,,,,,,,,,,,165,,,,165,165,,,165,165,165,165,165,165,,165,165,,,',
',,165,,10,,10,,,,,165,165,10,10,10,10,10,,10,,10,,,10,10,10,10,,,,,',
',,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,,10,10,,,,,,10,,197,,,,,,',
'10,10,197,197,197,197,197,,197,,197,,,197,197,197,197,,,,,,,,,,,,,,',
',197,,,,197,197,,,197,197,197,197,197,197,,197,197,,,,,,197,,134,,,',
',,,197,197,134,134,134,134,134,,134,,134,,,134,134,134,134,,,,,,,,,',
',,,,,,134,,,,134,134,,,134,134,134,134,134,134,,134,134,,,,,,134,,130',
',,,,130,,134,134,130,130,130,130,130,,130,,130,,,130,130,130,130,,,',
',,,,,,,,,,,,130,,,,130,130,,,130,130,130,130,130,130,,130,130,,,,,,130',
',127,,,,,,,130,130,127,127,127,127,127,,127,,127,,,127,127,127,127,',
',,,,,,,,,,,,,,127,,,,127,127,,,127,127,127,127,127,127,,127,127,,,,',
',127,,112,,112,,,,,127,127,112,112,112,112,112,,112,,112,,,112,112,112',
'112,,,,,,,,,,,,,,,,112,,,,112,112,,,112,112,112,112,112,112,,112,112',
',,,,,112,,312,,,,,,,112,112,312,312,312,312,312,,312,,312,,,312,312',
'312,312,,,,,,,,,,,,,,,,312,,,,312,312,,,312,312,312,312,312,312,,312',
'312,,,,,,312,,111,,111,,,,,312,312,111,111,111,111,111,,111,,111,,,111',
'111,111,111,,,,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111,111,111',
',111,111,,,,,,111,,110,,110,,,,,111,111,110,110,110,110,110,,110,,110',
',,110,110,110,110,,,,,,,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110',
'110,,110,110,,,,,,110,,108,,108,,,,,110,110,108,108,108,108,108,,108',
',108,,,108,108,108,108,,,,,,,,,,,,,,,,108,,,,108,108,,,108,108,108,108',
'108,108,,108,108,,,,,,108,,102,,,,,,,108,108,102,102,102,102,102,,102',
',102,,102,102,102,102,102,,,,,,,,,,,,,,,,102,,,,102,102,,,102,102,102',
'102,102,102,,102,102,,,,,,102,,306,,,,,,,102,102,306,306,306,306,306',
',306,,306,,,306,306,306,306,,,,,,,,,,,,,,,,306,,,,306,306,,,306,306',
'306,306,306,306,,306,306,,,,,,306,,305,,,,,,,306,306,305,305,305,305',
'305,,305,,305,,,305,305,305,305,,,,,,,,,,,,,,,,305,,,,305,305,,,305',
'305,305,305,305,305,,305,305,,,,,,305,,291,,,,,,,305,305,291,291,291',
'291,291,,291,,291,,,291,291,291,291,,,,,,,,,,,,,,,,291,,,,291,291,,',
'291,291,291,291,291,291,,291,291,,,,,,291,,297,,,,,,,291,291,297,297',
'297,297,297,,297,,297,,,297,297,297,297,,,,,,,,,,,,,,,,297,,,,297,297',
',,297,297,297,297,297,297,,297,297,,,,,,297,,293,,,,,,,297,297,293,293',
'293,293,293,154,293,,293,,153,293,293,293,293,,,,154,,154,,154,153,',
'153,,153,,,293,,,,293,293,,,293,293,293,293,293,293,154,293,293,215',
'215,153,,215,293,215,,,,,,154,154,293,293,,153,153,154,,,215,,153,,',
',215,215,215,215,215,215,215,215,215,215,,215,215,,,,,215,215,215,215',
'215,54,54,215,,54,,54,,,,215,,,,150,215,215,,,,215,,54,,,,,150,54,150',
'54,150,54,54,,54,54,54,,54,54,,,,,54,54,,,54,49,49,54,150,49,49,49,',
',,54,,,150,150,,54,,150,150,54,,49,,,150,,,49,,49,,49,49,150,49,49,49',
',49,49,,,,,49,49,64,64,49,,64,49,64,,,,,,,49,,,,,,49,,,64,49,,,,,64',
',64,,64,64,,64,64,64,,64,64,64,64,,,64,64,299,299,64,152,299,64,299',
',,,,,,64,,,152,,152,64,152,,299,64,,,,,299,,299,,299,299,,299,299,299',
',299,299,,152,,,299,299,66,66,299,,66,299,66,,,,152,152,,299,,,,152',
',299,,,66,299,,,,,66,,66,,66,66,,66,66,66,,66,66,66,66,,,66,66,67,67',
'66,,67,66,67,,,,,,,66,,,,,,66,,,67,66,,,,,67,,67,,67,67,,67,67,67,,67',
'67,67,67,,,67,67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,,,68,67,,,,,68',
',68,,68,68,,68,68,68,,68,68,68,68,,,68,68,69,69,68,,69,68,69,,,,,,,68',
',,,,,68,,,69,68,,,,,69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,70',
'70,69,,70,69,70,,,,,,,69,,,,,,69,,,70,69,,,,,70,,70,,70,70,,70,70,70',
',70,70,70,70,,,70,70,71,71,70,,71,70,71,,,,,,,70,,,,,,70,,,71,70,,,',
',71,,71,,71,71,,71,71,71,,71,71,,,,,71,71,72,72,71,,72,71,72,,,,,,,71',
',,,,,71,,,72,71,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,,72,72,287,287',
'72,,287,72,287,287,,,,,,72,,,,,,72,,,287,72,,,,,287,,287,,287,287,,287',
'287,287,,287,287,287,287,,,287,287,286,286,287,,286,287,286,,,,,,,287',
',,,,,287,,,286,287,,,,,286,,286,,286,286,,286,286,286,,286,286,286,286',
',,286,286,75,75,286,,75,286,75,,,,,,,286,,,,,,286,,,75,286,,,,,75,,75',
',75,75,,75,75,75,,75,75,,,,,75,75,76,76,75,,76,75,76,,,,,,,75,,,,,,75',
',,76,75,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,,76,76,77,77,76,,77,76',
'77,,,,,,,76,,,,,,76,,,77,76,,,,,77,,77,,77,77,,77,77,77,,77,77,,,,,77',
'77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,77,,,,,78,,78,,78,78,,78',
'78,78,,78,78,,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,,,,,78,,,79,78,',
',,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,80,80,79,,80,79,80,,,,,',
',79,,,,,,79,,,80,79,,,,,80,,80,,80,80,,80,80,80,,80,80,,,,,80,80,81',
'81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,80,,,,,81,,81,,81,81,,81,81,81',
',81,81,,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,,82,81,,,,,82',
',82,,82,82,,82,82,82,,82,82,,,,,82,82,83,83,82,,83,82,83,,,,,,,82,,',
',,,82,,,83,82,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,84,84,83',
',84,83,84,,,,,,,83,,,,,,83,,,84,83,,,,,84,,84,,84,84,,84,84,84,,84,84',
',,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,84,,,,,85,,85,,85',
'85,,85,85,85,,85,85,,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85,,',
'86,85,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,87,87,86,,87,86,87',
',,,,,,86,,,,,,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
'88,88,87,,88,87,88,,,,,,,87,,,,,,87,,,88,87,,,,,88,,88,,88,88,,88,88',
'88,,88,88,,,,,88,88,89,89,88,,89,88,89,,,,,,,88,,,,,,88,,,89,88,,,,',
'89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,90,90,89,,90,89,90,,,,,,,89',
',,,,,89,,,90,89,,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,91,91,90',
',91,90,91,,,,,,,90,,,,,,90,,,91,90,,,,,91,,91,,91,91,,91,91,91,,91,91',
',,,,91,91,92,92,91,,92,91,92,,,,,,,91,,,,,,91,,,92,91,,,,,92,,92,,92',
'92,,92,92,92,,92,92,,,,,92,92,93,93,92,,93,92,93,,,,,,,92,,,,,,92,,',
'93,92,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,276,276,93,',
'276,,276,276,,,93,,,,,,93,,,93,93,,276,,,,,,276,,276,,276,276,,276,276',
'276,,276,276,,,,,276,276,95,95,276,,95,276,95,,,,,,,276,,,,,,276,,,95',
'276,,,,,95,95,95,95,95,95,95,95,95,95,,95,95,,,,,95,95,95,95,95,269',
'269,95,,269,,269,,,,95,,,,,95,95,,,,95,,269,,,,,,269,,269,,269,269,',
'269,269,269,,269,269,,,,,269,269,97,97,269,,97,269,97,,,,,,,269,,,,',
',269,,,97,269,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,98,98,97',
',98,97,98,,,,,,,97,,,,,,97,,,98,97,,,,,98,,98,,98,98,,98,98,98,,98,98',
',,,,98,98,262,262,98,,262,98,262,,,,,,,98,,,,,,98,,,262,98,,,,,262,',
'262,,262,262,,262,262,262,,262,262,,,,,262,262,248,248,262,,248,262',
'248,,,,,,,262,,,,,,262,,,248,262,,,,,248,,248,,248,248,,248,248,248',
',248,248,,,,,248,248,174,174,248,,174,248,174,,,,,,,248,,,,,,248,,,174',
'248,,,,,174,,174,,174,174,,174,174,174,,174,174,,,,,174,174,42,42,174',
',42,174,42,,,,,,,174,151,,,,,174,,,42,174,,,,151,42,151,42,151,42,42',
',42,42,42,,42,42,,,,,42,42,,,42,103,103,42,151,103,,103,,,,42,,,151',
'151,,42,,151,151,42,,103,103,,151,,,103,,103,,103,103,151,103,103,103',
',103,103,,,,,103,103,244,244,103,,244,103,244,,,,,,,103,,,,,,103,,,244',
'103,,,,,244,,244,,244,244,,244,244,244,,244,244,,,,,244,244,238,238',
'244,,238,244,238,,,,,,,244,155,,,,,244,,,238,244,,,,155,238,155,238',
'155,238,238,,238,238,238,,238,238,,,,,238,238,,,238,107,107,238,155',
'107,,107,,,,238,155,155,155,155,,238,,155,155,238,,107,107,,155,,,107',
',107,,107,107,155,107,107,107,,107,107,,,,,107,107,41,41,107,,41,107',
'41,,,,,,,107,,,,,,107,,,41,107,,,,,41,,41,,41,41,,41,41,41,,41,41,,',
',,41,41,40,40,41,,40,41,40,,,,,,,41,,,,,,41,,,40,41,,,,,40,,40,,40,40',
',40,40,40,,40,40,,,,,40,40,39,39,40,,39,40,39,,,,,,,40,,,,,,40,,,39',
'40,,,,,39,,39,,39,39,,39,39,39,,39,39,,,,,39,39,315,315,39,,315,39,315',
',,,,,,39,,,,,,39,,,315,39,,,,,315,,315,,315,315,,315,315,315,,315,315',
',,,,315,315,113,113,315,,113,315,113,,,,,,,315,,,,,,315,,,113,315,,',
',,113,,113,,113,113,,113,113,113,,113,113,,,,,113,113,237,237,113,,237',
'113,237,,,,,,,113,,,,,,113,,,237,113,,,,,237,,237,,237,237,,237,237',
'237,,237,237,,,,,237,237,235,235,237,,235,237,235,,,,,,,237,,,,,,237',
',,235,237,,,,,235,,235,,235,235,,235,235,235,,235,235,,,,,235,235,230',
'230,235,,230,235,230,230,,,,,,235,,,,,,235,,,230,235,,,,,230,,230,,230',
'230,,230,230,230,,230,230,,,,,230,230,228,228,230,,228,230,228,,,,,',
',230,,,,,,230,,,228,230,,,,,228,,228,,228,228,,228,228,228,,228,228',
',,,,228,228,327,327,228,,327,228,327,,,,,,,228,156,,,,,228,,,327,228',
',,,156,327,156,327,156,327,327,,327,327,327,,327,327,327,327,,,327,327',
',,327,226,226,327,156,226,226,226,,,,327,156,156,156,156,,327,,156,156',
'327,,226,,,156,,,226,,226,,226,226,156,226,226,226,,226,226,,,,,226',
'226,13,13,226,,13,226,13,,,,,,,226,,,,,,226,,,13,226,,,,,13,,13,,13',
'13,,13,13,13,,13,13,,,,,13,13,50,50,13,,50,13,50,50,,,,,,13,,,,,,13',
',,50,13,,,,,50,,50,,50,50,,50,50,50,,50,50,,,,,50,50,12,12,50,,12,50',
'12,,,,,,,50,,,,,,50,,,12,50,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12',
'12,214,214,12,,214,12,214,,,,,,,12,,,,,,12,,,214,12,,,,,214,,214,,214',
'214,,214,214,214,,214,214,,,,,214,214,213,213,214,,213,214,213,213,',
',,,,214,,,,,,214,,,213,214,,,,,213,,213,,213,213,,213,213,213,,213,213',
'213,213,,,213,213,212,212,213,,212,213,212,212,,,,,,213,,,,,,213,,,212',
'213,,,,,212,,212,,212,212,,212,212,212,,212,212,212,212,,,212,212,205',
'205,212,,205,212,205,205,,,,,,212,,,,,,212,,,205,212,,,,,205,,205,,205',
'205,,205,205,205,,205,205,205,205,,,205,205,11,11,205,,11,205,11,,,',
',,,205,,,,,,205,,,11,205,,,,,11,,11,,11,11,,11,11,11,,11,11,,,,,11,11',
'176,176,11,,176,11,176,,,,,,,11,,,,,,11,,,176,11,,,,,176,,176,,176,176',
',176,176,176,,176,176,,,,,176,176,175,175,176,,175,176,175,,,,,,,176',
',,,,,176,,,175,176,,,,,175,,175,,175,175,,175,175,175,157,175,175,,',
',,175,175,,,175,,157,175,157,,157,,,,,175,,,158,,,175,,,,175,,,,,,158',
'157,158,,158,,,,,157,157,157,157,157,157,,157,157,,,,,,157,,,158,,,',
',,157,,158,158,158,158,158,158,,158,158,159,,,,,158,,,,,,,159,159,158',
'159,,159,,,159,,,,,160,,,,,,,,,,,,160,160,159,160,,160,,,160,,159,159',
'159,159,159,159,,159,159,,,,,,159,,,160,,,,,,159,,160,160,160,160,160',
'160,,160,160,161,,,,,160,,,,,,,161,161,160,161,,161,,,161,,,,,162,,',
',,,,,,,,,162,162,161,162,,162,,,162,,161,161,161,161,161,161,,161,161',
',,,,,161,,,162,,,,,,161,,162,162,162,162,162,162,,162,162,163,,,,,162',
',,,,,163,163,163,162,163,,163,,,163,163,163,163,,,,,,,,,,,,,,,,163,',
',,,,164,,163,163,163,163,163,163,,163,163,164,164,164,,164,163,164,',
',164,164,164,164,,163,,,,,,,,,,,344,344,,164,344,,344,344,164,,,164',
'164,164,164,164,164,,164,164,,,344,,,164,,,344,,344,,344,344,164,344',
'344,344,,344,344,344,344,,,344,344,346,346,344,,346,344,346,346,,,,',
',344,,,,,,344,,,346,344,,,,,346,,346,,346,346,,346,346,346,,346,346',
'346,346,,,346,346,4,4,346,,4,346,4,,,,,,,346,,,,,,346,,,4,346,,,,,4',
',4,,4,4,,4,4,4,4,4,4,4,4,,,4,4,347,347,4,,347,4,347,347,,,,,,4,,,,,',
'4,,,347,4,,,,,347,,347,,347,347,,347,347,347,,347,347,347,347,,,347',
'347,171,171,347,,171,347,171,,,,,,,347,,,,,,347,,,171,347,,,,,171,,171',
',171,171,,171,171,171,,171,171,,,,,171,171,0,0,171,,0,171,0,,,,,,,171',
',,,,,171,,,0,171,,,,,0,,0,,0,0,,0,0,0,,0,0,0,0,,,0,0,247,247,0,,247',
'0,247,,,,,,,0,,,,,,0,,,247,0,,,,,247,,247,,247,247,,247,247,247,,247',
'247,,,,,247,247,,,247,,,247,,,,241,241,241,241,247,241,241,241,241,241',
'247,241,241,,247,,,,,241,241,241,246,246,246,246,,246,246,246,246,246',
',246,246,,,241,241,,,246,246,246,196,196,196,196,,196,196,196,196,196',
',196,196,,,246,246,,,196,196,196,,,,,,,,,,,,,,,,196,196' ]
        racc_action_check = arr = ::Array.new(5222, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  5034,   254,   nil,   nil,  4893,   241,   nil,    89,   nil,   nil,
   309,  4343,  4108,  4014,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   222,   158,   201,  3588,
  3541,  3494,  3253,    -1,   178,   nil,    62,    88,   nil,  1414,
  4061,   nil,   nil,   nil,  1364,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   213,  1461,   196,  1555,  1602,  1649,  1696,
  1743,  1790,  1837,    43,     2,  1978,  2025,  2072,  2119,  2166,
  2213,  2260,  2307,  2354,  2401,  2448,  2495,  2542,  2589,  2636,
  2683,  2730,  2777,  2824,   147,  2921,   159,  3018,  3065,   197,
    42,   145,   939,  3303,   nil,   101,   -32,  3447,   876,   nil,
   813,   750,   624,  3682,   205,   nil,   nil,   nil,   nil,   107,
    -9,   nil,   207,   nil,   nil,   nil,   nil,   561,    87,   nil,
   498,   113,   nil,   nil,   435,   nil,    28,   nil,   120,   nil,
   nil,   nil,   nil,   nil,    91,   139,   nil,   nil,   nil,   nil,
  1374,  3263,  1507,  1273,  1268,  3407,  3927,  4471,  4496,  4552,
  4577,  4633,  4658,  4714,  4759,   246,   183,   120,    57,   nil,
   nil,  4987,   nil,    -6,  3206,  4437,  4390,   182,   205,   nil,
   nil,    15,   nil,    13,   -10,    23,    -4,    54,     7,     8,
   nil,   nil,   nil,   nil,   nil,   nil,  5153,   372,   168,   nil,
   185,   nil,   193,   125,   nil,  4296,   nil,   173,   nil,   127,
    28,   nil,  4249,  4202,  4155,  1314,    64,    51,   nil,    -9,
   164,   243,    27,   nil,   117,    90,  3967,   nil,  3870,   nil,
  3823,   nil,   nil,   nil,   nil,  3776,   nil,  3729,  3397,    88,
   nil,  5109,   nil,    99,  3350,   119,  5131,  5081,  3159,   128,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3112,   119,   nil,   148,   nil,    92,   129,  2971,
   nil,   162,   -25,   173,   152,    16,  2874,   nil,   148,   179,
   183,   185,   nil,    53,   nil,   183,  1931,  1884,   nil,   nil,
   nil,  1128,   nil,  1254,   nil,   nil,   nil,  1191,   206,  1508,
   207,   nil,   nil,   nil,   nil,  1065,  1002,   214,   155,   nil,
   nil,   nil,   687,    90,   nil,  3635,    71,   199,   nil,   223,
   226,   nil,   nil,   nil,   226,   236,   nil,  3917,   nil,   nil,
   nil,   222,   239,   nil,   nil,   240,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  4799,   nil,  4846,  4940,   nil,   nil,
   246,   nil,   nil,   nil,   247,   nil,   248,   nil,   249,   nil,
   nil,   nil,   nil,   nil ]

racc_action_default = [
  -210,  -211,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -105,  -211,  -211,  -211,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -211,
  -211,  -211,  -211,  -211,  -115,  -117,  -211,  -211,  -164,  -211,
  -211,  -174,  -175,  -176,  -211,  -178,  -185,  -186,  -187,  -188,
  -189,  -190,  -191,  -211,  -211,    -6,  -211,  -211,  -211,  -211,
  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,
  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,  -211,
  -211,  -211,  -211,  -211,  -211,  -124,  -119,  -210,  -210,   -27,
  -211,   -34,  -211,  -211,   -72,  -211,  -211,  -211,  -211,   -82,
  -211,  -211,  -211,  -211,  -210,  -134,  -153,  -154,  -116,  -210,
  -210,  -143,  -145,  -146,  -147,  -148,  -149,   -42,  -211,  -167,
  -211,  -211,  -170,  -171,  -182,  -177,  -211,   364,    -5,    -8,
   -11,   -12,   -13,   -14,  -211,   -17,   -18,  -162,  -163,   -19,
   -20,   -21,   -22,   -23,   -24,   -25,   -26,   -28,   -29,   -30,
   -31,   -32,   -33,   -35,   -36,   -37,   -38,   -39,  -211,   -40,
  -100,  -211,   -76,  -211,  -203,  -209,  -197,  -194,  -192,  -113,
  -125,  -186,  -128,  -190,  -211,  -200,  -198,  -206,  -188,  -189,
  -196,  -201,  -202,  -204,  -205,  -207,  -124,  -123,  -211,  -122,
  -211,   -41,  -192,   -67,   -77,  -211,   -80,  -192,  -158,  -161,
  -211,   -74,  -211,  -211,  -211,  -124,  -194,  -210,  -155,  -211,
  -211,  -211,  -211,  -151,  -211,  -211,  -211,  -165,  -211,  -168,
  -211,  -179,  -180,  -181,  -183,  -211,   -16,  -211,  -211,  -192,
  -102,  -124,  -112,  -211,  -195,  -211,  -193,  -211,  -211,  -192,
  -127,  -129,  -197,  -198,  -199,  -200,  -203,  -206,  -208,  -209,
  -120,  -121,  -193,  -211,   -69,  -211,   -79,  -211,  -193,  -211,
   -73,  -211,   -85,  -211,   -91,  -211,  -211,   -95,  -194,  -192,
  -211,  -211,  -137,  -211,  -156,  -192,  -210,  -211,  -144,  -152,
  -150,   -43,  -166,  -173,  -169,  -172,  -184,  -104,  -211,  -193,
  -192,  -108,  -114,  -109,  -126,  -130,  -131,  -211,   -66,   -78,
   -81,  -159,  -160,   -85,   -84,  -211,  -211,   -91,   -90,  -211,
  -211,   -99,   -94,   -96,  -211,  -211,  -110,  -210,  -138,  -139,
  -140,  -211,  -211,  -135,  -136,  -211,  -142,  -101,  -103,  -111,
  -118,   -68,   -83,   -86,  -211,   -89,  -211,  -211,  -106,  -107,
  -211,  -157,  -132,  -141,  -211,   -88,  -211,   -93,  -211,   -98,
  -133,   -87,   -92,   -97 ]

racc_goto_table = [
     2,   119,     3,    99,   101,   102,   104,   135,   170,   133,
   123,   177,   178,   207,   243,   318,   314,   125,   332,   217,
   140,   141,   142,   143,   220,     1,   288,   245,   289,   216,
   277,   108,   110,   111,   112,   302,    65,   198,   200,   128,
   241,   127,   130,   147,   147,   239,   134,   146,   149,   148,
   148,   263,   304,   280,   320,   276,   267,   342,   345,   350,
   343,   144,   281,   127,   145,   328,   221,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   240,   173,   298,   197,
   197,   204,   323,   202,   311,   127,   138,   210,   307,   127,
   131,   169,   139,   234,   235,   173,   233,   nil,   nil,   nil,
   nil,   nil,   nil,   249,   nil,   324,   218,   nil,   nil,   nil,
   nil,   218,   223,   nil,   nil,   nil,   285,   nil,   325,   nil,
   nil,   278,   279,   nil,   331,   nil,   nil,   nil,   nil,   nil,
   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,
   123,   nil,   nil,   nil,   nil,   nil,   nil,   125,   300,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   108,   110,   111,   nil,
   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   nil,   123,   296,   295,
   nil,   nil,   125,   nil,   125,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   265,   127,   173,   nil,   nil,
   nil,   nil,   271,   273,   338,   nil,   nil,   nil,   291,   282,
   293,   nil,   130,   nil,   nil,   nil,   nil,   134,   nil,   291,
   297,   nil,   nil,   nil,   nil,   nil,   173,   nil,   329,   305,
   306,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   291,   nil,   nil,   nil,   nil,   nil,
   nil,   312,   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   341,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   335,   334,   nil,
   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   108,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   334,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   354,   nil,   356,   358 ]

racc_goto_check = [
     2,    63,     3,     9,     9,     9,    38,    79,    50,    75,
    36,    53,    55,    43,    54,    46,    45,    30,    65,    64,
     7,     7,     7,     7,    64,     1,    71,    37,    71,    53,
    48,     9,     9,     9,     9,    56,     5,    59,    59,    11,
    57,     9,     9,    30,    30,    51,     9,    12,    12,    31,
    31,    37,    60,    54,    49,    47,    37,    45,    46,    65,
    44,    11,    67,     9,     9,    68,    70,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,    50,     9,    37,     9,
     9,    42,    48,    11,    73,     9,     5,    11,    37,     9,
    74,    13,     6,    80,    81,     9,    83,   nil,   nil,   nil,
   nil,   nil,   nil,    55,   nil,    54,     3,   nil,   nil,   nil,
   nil,     3,     3,   nil,   nil,   nil,    43,   nil,    37,   nil,
   nil,    53,    55,   nil,    37,   nil,   nil,   nil,   nil,   nil,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    36,   nil,   nil,   nil,   nil,   nil,   nil,    30,    55,   nil,
   nil,   nil,   nil,     9,   nil,   nil,     9,     9,     9,   nil,
   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    36,   nil,    36,    79,    75,
   nil,   nil,    30,   nil,    30,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     9,     9,   nil,   nil,
   nil,   nil,     2,     2,    50,   nil,   nil,   nil,     9,     3,
     9,   nil,     9,   nil,   nil,   nil,   nil,     9,   nil,     9,
     9,   nil,   nil,   nil,   nil,   nil,     9,   nil,    63,     9,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     3,   nil,
   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    25,     0,     2,   nil,    32,    36,   -47,   nil,    -8,
   nil,   -10,   -26,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -30,   -24,   nil,   nil,   nil,   nil,   -37,  -151,   -31,   nil,
   nil,   nil,   -14,   -93,  -255,  -256,  -259,  -159,  -184,  -221,
   -85,  -126,   nil,   -84,  -163,   -83,  -209,  -133,   nil,   -60,
  -194,   nil,   nil,   -45,   -95,  -268,   nil,  -155,  -218,   nil,
   -54,  -196,   nil,  -174,    50,   -41,   nil,   nil,   nil,   -47,
   -33,   -32,   nil,   -30 ]

racc_goto_default = [
   nil,   nil,   333,   199,     4,     5,     6,     7,     8,    10,
     9,   275,   nil,   nil,    14,    36,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,   nil,   nil,    37,
    38,   105,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,   nil,   nil,   nil,   179,   nil,    96,   nil,
   180,   184,   182,   115,   nil,   nil,   114,   nil,   nil,   120,
   nil,   121,   122,   208,   nil,   nil,    51,    52,    54,   nil,
   nil,   nil,   136,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 81, :_reduce_1,
  1, 81, :_reduce_none,
  1, 82, :_reduce_3,
  1, 84, :_reduce_4,
  3, 84, :_reduce_5,
  2, 84, :_reduce_6,
  1, 85, :_reduce_7,
  3, 85, :_reduce_8,
  1, 86, :_reduce_none,
  1, 87, :_reduce_10,
  3, 87, :_reduce_11,
  3, 87, :_reduce_12,
  3, 87, :_reduce_13,
  3, 87, :_reduce_14,
  1, 89, :_reduce_none,
  4, 89, :_reduce_16,
  3, 89, :_reduce_17,
  3, 89, :_reduce_18,
  3, 89, :_reduce_19,
  3, 89, :_reduce_20,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  3, 89, :_reduce_23,
  3, 89, :_reduce_24,
  3, 89, :_reduce_25,
  3, 89, :_reduce_26,
  2, 89, :_reduce_27,
  3, 89, :_reduce_28,
  3, 89, :_reduce_29,
  3, 89, :_reduce_30,
  3, 89, :_reduce_31,
  3, 89, :_reduce_32,
  3, 89, :_reduce_33,
  2, 89, :_reduce_34,
  3, 89, :_reduce_35,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  3, 89, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  1, 91, :_reduce_42,
  3, 91, :_reduce_43,
  1, 90, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 111, :_reduce_64,
  1, 111, :_reduce_65,
  5, 94, :_reduce_66,
  3, 94, :_reduce_67,
  6, 94, :_reduce_68,
  4, 94, :_reduce_69,
  1, 94, :_reduce_70,
  1, 98, :_reduce_71,
  2, 98, :_reduce_72,
  4, 119, :_reduce_73,
  3, 119, :_reduce_74,
  1, 119, :_reduce_75,
  3, 120, :_reduce_76,
  2, 118, :_reduce_77,
  3, 122, :_reduce_78,
  2, 122, :_reduce_79,
  2, 121, :_reduce_80,
  4, 121, :_reduce_81,
  2, 101, :_reduce_82,
  5, 124, :_reduce_83,
  4, 124, :_reduce_84,
  0, 125, :_reduce_none,
  2, 125, :_reduce_86,
  4, 125, :_reduce_87,
  3, 125, :_reduce_88,
  6, 102, :_reduce_89,
  5, 102, :_reduce_90,
  0, 126, :_reduce_none,
  4, 126, :_reduce_92,
  3, 126, :_reduce_93,
  5, 100, :_reduce_94,
  1, 127, :_reduce_95,
  2, 127, :_reduce_96,
  5, 128, :_reduce_97,
  4, 128, :_reduce_98,
  1, 129, :_reduce_99,
  1, 93, :_reduce_none,
  4, 93, :_reduce_101,
  1, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 130, :_reduce_104,
  1, 88, :_reduce_105,
  6, 88, :_reduce_106,
  6, 88, :_reduce_107,
  5, 88, :_reduce_108,
  5, 88, :_reduce_109,
  5, 88, :_reduce_110,
  4, 136, :_reduce_111,
  1, 137, :_reduce_112,
  1, 133, :_reduce_113,
  3, 133, :_reduce_114,
  1, 132, :_reduce_115,
  2, 132, :_reduce_116,
  1, 132, :_reduce_117,
  6, 99, :_reduce_118,
  2, 99, :_reduce_119,
  3, 138, :_reduce_120,
  3, 138, :_reduce_121,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_124,
  1, 135, :_reduce_125,
  3, 135, :_reduce_126,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_130,
  3, 140, :_reduce_131,
  6, 103, :_reduce_132,
  7, 104, :_reduce_133,
  1, 146, :_reduce_134,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_138,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  6, 105, :_reduce_141,
  5, 105, :_reduce_142,
  1, 149, :_reduce_143,
  3, 149, :_reduce_144,
  1, 151, :_reduce_145,
  1, 151, :_reduce_146,
  1, 151, :_reduce_147,
  1, 151, :_reduce_none,
  1, 152, :_reduce_149,
  3, 152, :_reduce_150,
  1, 150, :_reduce_none,
  2, 150, :_reduce_152,
  1, 143, :_reduce_153,
  1, 143, :_reduce_154,
  1, 144, :_reduce_155,
  2, 144, :_reduce_156,
  4, 144, :_reduce_157,
  1, 123, :_reduce_158,
  3, 123, :_reduce_159,
  3, 153, :_reduce_160,
  1, 153, :_reduce_161,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 97, :_reduce_164,
  3, 106, :_reduce_165,
  4, 106, :_reduce_166,
  2, 106, :_reduce_167,
  3, 109, :_reduce_168,
  4, 109, :_reduce_169,
  2, 109, :_reduce_170,
  1, 154, :_reduce_171,
  3, 154, :_reduce_172,
  3, 155, :_reduce_173,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 156, :_reduce_176,
  2, 157, :_reduce_177,
  1, 158, :_reduce_178,
  1, 160, :_reduce_179,
  1, 161, :_reduce_180,
  2, 159, :_reduce_181,
  1, 162, :_reduce_182,
  1, 163, :_reduce_183,
  2, 163, :_reduce_184,
  1, 112, :_reduce_185,
  1, 115, :_reduce_186,
  1, 113, :_reduce_187,
  1, 114, :_reduce_188,
  1, 108, :_reduce_189,
  1, 107, :_reduce_190,
  1, 110, :_reduce_191,
  0, 117, :_reduce_none,
  1, 117, :_reduce_193,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 83, :_reduce_210 ]

racc_reduce_n = 211

racc_shift_n = 364

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :ATAT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :NUMBER => 72,
  :LOW => 73,
  :HIGH => 74,
  :CALL => 75,
  :MODULO => 76,
  :DELETES => 77,
  :TITLE_COLON => 78,
  :CASE_COLON => 79 }

racc_nt_base = 80

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "DELETES",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 58)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 158)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 159)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_82(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 244)
  def _reduce_84(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_87(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_90(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_92(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_94(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_96(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_98(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_101(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_103(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_104(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_105(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 407)
  def _reduce_110(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_117(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_119(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_120(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_121(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_125(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_126(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_132(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 506)
  def _reduce_133(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_134(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_141(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_142(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_143(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_144(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_145(val, _values, result)
     result = val[0]; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_147(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_149(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_150(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_154(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_164(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_165(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_167(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_168(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_169(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_170(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_171(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_172(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_173(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_177(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_179(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_180(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_181(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_182(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_183(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_184(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_185(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_186(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_187(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_188(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_189(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_190(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_191(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 192 omitted

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_193(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_210(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
