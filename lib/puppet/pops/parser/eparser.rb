#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 705)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'71,220,207,235,117,53,55,113,116,90,91,87,82,94,240,98,268,93,71,-129',
'83,85,84,86,235,222,106,53,55,53,55,94,319,98,117,93,-206,204,116,97',
'217,-197,126,89,88,124,297,75,76,78,77,80,81,282,73,74,-127,97,245,266',
'-129,72,207,71,126,62,126,124,236,124,79,92,90,91,87,82,94,-206,98,72',
'93,71,-197,83,85,84,86,62,117,62,53,55,116,299,94,328,98,-127,93,246',
'225,227,97,234,228,224,89,88,235,217,75,76,78,77,80,81,301,73,74,117',
'97,117,106,116,72,116,71,126,117,314,124,313,116,79,92,90,91,87,82,94',
'71,98,72,93,260,71,83,85,84,86,62,71,314,94,313,98,203,93,94,244,98',
'259,93,306,94,97,98,307,93,89,88,230,229,75,76,78,77,80,81,97,73,74',
'308,207,97,223,311,72,66,71,97,67,69,68,70,315,79,92,90,91,87,82,94',
'317,98,258,93,284,242,83,85,84,86,244,324,325,288,266,194,170,66,137',
'244,335,242,244,118,242,97,338,106,107,89,88,281,267,75,76,78,77,80',
'81,342,73,74,317,344,345,346,347,72,103,71,349,350,351,285,66,63,79',
'92,90,91,87,82,94,358,98,359,93,360,361,83,85,84,86,,,,,,,,,,,,,,,,97',
',,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,95,,,,,79,92,90,91',
'87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78',
'77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83',
'85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,',
'72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,',
',,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,226,,79,92',
'90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75',
'76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93',
',,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74',
',,,,,72,,71,,213,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,',
',,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,',
'79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88',
',,75,76,78,77,80,81,,73,74,,,,,,72,,71,,212,,,,,79,92,90,91,87,82,94',
',98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81',
',73,74,,,,,,72,,71,,211,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84',
'86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71',
',210,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97',
',,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87',
'82,94,,98,,93,,199,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78',
'77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83',
'85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,',
'72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,',
',,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90',
'91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76',
'78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,',
'83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,',
',,,72,,71,,,,,,,79,92,90,91,87,82,94,71,98,,93,,,83,85,84,86,,,,94,',
'98,,93,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,97,73,74,,,53,55,,72,49',
'290,50,,,,73,74,79,92,,,,72,,,,,13,,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94,39',
'98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,97,49,129,50',
',,,62,,,78,77,,40,,73,74,56,,13,,,72,,,39,,46,,48,100,79,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,71,49,11,50,,,,,,,62',
',,94,,98,40,93,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,97,,,58,12',
'53,55,59,,49,11,50,,,,73,74,,62,,,,72,,40,,,13,56,,,,,39,,46,,48,43',
',47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44',
'45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40',
',,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,71',
'49,11,50,,,,,,,62,,,94,,98,40,93,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,97,,,58,12,53,55,59,,49,11,50,,,,73,74,,62,,,,72,,40,,,13,56',
',,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,',
',,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12',
'53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,',
'39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62',
',,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55',
'59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,',
'46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,',
'40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,',
',,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,,,59,53,55,11,,49,,50,334,,,62,,,,,,40,,,169,56,,13',
',,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,172,189,183,190,48,184,192,185,181,179',
',174,187,,,,,58,12,193,188,186,53,55,11,,49,,50,,,,62,,,,,191,173,,',
',56,,13,,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,',
'49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60',
',,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,320,,,,,,62,,,,,,40',
',,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13',
'56,,,,94,39,98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11',
'97,49,,50,,,,62,,,78,77,,40,,73,74,56,,13,201,,72,,,39,,46,,48,100,79',
'47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56',
',,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,',
',,,62,71,,,,,40,,,13,56,,,,94,39,98,46,93,48,100,,47,61,57,,41,60,,',
',,58,12,,,59,53,55,11,97,49,,50,,,,62,75,76,78,77,,40,,73,74,56,,13',
'209,,72,,,39,,46,,48,100,79,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,',
',,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39',
',46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,',
',,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55',
'59,,49,11,50,292,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39',
',46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,',
',,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,132,,,,,,62,,,,,,40,,,13,56,,,,,39,',
'46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,172,189,183,190,48,184,192,185,181,179,,174,187,,',
',,58,12,193,188,186,53,55,11,,49,,50,,,,62,,,,,191,173,,,,56,,13,,,',
',,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,272,',
',,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58',
'12,53,55,59,,49,11,50,270,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43',
',47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,264,,,,,,62,,,,,,40',
',,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40',
',,13,56,,,,94,39,98,46,93,48,100,,47,61,57,,41,60,71,,,,58,12,,,59,',
',11,97,94,,98,,93,,62,75,76,78,77,,40,,73,74,56,,,,,72,,,,,97,,,,79',
',71,,75,76,78,77,80,81,,73,74,,,94,,98,72,93,,,,,,,,79,,,,,,,,,,,,,',
'97,,,,,,71,,75,76,78,77,80,81,,73,74,,82,94,,98,72,93,,,83,,,,,79,,',
',,,,,,,,,,,97,,,,,,71,,75,76,78,77,80,81,,73,74,,82,94,,98,72,93,,,83',
',,,,79,,,,,,,,,,,,,,97,,,,,,71,,75,76,78,77,80,81,,73,74,,82,94,,98',
'72,93,,,83,,,,,79,,,,,,,,,,,,,,97,,,,,,71,,75,76,78,77,80,81,,73,74',
',82,94,,98,72,93,,,83,,,,,79,,,,,,,,,,,,,,97,,,,,,71,,75,76,78,77,80',
'81,,73,74,87,82,94,,98,72,93,,,83,85,84,86,,79,,,,,,,,,,,,,,97,,,,,',
'71,,75,76,78,77,80,81,,73,74,87,82,94,,98,72,93,,,83,85,84,86,,79,,',
',,,,,,,,53,55,,97,49,,50,353,88,,,75,76,78,77,80,81,,73,74,,,13,,,72',
',,39,,46,,48,43,79,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50',
'355,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45',
',,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43',
',47,61,57,64,41,60,44,45,,,58,12,53,55,59,,49,11,50,357,,,,,,62,,,,',
',40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,,,59,,,11',
',,,254,189,253,190,62,251,192,255,249,248,40,250,252,,56,,,,,193,188',
'256,254,189,253,190,,251,192,255,249,248,,250,252,,,191,257,,,193,188',
'256,254,189,253,190,,251,192,255,249,248,,250,252,,,191,257,,,193,188',
'256,,,,,,,,,,,,,,,,191,257' ]
        racc_action_table = arr = ::Array.new(5345, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'171,120,106,208,100,47,47,43,100,171,171,171,171,171,171,171,208,171',
'147,181,171,171,171,171,273,120,37,185,185,222,222,147,273,147,43,147',
'186,106,43,171,119,187,47,171,171,47,237,171,171,171,171,171,171,217',
'171,171,179,147,182,205,181,171,217,166,185,47,222,185,166,222,171,171',
'166,166,166,166,166,186,166,147,166,146,187,166,166,166,166,185,281',
'222,220,220,281,241,146,281,146,179,146,182,128,131,166,144,131,128',
'166,166,144,114,166,166,166,166,166,166,243,166,166,184,146,46,201,184',
'166,46,165,220,183,311,220,311,183,166,166,165,165,165,165,165,99,165',
'146,165,200,101,165,165,165,165,220,145,270,99,270,99,105,99,101,247',
'101,198,101,261,145,165,145,263,145,165,165,136,136,165,165,165,165',
'165,165,99,165,165,265,266,101,122,269,165,138,164,145,7,7,7,7,271,165',
'165,164,164,164,164,164,272,164,196,164,218,276,164,164,164,164,277',
'278,279,223,283,96,94,65,63,176,296,214,298,44,175,164,305,306,38,164',
'164,215,207,164,164,164,164,164,164,314,164,164,315,317,318,322,323',
'164,36,163,329,330,333,219,5,1,164,164,163,163,163,163,163,348,163,352',
'163,354,356,163,163,163,163,,,,,,,,,,,,,,,,163,,,,163,163,,,163,163',
'163,163,163,163,,163,163,,,,,,163,,10,,10,,,,,163,163,10,10,10,10,10',
',10,,10,,,10,10,10,10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10',
',10,10,,,,,,10,,195,,,,,,,10,10,195,195,195,195,195,,195,,195,,,195',
'195,195,195,,,,,,,,,,,,,,,,195,,,,195,195,,,195,195,195,195,195,195',
',195,195,,,,,,195,,134,,,,,,,195,195,134,134,134,134,134,,134,,134,',
',134,134,134,134,,,,,,,,,,,,,,,,134,,,,134,134,,,134,134,134,134,134',
'134,,134,134,,,,,,134,,130,,,,,130,,134,134,130,130,130,130,130,,130',
',130,,,130,130,130,130,,,,,,,,,,,,,,,,130,,,,130,130,,,130,130,130,130',
'130,130,,130,130,,,,,,130,,127,,,,,,,130,130,127,127,127,127,127,,127',
',127,,,127,127,127,127,,,,,,,,,,,,,,,,127,,,,127,127,,,127,127,127,127',
'127,127,,127,127,,,,,,127,,112,,112,,,,,127,127,112,112,112,112,112',
',112,,112,,,112,112,112,112,,,,,,,,,,,,,,,,112,,,,112,112,,,112,112',
'112,112,112,112,,112,112,,,,,,112,,310,,,,,,,112,112,310,310,310,310',
'310,,310,,310,,,310,310,310,310,,,,,,,,,,,,,,,,310,,,,310,310,,,310',
'310,310,310,310,310,,310,310,,,,,,310,,111,,111,,,,,310,310,111,111',
'111,111,111,,111,,111,,,111,111,111,111,,,,,,,,,,,,,,,,111,,,,111,111',
',,111,111,111,111,111,111,,111,111,,,,,,111,,110,,110,,,,,111,111,110',
'110,110,110,110,,110,,110,,,110,110,110,110,,,,,,,,,,,,,,,,110,,,,110',
'110,,,110,110,110,110,110,110,,110,110,,,,,,110,,108,,108,,,,,110,110',
'108,108,108,108,108,,108,,108,,,108,108,108,108,,,,,,,,,,,,,,,,108,',
',,108,108,,,108,108,108,108,108,108,,108,108,,,,,,108,,102,,,,,,,108',
'108,102,102,102,102,102,,102,,102,,102,102,102,102,102,,,,,,,,,,,,,',
',,102,,,,102,102,,,102,102,102,102,102,102,,102,102,,,,,,102,,304,,',
',,,,102,102,304,304,304,304,304,,304,,304,,,304,304,304,304,,,,,,,,',
',,,,,,,304,,,,304,304,,,304,304,304,304,304,304,,304,304,,,,,,304,,303',
',,,,,,304,304,303,303,303,303,303,,303,,303,,,303,303,303,303,,,,,,',
',,,,,,,,,303,,,,303,303,,,303,303,303,303,303,303,,303,303,,,,,,303',
',289,,,,,,,303,303,289,289,289,289,289,,289,,289,,,289,289,289,289,',
',,,,,,,,,,,,,,289,,,,289,289,,,289,289,289,289,289,289,,289,289,,,,',
',289,,295,,,,,,,289,289,295,295,295,295,295,,295,,295,,,295,295,295',
'295,,,,,,,,,,,,,,,,295,,,,295,295,,,295,295,295,295,295,295,,295,295',
',,,,,295,,291,,,,,,,295,295,291,291,291,291,291,152,291,,291,,,291,291',
'291,291,,,,152,,152,,152,,,,,,,,291,,,,291,291,,,291,291,291,291,291',
'291,152,291,291,,,224,224,,291,224,224,224,,,,152,152,291,291,,,,152',
',,,,224,,,,,,224,,224,,224,224,,224,224,224,,224,224,,,,,224,224,54',
'54,224,,54,224,54,,,,,,,224,148,,,,,224,,,54,224,,,,148,54,148,54,148',
'54,54,,54,54,54,,54,54,,,,,54,54,,,54,49,49,54,148,49,49,49,,,,54,,',
'148,148,,54,,148,148,54,,49,,,148,,,49,,49,,49,49,148,49,49,49,,49,49',
',,,,49,49,64,64,49,,64,49,64,,,,,,,49,,,,,,49,,,64,49,,,,,64,,64,,64',
'64,,64,64,64,,64,64,64,64,,,64,64,172,172,64,151,172,64,172,,,,,,,64',
',,151,,151,64,151,,172,64,,,,,172,,172,,172,172,,172,172,172,,172,172',
',151,,,172,172,66,66,172,,66,172,66,,,,151,151,,172,,,,151,,172,,,66',
'172,,,,,66,,66,,66,66,,66,66,66,,66,66,66,66,,,66,66,67,67,66,,67,66',
'67,,,,,,,66,,,,,,66,,,67,66,,,,,67,,67,,67,67,,67,67,67,,67,67,67,67',
',,67,67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,,,68,67,,,,,68,,68,,68,68',
',68,68,68,,68,68,68,68,,,68,68,69,69,68,,69,68,69,,,,,,,68,,,,,,68,',
',69,68,,,,,69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,70,70,69,,70',
'69,70,,,,,,,69,,,,,,69,,,70,69,,,,,70,,70,,70,70,,70,70,70,,70,70,70',
'70,,,70,70,71,71,70,150,71,70,71,,,,,,,70,,,150,,150,70,150,,71,70,',
',,,71,,71,,71,71,,71,71,71,,71,71,,150,,,71,71,72,72,71,,72,71,72,,',
',150,150,,71,,,,150,,71,,,72,71,,,,,72,,72,,72,72,,72,72,72,,72,72,',
',,,72,72,73,73,72,,73,72,73,,,,,,,72,,,,,,72,,,73,72,,,,,73,,73,,73',
'73,,73,73,73,,73,73,,,,,73,73,74,74,73,,74,73,74,,,,,,,73,,,,,,73,,',
'74,73,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,,74,74,75,75,74,,75,74,75',
',,,,,,74,,,,,,74,,,75,74,,,,,75,,75,,75,75,,75,75,75,,75,75,,,,,75,75',
'76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76,75,,,,,76,,76,,76,76,,76,76',
'76,,76,76,,,,,76,76,77,77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,76,,,,',
'77,,77,,77,77,,77,77,77,,77,77,,,,,77,77,78,78,77,,78,77,78,,,,,,,77',
',,,,,77,,,78,77,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,,78,78,79,79,78',
',79,78,79,,,,,,,78,,,,,,78,,,79,78,,,,,79,,79,,79,79,,79,79,79,,79,79',
',,,,79,79,80,80,79,,80,79,80,,,,,,,79,,,,,,79,,,80,79,,,,,80,,80,,80',
'80,,80,80,80,,80,80,,,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,',
'81,80,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,82,82,81,,82,81,82',
',,,,,,81,,,,,,81,,,82,81,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82',
'83,83,82,,83,82,83,,,,,,,82,,,,,,82,,,83,82,,,,,83,,83,,83,83,,83,83',
'83,,83,83,,,,,83,83,84,84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,83,,,,',
'84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,85,85,84,,85,84,85,,,,,,,84',
',,,,,84,,,85,84,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,86,86,85',
',86,85,86,,,,,,,85,,,,,,85,,,86,85,,,,,86,,86,,86,86,,86,86,86,,86,86',
',,,,86,86,87,87,86,,87,86,87,,,,,,,86,,,,,,86,,,87,86,,,,,87,,87,,87',
'87,,87,87,87,,87,87,,,,,87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87,,',
'88,87,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,89,89,88,,89,88,89',
',,,,,,88,,,,,,88,,,89,88,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89',
'90,90,89,,90,89,90,,,,,,,89,,,,,,89,,,90,89,,,,,90,,90,,90,90,,90,90',
'90,,90,90,,,,,90,90,91,91,90,,91,90,91,,,,,,,90,,,,,,90,,,91,90,,,,',
'91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,92,92,91,,92,91,92,,,,,,,91',
',,,,,91,,,92,91,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,93,93,92',
',93,92,93,,,,,,,92,,,,,,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93',
',,,,93,93,,,93,285,285,93,,285,,285,285,,,93,,,,,,93,,,93,93,,285,,',
',,,285,,285,,285,285,,285,285,285,,285,285,285,285,,,285,285,95,95,285',
',95,285,95,,,,,,,285,,,,,,285,,,95,285,,,,,95,95,95,95,95,95,95,95,95',
'95,,95,95,,,,,95,95,95,95,95,284,284,95,,284,,284,,,,95,,,,,95,95,,',
',95,,284,,,,,,284,,284,,284,284,,284,284,284,,284,284,284,284,,,284',
'284,97,97,284,,97,284,97,,,,,,,284,,,,,,284,,,97,284,,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,98,98,97,,98,97,98,,,,,,,97,,,,,,97,,',
'98,97,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,274,274,98,,274,98',
'274,274,,,,,,98,,,,,,98,,,274,98,,,,,274,,274,,274,274,,274,274,274',
',274,274,,,,,274,274,267,267,274,,267,274,267,,,,,,,274,,,,,,274,,,267',
'274,,,,,267,,267,,267,267,,267,267,267,,267,267,,,,,267,267,260,260',
'267,,260,267,260,,,,,,,267,,,,,,267,,,260,267,,,,,260,,260,,260,260',
',260,260,260,,260,260,,,,,260,260,42,42,260,,42,260,42,,,,,,,260,149',
',,,,260,,,42,260,,,,149,42,149,42,149,42,42,,42,42,42,,42,42,,,,,42',
'42,,,42,103,103,42,149,103,,103,,,,42,,,149,149,,42,,149,149,42,,103',
'103,,149,,,103,,103,,103,103,149,103,103,103,,103,103,,,,,103,103,246',
'246,103,,246,103,246,,,,,,,103,,,,,,103,,,246,103,,,,,246,,246,,246',
'246,,246,246,246,,246,246,,,,,246,246,245,245,246,,245,246,245,,,,,',
',246,153,,,,,246,,,245,246,,,,153,245,153,245,153,245,245,,245,245,245',
',245,245,,,,,245,245,,,245,107,107,245,153,107,,107,,,,245,153,153,153',
'153,,245,,153,153,245,,107,107,,153,,,107,,107,,107,107,153,107,107',
'107,,107,107,,,,,107,107,41,41,107,,41,107,41,,,,,,,107,,,,,,107,,,41',
'107,,,,,41,,41,,41,41,,41,41,41,,41,41,,,,,41,41,40,40,41,,40,41,40',
',,,,,,41,,,,,,41,,,40,41,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,,40,40',
'39,39,40,,39,40,39,,,,,,,40,,,,,,40,,,39,40,,,,,39,,39,,39,39,,39,39',
'39,,39,39,,,,,39,39,313,313,39,,313,39,313,,,,,,,39,,,,,,39,,,313,39',
',,,,313,,313,,313,313,,313,313,313,,313,313,,,,,313,313,113,113,313',
',113,313,113,,,,,,,313,,,,,,313,,,113,313,,,,,113,,113,,113,113,,113',
'113,113,,113,113,,,,,113,113,242,242,113,,242,113,242,,,,,,,113,,,,',
',113,,,242,113,,,,,242,,242,,242,242,,242,242,242,,242,242,,,,,242,242',
'236,236,242,,236,242,236,,,,,,,242,,,,,,242,,,236,242,,,,,236,,236,',
'236,236,,236,236,236,,236,236,,,,,236,236,235,235,236,,235,236,235,',
',,,,,236,,,,,,236,,,235,236,,,,,235,,235,,235,235,,235,235,235,,235',
'235,,,,,235,235,233,233,235,,233,235,233,,,,,,,235,,,,,,235,,,233,235',
',,,,233,,233,,233,233,,233,233,233,,233,233,,,,,233,233,325,325,233',
',325,233,325,,,,,,,233,,,,,,233,,,325,233,,,,,325,,325,,325,325,,325',
'325,325,,325,325,325,325,,,325,325,228,228,325,,228,325,228,228,,,,',
',325,,,,,,325,,,228,325,,,,,228,,228,,228,228,,228,228,228,,228,228',
',,,,228,228,13,13,228,,13,228,13,,,,,,,228,,,,,,228,,,13,228,,,,,13',
',13,,13,13,,13,13,13,,13,13,,,,,13,13,226,226,13,,226,13,226,,,,,,,13',
',,,,,13,,,226,13,,,,,226,,226,,226,226,,226,226,226,,226,226,,,,,226',
'226,12,12,226,,12,226,12,,,,,,,226,,,,,,226,,,12,226,,,,,12,,12,,12',
'12,,12,12,12,,12,12,,,,,12,12,50,50,12,,50,12,50,50,,,,,,12,,,,,,12',
',,50,12,,,,,50,,50,,50,50,,50,50,50,,50,50,,,,,50,50,213,213,50,,213',
'50,213,,,,,,,50,,,,,,50,,,213,50,,,,,213,213,213,213,213,213,213,213',
'213,213,,213,213,,,,,213,213,213,213,213,212,212,213,,212,,212,,,,213',
',,,,213,213,,,,213,,212,,,,,,212,,212,,212,212,,212,212,212,,212,212',
',,,,212,212,211,211,212,,211,212,211,211,,,,,,212,,,,,,212,,,211,212',
',,,,211,,211,,211,211,,211,211,211,,211,211,211,211,,,211,211,210,210',
'211,,210,211,210,210,,,,,,211,,,,,,211,,,210,211,,,,,210,,210,,210,210',
',210,210,210,,210,210,210,210,,,210,210,203,203,210,,203,210,203,203',
',,,,,210,,,,,,210,,,203,210,,,,,203,,203,,203,203,,203,203,203,,203',
'203,203,203,,,203,203,11,11,203,,11,203,11,,,,,,,203,,,,,,203,,,11,203',
',,,,11,,11,,11,11,,11,11,11,,11,11,,,,,11,11,174,174,11,,174,11,174',
',,,,,,11,,,,,,11,,,174,11,,,,,174,,174,,174,174,,174,174,174,,174,174',
',,,,174,174,173,173,174,,173,174,173,,,,,,,174,154,,,,,174,,,173,174',
',,,154,173,154,173,154,173,173,,173,173,173,,173,173,155,,,,173,173',
',,173,,,173,154,155,,155,,155,,173,154,154,154,154,,173,,154,154,173',
',,,,154,,,,,155,,,,154,,156,,155,155,155,155,155,155,,155,155,,,156',
',156,155,156,,,,,,,,155,,,,,,,,,,,,,,156,,,,,,157,,156,156,156,156,156',
'156,,156,156,,157,157,,157,156,157,,,157,,,,,156,,,,,,,,,,,,,,157,,',
',,,158,,157,157,157,157,157,157,,157,157,,158,158,,158,157,158,,,158',
',,,,157,,,,,,,,,,,,,,158,,,,,,159,,158,158,158,158,158,158,,158,158',
',159,159,,159,158,159,,,159,,,,,158,,,,,,,,,,,,,,159,,,,,,160,,159,159',
'159,159,159,159,,159,159,,160,160,,160,159,160,,,160,,,,,159,,,,,,,',
',,,,,,160,,,,,,161,,160,160,160,160,160,160,,160,160,161,161,161,,161',
'160,161,,,161,161,161,161,,160,,,,,,,,,,,,,,161,,,,,,162,,161,161,161',
'161,161,161,,161,161,162,162,162,,162,161,162,,,162,162,162,162,,161',
',,,,,,,,,,342,342,,162,342,,342,342,162,,,162,162,162,162,162,162,,162',
'162,,,342,,,162,,,342,,342,,342,342,162,342,342,342,,342,342,342,342',
',,342,342,344,344,342,,344,342,344,344,,,,,,342,,,,,,342,,,344,342,',
',,,344,,344,,344,344,,344,344,344,,344,344,344,344,,,344,344,4,4,344',
',4,344,4,,,,,,,344,,,,,,344,,,4,344,,,,,4,,4,,4,4,,4,4,4,4,4,4,4,4,',
',4,4,345,345,4,,345,4,345,345,,,,,,4,,,,,,4,,,345,4,,,,,345,,345,,345',
'345,,345,345,345,,345,345,345,345,,,345,345,169,169,345,,169,345,169',
',,,,,,345,,,,,,345,,,169,345,,,,,169,,169,,169,169,,169,169,169,,169',
'169,,,,,169,169,0,0,169,,0,169,0,,,,,,,169,,,,,,169,,,0,169,,,,,0,,0',
',0,0,,0,0,0,,0,0,0,0,,,0,0,297,297,0,,297,0,297,,,,,,,0,,,,,,0,,,297',
'0,,,,,297,,297,,297,297,,297,297,297,,297,297,,,,,297,297,,,297,,,297',
',,,239,239,239,239,297,239,239,239,239,239,297,239,239,,297,,,,,239',
'239,239,194,194,194,194,,194,194,194,194,194,,194,194,,,239,239,,,194',
'194,194,244,244,244,244,,244,244,244,244,244,,244,244,,,194,194,,,244',
'244,244,,,,,,,,,,,,,,,,244,244' ]
        racc_action_check = arr = ::Array.new(5345, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  5157,   258,   nil,   nil,  5016,   245,   nil,   128,   nil,   nil,
   309,  4436,  4104,  4010,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   227,   -43,   207,  3587,
  3540,  3493,  3252,    -1,   183,   nil,    86,     3,   nil,  1413,
  4151,   nil,   nil,   nil,  1363,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   221,  1460,   208,  1554,  1601,  1648,  1695,
  1742,  1789,  1836,  1883,  1930,  1977,  2024,  2071,  2118,  2165,
  2212,  2259,  2306,  2353,  2400,  2447,  2494,  2541,  2588,  2635,
  2682,  2729,  2776,  2823,   180,  2920,   210,  3017,  3064,   134,
   -31,   139,   939,  3302,   nil,   148,   -32,  3446,   876,   nil,
   813,   750,   624,  3681,    85,   nil,   nil,   nil,   nil,    16,
   -11,   nil,   166,   nil,   nil,   nil,   nil,   561,    93,   nil,
   498,    92,   nil,   nil,   435,   nil,   167,   nil,   176,   nil,
   nil,   nil,   nil,   nil,    96,   145,    75,    12,  1373,  3262,
  1788,  1506,  1268,  3406,  4540,  4567,  4612,  4657,  4702,  4747,
  4792,  4837,  4882,   246,   183,   120,    57,   nil,   nil,  5110,
   nil,    -6,  1507,  4530,  4483,   187,   210,   nil,   nil,    45,
   nil,     8,    47,    93,    84,    25,    25,    30,   nil,   nil,
   nil,   nil,   nil,   nil,  5254,   372,   159,   nil,   139,   nil,
   132,    53,   nil,  4389,   nil,    47,   nil,   220,    -9,   nil,
  4342,  4295,  4248,  4198,   184,   198,   nil,    28,   199,   248,
    88,   nil,    27,   177,  1316,   nil,  4057,   nil,  3963,   nil,
   nil,   nil,   nil,  3869,   nil,  3822,  3775,    34,   nil,  5232,
   nil,    84,  3728,   107,  5276,  3396,  3349,   147,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  3205,   138,   nil,   158,   nil,   113,   149,  3158,   nil,   177,
   121,   186,   172,    12,  3111,   nil,   168,   201,   205,   207,
   nil,    53,   nil,   205,  2970,  2873,   nil,   nil,   nil,  1128,
   nil,  1254,   nil,   nil,   nil,  1191,   214,  5204,   213,   nil,
   nil,   nil,   nil,  1065,  1002,   220,   161,   nil,   nil,   nil,
   687,    98,   nil,  3634,   234,   214,   nil,   238,   239,   nil,
   nil,   nil,   239,   240,   nil,  3916,   nil,   nil,   nil,   228,
   245,   nil,   nil,   246,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  4922,   nil,  4969,  5063,   nil,   nil,   257,   nil,
   nil,   nil,   259,   nil,   261,   nil,   262,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
  -208,  -209,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -105,  -209,  -209,  -209,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -209,
  -209,  -209,  -209,  -209,  -115,  -117,  -209,  -209,  -162,  -209,
  -209,  -172,  -173,  -174,  -209,  -176,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -209,  -209,    -6,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -124,  -119,  -208,  -208,   -27,
  -209,   -34,  -209,  -209,   -72,  -209,  -209,  -209,  -209,   -82,
  -209,  -209,  -209,  -209,  -208,  -134,  -153,  -154,  -116,  -208,
  -208,  -143,  -145,  -146,  -147,  -148,  -149,   -42,  -209,  -165,
  -209,  -209,  -168,  -169,  -180,  -175,  -209,   362,    -5,    -8,
   -11,   -12,   -13,   -14,  -209,   -17,   -18,   -19,   -20,   -21,
   -22,   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,   -32,
   -33,   -35,   -36,   -37,   -38,   -39,  -209,   -40,  -100,  -209,
   -76,  -209,  -201,  -207,  -195,  -192,  -190,  -113,  -125,  -184,
  -128,  -188,  -209,  -198,  -196,  -204,  -186,  -187,  -194,  -199,
  -200,  -202,  -203,  -205,  -124,  -123,  -209,  -122,  -209,   -41,
  -190,   -67,   -77,  -209,   -80,  -190,  -158,  -161,  -209,   -74,
  -209,  -209,  -209,  -124,  -192,  -208,  -155,  -209,  -209,  -209,
  -209,  -151,  -209,  -209,  -209,  -163,  -209,  -166,  -209,  -177,
  -178,  -179,  -181,  -209,   -16,  -209,  -209,  -190,  -102,  -124,
  -112,  -209,  -193,  -209,  -191,  -209,  -209,  -190,  -127,  -129,
  -195,  -196,  -197,  -198,  -201,  -204,  -206,  -207,  -120,  -121,
  -191,  -209,   -69,  -209,   -79,  -209,  -191,  -209,   -73,  -209,
   -85,  -209,   -91,  -209,  -209,   -95,  -192,  -190,  -209,  -209,
  -137,  -209,  -156,  -190,  -208,  -209,  -144,  -152,  -150,   -43,
  -164,  -171,  -167,  -170,  -182,  -104,  -209,  -191,  -190,  -108,
  -114,  -109,  -126,  -130,  -131,  -209,   -66,   -78,   -81,  -159,
  -160,   -85,   -84,  -209,  -209,   -91,   -90,  -209,  -209,   -99,
   -94,   -96,  -209,  -209,  -110,  -208,  -138,  -139,  -140,  -209,
  -209,  -135,  -136,  -209,  -142,  -101,  -103,  -111,  -118,   -68,
   -83,   -86,  -209,   -89,  -209,  -209,  -106,  -107,  -209,  -157,
  -132,  -141,  -209,   -88,  -209,   -93,  -209,   -98,  -133,   -87,
   -92,   -97 ]

racc_goto_table = [
     2,   119,     3,    99,   101,   102,   104,   135,   125,   133,
   168,   176,   175,   205,   241,   123,   316,   312,   215,   330,
   286,   237,   287,   218,   196,   198,   300,   243,   239,   275,
   214,   108,   110,   111,   112,   318,    65,   302,   274,   128,
   341,   127,   130,   202,   279,   326,   134,   140,   141,   142,
   143,   261,   219,   278,   167,   309,   265,   131,   340,   343,
   348,   144,   139,   127,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   238,   171,   296,   195,
   195,   321,     1,   200,   232,   127,   138,   208,   305,   127,
   233,   231,   nil,   nil,   nil,   171,   nil,   nil,   nil,   nil,
   247,   nil,   nil,   nil,   nil,   322,   216,   nil,   nil,   nil,
   nil,   216,   221,   nil,   283,   nil,   nil,   nil,   323,   277,
   276,   nil,   nil,   nil,   329,   nil,   nil,   nil,   119,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   125,   nil,   nil,   337,
   nil,   nil,   nil,   123,   nil,   298,   nil,   nil,   nil,   nil,
   nil,   166,   nil,   nil,   108,   110,   111,   nil,   nil,   nil,
   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   125,   nil,   125,   nil,   nil,   294,   293,   123,   nil,
   123,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   263,   127,   171,   nil,   nil,   nil,   nil,
   269,   271,   nil,   nil,   336,   nil,   289,   280,   291,   nil,
   130,   nil,   nil,   nil,   nil,   134,   nil,   289,   295,   nil,
   nil,   nil,   nil,   nil,   171,   nil,   327,   303,   304,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   289,   nil,   nil,   nil,   nil,   nil,   nil,   310,
   nil,   nil,   nil,   nil,   nil,   nil,   127,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   339,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   333,   332,   nil,   nil,   166,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   332,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   352,   nil,   354,   356 ]

racc_goto_check = [
     2,    62,     3,     9,     9,     9,    37,    78,    29,    74,
    49,    54,    52,    42,    53,    35,    45,    44,    63,    64,
    70,    50,    70,    63,    58,    58,    55,    36,    56,    47,
    52,     9,     9,     9,     9,    48,     5,    59,    46,    11,
    43,     9,     9,    41,    66,    67,     9,     7,     7,     7,
     7,    36,    69,    53,    12,    72,    36,    73,    44,    45,
    64,    11,     6,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,    49,     9,    36,     9,
     9,    47,     1,    11,    79,     9,     5,    11,    36,     9,
    80,    82,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
    54,   nil,   nil,   nil,   nil,    53,     3,   nil,   nil,   nil,
   nil,     3,     3,   nil,    42,   nil,   nil,   nil,    36,    54,
    52,   nil,   nil,   nil,    36,   nil,   nil,   nil,    62,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    29,   nil,   nil,    36,
   nil,   nil,   nil,    35,   nil,    54,   nil,   nil,   nil,   nil,
   nil,     9,   nil,   nil,     9,     9,     9,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,   nil,    29,   nil,   nil,    78,    74,    35,   nil,
    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,     9,     9,   nil,   nil,   nil,   nil,
     2,     2,   nil,   nil,    49,   nil,     9,     3,     9,   nil,
     9,   nil,   nil,   nil,   nil,     9,   nil,     9,     9,   nil,
   nil,   nil,   nil,   nil,     9,   nil,    62,     9,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     3,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    92,     0,     2,   nil,    32,    -4,   -20,   nil,    -8,
   nil,   -10,   -39,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -39,
   nil,   nil,   nil,   nil,   nil,   -32,  -149,   -31,   nil,   nil,
   nil,   -62,   -93,  -273,  -253,  -256,  -174,  -183,  -238,   -83,
  -148,   nil,   -83,  -161,   -84,  -216,  -143,   nil,   -73,  -207,
   nil,   nil,   -45,   -96,  -265,   nil,  -171,  -236,   nil,   -68,
  -200,   nil,  -211,     7,   -41,   nil,   nil,   nil,   -47,   -42,
   -36,   nil,   -35 ]

racc_goto_default = [
   nil,   nil,   331,   197,     4,     5,     6,     7,     8,    10,
     9,   273,   nil,    14,    36,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,   nil,   nil,    37,    38,
   105,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    42,   nil,   nil,   nil,   177,   nil,    96,   nil,   178,
   182,   180,   115,   nil,   nil,   114,   nil,   nil,   120,   nil,
   121,   122,   206,   nil,   nil,    51,    52,    54,   nil,   nil,
   nil,   136,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 81, :_reduce_1,
  1, 81, :_reduce_none,
  1, 82, :_reduce_3,
  1, 84, :_reduce_4,
  3, 84, :_reduce_5,
  2, 84, :_reduce_6,
  1, 85, :_reduce_7,
  3, 85, :_reduce_8,
  1, 86, :_reduce_none,
  1, 87, :_reduce_10,
  3, 87, :_reduce_11,
  3, 87, :_reduce_12,
  3, 87, :_reduce_13,
  3, 87, :_reduce_14,
  1, 89, :_reduce_none,
  4, 89, :_reduce_16,
  3, 89, :_reduce_17,
  3, 89, :_reduce_18,
  3, 89, :_reduce_19,
  3, 89, :_reduce_20,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  3, 89, :_reduce_23,
  3, 89, :_reduce_24,
  3, 89, :_reduce_25,
  3, 89, :_reduce_26,
  2, 89, :_reduce_27,
  3, 89, :_reduce_28,
  3, 89, :_reduce_29,
  3, 89, :_reduce_30,
  3, 89, :_reduce_31,
  3, 89, :_reduce_32,
  3, 89, :_reduce_33,
  2, 89, :_reduce_34,
  3, 89, :_reduce_35,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  3, 89, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  1, 91, :_reduce_42,
  3, 91, :_reduce_43,
  1, 90, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 110, :_reduce_64,
  1, 110, :_reduce_65,
  5, 93, :_reduce_66,
  3, 93, :_reduce_67,
  6, 93, :_reduce_68,
  4, 93, :_reduce_69,
  1, 93, :_reduce_70,
  1, 97, :_reduce_71,
  2, 97, :_reduce_72,
  4, 118, :_reduce_73,
  3, 118, :_reduce_74,
  1, 118, :_reduce_75,
  3, 119, :_reduce_76,
  2, 117, :_reduce_77,
  3, 121, :_reduce_78,
  2, 121, :_reduce_79,
  2, 120, :_reduce_80,
  4, 120, :_reduce_81,
  2, 100, :_reduce_82,
  5, 123, :_reduce_83,
  4, 123, :_reduce_84,
  0, 124, :_reduce_none,
  2, 124, :_reduce_86,
  4, 124, :_reduce_87,
  3, 124, :_reduce_88,
  6, 101, :_reduce_89,
  5, 101, :_reduce_90,
  0, 125, :_reduce_none,
  4, 125, :_reduce_92,
  3, 125, :_reduce_93,
  5, 99, :_reduce_94,
  1, 126, :_reduce_95,
  2, 126, :_reduce_96,
  5, 127, :_reduce_97,
  4, 127, :_reduce_98,
  1, 128, :_reduce_99,
  1, 92, :_reduce_none,
  4, 92, :_reduce_101,
  1, 130, :_reduce_102,
  3, 130, :_reduce_103,
  3, 129, :_reduce_104,
  1, 88, :_reduce_105,
  6, 88, :_reduce_106,
  6, 88, :_reduce_107,
  5, 88, :_reduce_108,
  5, 88, :_reduce_109,
  5, 88, :_reduce_110,
  4, 135, :_reduce_111,
  1, 136, :_reduce_112,
  1, 132, :_reduce_113,
  3, 132, :_reduce_114,
  1, 131, :_reduce_115,
  2, 131, :_reduce_116,
  1, 131, :_reduce_117,
  6, 98, :_reduce_118,
  2, 98, :_reduce_119,
  3, 137, :_reduce_120,
  3, 137, :_reduce_121,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 134, :_reduce_124,
  1, 134, :_reduce_125,
  3, 134, :_reduce_126,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 139, :_reduce_130,
  3, 139, :_reduce_131,
  6, 102, :_reduce_132,
  7, 103, :_reduce_133,
  1, 145, :_reduce_134,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  1, 146, :_reduce_none,
  2, 146, :_reduce_138,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  6, 104, :_reduce_141,
  5, 104, :_reduce_142,
  1, 148, :_reduce_143,
  3, 148, :_reduce_144,
  1, 150, :_reduce_145,
  1, 150, :_reduce_146,
  1, 150, :_reduce_147,
  1, 150, :_reduce_none,
  1, 151, :_reduce_149,
  3, 151, :_reduce_150,
  1, 149, :_reduce_none,
  2, 149, :_reduce_152,
  1, 142, :_reduce_153,
  1, 142, :_reduce_154,
  1, 143, :_reduce_155,
  2, 143, :_reduce_156,
  4, 143, :_reduce_157,
  1, 122, :_reduce_158,
  3, 122, :_reduce_159,
  3, 152, :_reduce_160,
  1, 152, :_reduce_161,
  1, 96, :_reduce_162,
  3, 105, :_reduce_163,
  4, 105, :_reduce_164,
  2, 105, :_reduce_165,
  3, 108, :_reduce_166,
  4, 108, :_reduce_167,
  2, 108, :_reduce_168,
  1, 153, :_reduce_169,
  3, 153, :_reduce_170,
  3, 154, :_reduce_171,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 155, :_reduce_174,
  2, 156, :_reduce_175,
  1, 157, :_reduce_176,
  1, 159, :_reduce_177,
  1, 160, :_reduce_178,
  2, 158, :_reduce_179,
  1, 161, :_reduce_180,
  1, 162, :_reduce_181,
  2, 162, :_reduce_182,
  1, 111, :_reduce_183,
  1, 114, :_reduce_184,
  1, 112, :_reduce_185,
  1, 113, :_reduce_186,
  1, 107, :_reduce_187,
  1, 106, :_reduce_188,
  1, 109, :_reduce_189,
  0, 116, :_reduce_none,
  1, 116, :_reduce_191,
  0, 133, :_reduce_none,
  1, 133, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 83, :_reduce_208 ]

racc_reduce_n = 209

racc_shift_n = 362

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :ATAT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :NUMBER => 72,
  :LOW => 73,
  :HIGH => 74,
  :CALL => 75,
  :MODULO => 76,
  :DELETES => 77,
  :TITLE_COLON => 78,
  :CASE_COLON => 79 }

racc_nt_base = 80

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "DELETES",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 58)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 158)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 159)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_82(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 244)
  def _reduce_84(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_87(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_90(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_92(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_94(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_96(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_98(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_101(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_103(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_104(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_105(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 407)
  def _reduce_110(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_117(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_119(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_120(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_121(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_125(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_126(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_132(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 506)
  def _reduce_133(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_134(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_141(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_142(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_143(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_144(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_145(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_147(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_149(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_150(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_154(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_155(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_156(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_158(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_159(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_160(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_161(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_162(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_163(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_164(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_165(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_166(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_167(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_168(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_169(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_170(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_171(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_175(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_179(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_180(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_182(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_183(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_184(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_185(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_186(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_187(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_191(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_208(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
