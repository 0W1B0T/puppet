#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 762)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'59,62,322,-244,60,54,157,55,240,81,-243,-232,343,385,-241,112,323,280',
'378,254,377,-246,384,102,18,105,282,100,101,241,43,283,46,136,49,12',
'-134,47,37,40,229,45,38,10,11,-244,114,67,17,104,111,39,-243,-232,15',
'16,-241,252,113,281,59,62,68,-246,60,54,137,55,44,112,317,82,36,63,112',
'65,66,64,-134,259,48,50,52,51,18,378,53,377,112,349,43,403,46,254,49',
'116,283,47,37,40,114,45,38,257,111,114,258,67,17,111,351,39,113,340',
'15,16,240,113,251,114,59,62,68,111,60,54,368,55,44,67,229,113,36,63',
'112,65,66,241,261,260,48,50,52,51,18,337,53,272,273,232,43,233,46,230',
'49,12,359,47,37,40,70,45,38,10,11,114,360,67,17,111,278,39,59,62,15',
'16,60,113,279,362,59,62,68,334,60,54,240,55,44,73,74,75,36,63,112,65',
'66,108,259,67,48,50,52,51,18,365,53,241,321,317,43,370,46,371,49,12',
'112,47,37,40,240,45,38,10,11,114,318,67,17,111,317,39,311,375,15,16',
'307,113,76,78,77,79,68,112,379,312,381,114,44,229,80,111,36,63,240,65',
'66,305,80,113,48,50,52,51,59,62,53,67,60,54,389,55,421,304,114,241,219',
'392,111,240,72,278,218,72,342,154,113,152,18,59,62,396,67,60,43,122',
'46,122,49,12,241,47,37,40,399,45,38,10,11,278,254,67,17,402,270,39,80',
'80,15,16,80,123,406,381,408,409,68,122,136,411,80,133,44,414,415,416',
'36,63,417,65,66,80,278,72,48,50,52,51,59,62,53,68,60,54,425,55,419,81',
'69,427,428,137,63,429,307,,,,,,,102,18,105,,100,101,,43,,46,,49,12,',
'47,37,40,,45,38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,82,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39',
',,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60',
'54,,55,413,81,,,,,,,,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116',
',47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,122',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60',
'54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47',
'37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10',
'11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,',
',,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,',
'39,,,15,16,,,,,59,62,68,,60,54,141,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15',
'16,,,,,59,62,68,,60,54,143,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,',
'53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,',
',,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54,,55,145',
'81,,,,,,,,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37,40,,45,38',
'10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67',
'17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50',
'52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15',
'16,,,,,59,62,68,,60,54,,55,44,,279,,36,63,,65,66,,,,48,50,52,51,18,',
'53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59',
'62,68,,60,54,,156,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46',
',49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54',
',55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,,,39,,,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51',
'59,62,53,,60,54,,55,145,81,,,,,,,,,,,,,,102,18,105,,100,101,,43,,46',
',49,12,,47,37,40,,45,38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,',
'60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12',
',47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12',
',47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,173,187,179,188,49,180,190,181,37,172',
',175,170,,,,,67,17,191,186,171,,,15,169,,,,,,,68,,,,,189,174,,,,36,63',
',65,66,,,,182,183,185,184,59,62,53,81,60,54,,55,,,,,,,,,,102,,105,,100',
'101,,18,,,,,,43,,46,,49,116,,47,37,40,,45,38,104,,,,67,17,,,39,,,15',
'16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53',
',,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40',
',45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116',
',47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60',
'54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47',
'37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,',
',,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,',
'48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59',
'62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46',
',49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54',
',55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,',
'67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,',
'15,16,,,,,59,62,68,,60,54,,55,44,,,215,36,63,,65,66,,,,48,50,52,51,18',
'217,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,',
'55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,',
'67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39',
',,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60',
'54,,55,382,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,116,,47,37,40,,45,38,,',
',,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,122,,,36,63,,65,66,',
',,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,',
'39,,,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53',
',60,54,,55,315,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38',
'10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116',
',47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,245,53,,,',
'43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,,,68,',
',,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54,,55,325,,,,,,',
',,,,,,,,,18,59,62,,,60,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17',
',,39,,,15,16,,,,,,,68,,136,,,133,44,,,,36,63,,65,66,,,,48,50,52,51,59',
'62,53,68,60,54,,55,327,,,,,137,63,,,,,,,,,,18,,,,,,43,,46,,49,12,,47',
'37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,122,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,',
'55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66',
',,,48,50,52,51,59,62,53,,60,54,,55,344,81,,,,,,,,,,,,,,102,18,105,,100',
'101,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,104,,39,,,15,16,,85',
'86,88,87,,68,,83,84,,,44,,,82,36,63,,65,66,81,,248,48,50,52,51,,,53',
',,97,92,102,89,105,,100,101,,93,95,94,96,,59,62,,,60,,,,,,,,,,104,,',
',99,98,,,85,86,88,87,90,91,,83,84,81,,247,,,82,,,136,,,133,97,92,102',
',105,,100,101,,93,95,94,96,,89,,,,,68,,,,,,,,,104,137,63,,99,98,,,85',
'86,88,87,90,91,,83,84,81,,246,,,82,,,,,,,97,92,102,,105,81,100,101,',
'93,95,94,96,,89,,,,,102,,105,,100,101,,,,104,,,,99,98,,81,85,86,88,87',
'90,91,,83,84,104,,97,92,102,82,105,,100,101,,93,95,94,96,83,84,,,,,',
'82,,,,89,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92,102,82',
'105,,100,101,,93,95,94,96,,,,,,,,,,,,89,,,,104,,,,99,98,,,85,86,88,87',
'90,91,81,83,84,,,,,,82,,,,97,92,102,308,105,81,100,101,,93,95,94,96',
',,,,89,,102,,105,,100,101,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83',
'84,104,,97,92,102,82,105,,100,101,,93,95,94,96,83,84,,,,,,82,,,,89,',
',,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100',
'101,,93,95,94,96,,272,273,,,,,,,,,89,,,,104,,,,99,98,,81,85,86,88,87',
'90,91,,83,84,,,97,92,102,82,105,,100,101,,93,95,94,96,,,,,,,,,,,,89',
',,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100',
'101,,93,95,94,96,,,,,,,,,,,,89,,,,104,,,,99,98,,,85,86,88,87,90,91,81',
'83,84,,,284,,,82,,,,97,92,102,,105,81,100,101,,93,95,94,96,,,,,89,,102',
',105,,100,101,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,104,,97,92',
'102,82,105,,100,101,,93,95,94,96,83,84,,,,,,82,,,,89,,,,104,,,,,98,',
'81,85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100,101,,93,95,94,96',
'81,,,,,,,,,,,89,,92,102,104,105,,100,101,81,93,,85,86,88,87,90,91,,83',
'84,97,92,102,276,105,82,100,101,104,93,95,94,96,,,,85,86,88,87,90,91',
',83,84,,89,,104,,82,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,89,',
',97,92,102,,105,81,100,101,,93,95,94,96,,,,,89,92,102,,105,,100,101',
',93,,104,,,,99,98,,,85,86,88,87,90,91,,83,84,104,,,,,82,,,85,86,88,87',
'90,91,81,83,84,,,,,,82,,,,89,92,102,,105,81,100,101,,93,,,,,,,,89,92',
'102,,105,,100,101,,93,,104,,,59,62,,,60,85,86,88,87,90,91,,83,84,104',
',,,,82,,,85,86,88,87,90,91,,83,84,81,,,,,82,,,136,89,,133,97,92,102',
',105,,100,101,,93,95,94,96,,89,,,,,68,,,,,,,,,104,137,63,,99,98,,81',
'85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100,101,,93,95,94,96,,',
',,,,,,,,,89,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92,102',
'82,105,,100,101,,93,95,94,96,,,,,,,,,,,,89,,,,104,,,,99,98,,81,85,86',
'88,87,90,91,,83,84,,,,,102,82,105,,100,101,,,,81,,,,,,,,,,,,,89,102',
',105,104,100,101,,,,,,85,86,88,87,90,91,,83,84,,,,,,82,104,,,,,81,,',
'85,86,88,87,90,91,,83,84,,,102,89,105,82,100,101,,,,81,,,,,,,,,,,,97',
'92,102,89,105,104,100,101,,93,95,94,96,85,86,88,87,,,,83,84,,,,,,82',
'104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,,89,102,82,105,,100,101',
',,,81,,,,,,,,,,,,,89,102,,105,104,100,101,,,,,,,,88,87,,,,83,84,,,,',
',82,104,,,,,,,,,,88,87,,,,83,84,,,,89,,82,,,296,187,295,188,,293,190',
'297,,290,,292,294,,,,,,89,191,186,298,,,,291,,,,,,,,,,,,189,299,,,,',
',,,,,,,302,303,301,300,296,187,295,188,,293,190,297,,290,,292,294,,',
',,,,191,186,298,,,,291,,,,,,,,,,,,189,299,,,,,,,,,,,,302,303,301,300',
'296,187,295,188,,293,190,297,,290,,292,294,,,,,,,191,186,298,,,,291',
',,,,,,,,,,,189,299,,,,,,,,,,,,302,303,301,300,296,187,295,188,,293,190',
'297,,290,,292,294,,,,,,,191,186,298,,,,291,,,,,,,,,,,,189,299,,,,,,',
',,,,,302,303,301,300' ]
        racc_action_table = arr = ::Array.new(6926, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,244,185,0,0,69,0,242,195,184,170,256,331,171,46,244,178,375,140',
'375,183,331,195,0,195,193,195,195,242,0,193,0,252,0,0,172,0,0,0,138',
'0,0,0,0,185,46,0,0,195,46,0,184,170,0,0,171,131,46,178,416,416,0,183',
'416,416,252,416,0,180,269,195,0,0,116,0,0,0,172,274,0,0,0,0,416,325',
'0,325,311,275,416,374,416,142,416,416,374,416,416,416,180,416,416,144',
'180,116,144,416,416,116,277,416,180,253,416,416,122,116,129,311,4,4',
'416,311,4,4,311,4,416,122,128,311,416,416,179,416,416,122,149,149,416',
'416,416,416,4,250,416,349,349,121,4,122,4,119,4,4,285,4,4,4,4,4,4,4',
'4,179,287,4,4,179,289,4,152,152,4,4,152,179,291,306,409,409,4,249,409',
'409,317,409,4,7,7,7,4,4,12,4,4,12,147,317,4,4,4,4,409,309,4,317,243',
'313,409,314,409,316,409,409,182,409,409,409,241,409,409,409,409,12,240',
'409,409,12,234,409,227,324,409,409,224,12,7,7,7,7,409,48,326,229,327',
'182,409,109,107,182,409,409,229,409,409,223,106,182,409,409,409,409',
'408,408,409,229,408,408,335,408,408,221,48,229,103,348,48,154,158,350',
'102,71,255,64,48,63,408,47,47,358,154,47,408,217,408,360,408,408,154',
'408,408,408,361,408,408,408,408,364,216,408,408,369,154,408,163,164',
'408,408,165,42,378,379,381,384,408,41,47,386,166,47,408,391,394,395',
'408,408,401,408,408,8,168,5,408,408,408,408,406,406,408,47,406,406,412',
'406,406,196,1,418,420,47,47,422,426,,,,,,,196,406,196,,196,196,,406',
',406,,406,406,,406,406,406,,406,406,406,406,,,406,406,196,,406,,,406',
'406,,,,,175,175,406,,175,175,,175,406,,,196,406,406,,406,406,,,,406',
'406,406,406,175,,406,,,,175,,175,,175,175,,175,175,175,,175,175,,,,',
'175,175,,,175,,,175,175,,,,,10,10,175,,10,10,,10,175,,,,175,175,,175',
'175,,,,175,175,175,175,10,,175,,,,10,,10,,10,10,,10,10,10,,10,10,10',
'10,,,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,',
',,10,10,10,10,11,,10,,,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11',
',,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11,11,11,11,389,389',
'11,,389,389,,389,389,194,,,,,,,,,,,,,,194,389,194,,194,194,,389,,389',
',389,389,,389,389,389,,389,389,389,389,,,389,389,194,,389,,,389,389',
',,,,15,15,389,,15,15,,15,389,,,,389,389,,389,389,,,,389,389,389,389',
'15,,389,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,',
',16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,15,,,,16',
',16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17',
'17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,,16,,,,17,,17,,17,17,,17',
'17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17',
'17,,17,17,,,,17,17,17,17,18,,17,,,,18,,18,,18,18,,18,18,18,,18,18,18',
'18,,,18,18,,,18,,,18,18,,,,,385,385,18,,385,385,,385,18,,,,18,18,,18',
'18,,,,18,18,18,18,385,,18,,,,385,,385,,385,385,,385,385,385,,385,385',
',,,,385,385,,,385,,,385,385,,,,,377,377,385,,377,377,,377,385,385,,',
'385,385,,385,385,,,,385,385,385,385,377,,385,,,,377,,377,,377,377,,377',
'377,377,,377,377,,,,,377,377,,,377,,,377,377,,,,,43,43,377,,43,43,,43',
'377,,,,377,377,,377,377,,,,377,377,377,377,43,,377,,,,43,,43,,43,43',
',43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,',
',,43,43,,43,43,,,,43,43,43,43,44,,43,,,,44,,44,,44,44,,44,44,44,,44',
'44,,,,,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44',
',,,44,44,44,44,45,,44,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,',
'45,,,45,45,,,,,174,174,45,,174,174,,174,45,,,,45,45,,45,45,,,,45,45',
'45,45,174,,45,,,,174,,174,,174,174,,174,174,174,,174,174,,,,,174,174',
',,174,,,174,174,,,,,365,365,174,,365,365,,365,174,,,,174,174,,174,174',
',,,174,174,174,174,365,,174,,,,365,,365,,365,365,,365,365,365,,365,365',
'365,365,,,365,365,,,365,,,365,365,,,,,359,359,365,,359,359,,359,365',
',,,365,365,,365,365,,,,365,365,365,365,359,,365,,,,359,,359,,359,359',
',359,359,359,,359,359,,,,,359,359,,,359,,,359,359,,,,,53,53,359,,53',
'53,53,53,359,,,,359,359,,359,359,,,,359,359,359,359,53,,359,,,,53,,53',
',53,53,,53,53,53,,53,53,53,53,,,53,53,,,53,,,53,53,,,,,54,54,53,,54',
'54,54,54,53,,,,53,53,,53,53,,,,53,53,53,53,54,,53,,,,54,,54,,54,54,',
'54,54,54,,54,54,54,54,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54',
',54,54,,,,54,54,54,54,55,55,54,,55,55,,55,55,118,,,,,,,,,,,,,,118,55',
'118,,118,118,,55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,118,,55,',
',55,55,,,,,61,61,55,,61,61,,61,55,,,,55,55,,55,55,,,,55,55,55,55,61',
',55,,,,61,,61,,61,61,,61,61,61,,61,61,61,61,,,61,61,,,61,,,61,61,,,',
',173,173,61,,173,173,,173,61,,,,61,61,,61,61,,,,61,61,61,61,173,,61',
',,,173,,173,,173,173,,173,173,173,,173,173,,,,,173,173,,,173,,,173,173',
',,,,169,169,173,,169,169,,169,173,,169,,173,173,,173,173,,,,173,173',
'173,173,169,,173,,,,169,,169,,169,169,,169,169,169,,169,169,,,,,169',
'169,,,169,,,169,169,,,,,66,66,169,,66,66,,66,169,,,,169,169,,169,169',
',,,169,169,169,169,66,,169,,,,66,,66,,66,66,,66,66,66,,66,66,,,,,66',
'66,,,66,,,66,66,,,,,215,215,66,,215,215,,215,66,,,,66,66,,66,66,,,,66',
'66,66,66,215,,66,,,,215,,215,,215,215,,215,215,215,,215,215,,,,,215',
'215,,,215,,,215,215,,,,,70,70,215,,70,70,,70,215,,,,215,215,,215,215',
',,,215,215,215,215,70,,215,,,,70,,70,,70,70,,70,70,70,,70,70,70,70,',
',70,70,,,70,,,70,70,,,,,,,70,,,,,,70,,,,70,70,,70,70,,,,70,70,70,70',
'156,156,70,,156,156,,156,156,115,,,,,,,,,,,,,,115,156,115,,115,115,',
'156,,156,,156,156,,156,156,156,,156,156,156,156,,,156,156,115,,156,',
',156,156,,,,,72,72,156,,72,72,,72,156,,,,156,156,,156,156,,,,156,156',
'156,156,72,,156,,,,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72',
',,72,72,,,,,73,73,72,,73,73,,73,72,,,,72,72,,72,72,,,,72,72,72,72,73',
',72,,,,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,',
',74,74,73,,74,74,,74,73,,,,73,73,,73,73,,,,73,73,73,73,74,,73,,,,74',
',74,,74,74,,74,74,74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,75,75,74',
',75,75,,75,74,,,,74,74,,74,74,,,,74,74,74,74,75,,74,,,,75,,75,,75,75',
',75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,,76,76,75,,76,76,,76',
'75,,,,75,75,,75,75,,,,75,75,75,75,76,,75,,,,76,,76,,76,76,,76,76,76',
',76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76',
',76,76,,,,76,76,76,76,77,,76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77',
',,77,77,,,77,,,77,77,,,,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77',
'77,77,77,78,,77,,,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78',
',,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79',
',78,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,',
',80,80,79,,80,80,,80,79,,,,79,79,,79,79,,,,79,79,79,79,80,,79,,,,80',
'80,80,80,80,80,80,80,80,80,,80,80,,,,,80,80,80,80,80,,,80,80,,,,,,,80',
',,,,80,80,,,,80,80,,80,80,,,,80,80,80,80,81,81,80,117,81,81,,81,,,,',
',,,,,117,,117,,117,117,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,117,',
',,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81',
'81,81,81,82,,81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82',
'82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,,82',
',,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,,84,84,83',
',84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83,84,,83,,,,84,,84,,84,84',
',84,84,84,,84,84,,,,,84,84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,',
',,84,84,,84,84,,,,84,84,84,84,85,,84,,,,85,,85,,85,85,,85,85,85,,85',
'85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85',
',,,85,85,85,85,86,,85,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,',
'86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86',
'87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,',
'88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,,87,,,,88,',
'88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89',
',89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,88,,,,89,,89,,89,89,,89,89',
'89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89',
',89,89,,,,89,89,89,89,90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90',
'90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90',
'90,90,91,,90,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91',
',,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,,91,,,',
'92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,',
'93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92,93,,92,,,,93,,93,,93,93',
',93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,',
',,93,93,,93,93,,,,93,93,93,93,94,,93,,,,94,,94,,94,94,,94,94,94,,94',
'94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94',
',,,94,94,94,94,95,,94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,',
'95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95',
'96,,95,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,',
'97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96,97,,96,,,,97,',
'97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98',
',98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,97,,,,98,,98,,98,98,,98,98',
'98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98',
',98,98,,,,98,98,98,98,99,,98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99',
'99,,,99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,,99,99,,99,99,,,,99',
'99,99,99,100,,99,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100',
'100,,,100,,,100,100,,,,,101,101,100,,101,101,,101,100,,,100,100,100',
',100,100,,,,100,100,100,100,101,101,100,,,,101,,101,,101,101,,101,101',
'101,,101,101,101,101,,,101,101,,,101,,,101,101,,,,,153,153,101,,153',
'153,,153,101,,,,101,101,,101,101,,,,101,101,101,101,153,,101,,,,153',
',153,,153,153,,153,153,153,,153,153,153,153,,,153,153,,,153,,,153,153',
',,,,340,340,153,,340,340,,340,153,,,,153,153,,153,153,,,,153,153,153',
'153,340,,153,,,,340,,340,,340,340,,340,340,340,,340,340,340,340,,,340',
'340,,,340,,,340,340,,,,,104,104,340,,104,104,,104,340,,,,340,340,,340',
'340,,,,340,340,340,340,104,,340,,,,104,,104,,104,104,,104,104,104,,104',
'104,,,,,104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105,104,,',
',104,104,,104,104,,,,104,104,104,104,105,,104,,,,105,,105,,105,105,',
'105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,334,334,105,,334',
'334,,334,105,,,,105,105,,105,105,,,,105,105,105,105,334,,105,,,,334',
',334,,334,334,,334,334,334,,334,334,334,334,,,334,334,,,334,,,334,334',
',,,,,,334,,,,,,334,,,,334,334,,334,334,,,,334,334,334,334,329,329,334',
',329,329,,329,329,,,,,,,,,,,,,,,,329,,,,,,329,,329,,329,329,,329,329',
'329,,329,329,,,,,329,329,,,329,,,329,329,,,,,108,108,329,,108,108,,108',
'329,329,,,329,329,,329,329,,,,329,329,329,329,108,,329,,,,108,,108,',
'108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108',
',,,,,108,,,,108,108,,108,108,,,,108,108,108,108,232,232,108,,232,232',
',232,232,,,,,,,,,,,,,,,,232,,,,,,232,,232,,232,232,,232,232,232,,232',
'232,232,232,,,232,232,,,232,,,232,232,,,,,322,322,232,,322,322,,322',
'232,,,,232,232,,232,232,,,,232,232,232,232,322,,232,,,,322,,322,,322',
'322,,322,322,322,,322,322,322,322,,,322,322,,,322,,,322,322,,,,,321',
'321,322,,321,321,,321,322,,,,322,322,,322,322,,,,322,322,322,322,321',
',322,,,,321,,321,,321,321,,321,321,321,,321,321,,,,,321,321,,,321,,',
'321,321,,,,,318,318,321,,318,318,,318,321,,,,321,321,,321,321,,,,321',
'321,321,321,318,,321,,,,318,,318,,318,318,,318,318,318,,318,318,,,,',
'318,318,,,318,,,318,318,,,,,307,307,318,,307,307,,307,318,,,,318,318',
',318,318,,,,318,318,318,318,307,,318,,,,307,,307,,307,307,,307,307,307',
',307,307,,,,,307,307,,,307,,,307,307,,,,,284,284,307,,284,284,,284,307',
',,,307,307,,307,307,,,,307,307,307,307,284,,307,,,,284,,284,,284,284',
',284,284,284,,284,284,,,,,284,284,,,284,,,284,284,,,,,283,283,284,,283',
'283,,283,284,,,,284,284,,284,284,,,,284,284,284,284,283,,284,,,,283',
',283,,283,283,,283,283,283,,283,283,,,,,283,283,,,283,,,283,283,,,,',
'281,281,283,,281,281,,281,283,,,,283,283,,283,283,,,,283,283,283,283',
'281,,283,,,,281,,281,,281,281,,281,281,281,,281,281,,,,,281,281,,,281',
',,281,281,,,,,123,123,281,,123,123,,123,281,,,,281,281,,281,281,,,,281',
'281,281,281,123,123,281,,,,123,,123,,123,123,,123,123,123,,123,123,123',
'123,,,123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,,123,123',
',,,123,123,123,123,246,246,123,,246,246,,246,246,,,,,,,,,,,,,,,,246',
'337,337,,,337,246,,246,,246,246,,246,246,246,,246,246,246,246,,,246',
'246,,,246,,,246,246,,,,,,,246,,337,,,337,246,,,,246,246,,246,246,,,',
'246,246,246,246,247,247,246,337,247,247,,247,247,,,,,337,337,,,,,,,',
',,247,,,,,,247,,247,,247,247,,247,247,247,,247,247,247,247,,,247,247',
',,247,,,247,247,,,,,248,248,247,,248,248,,248,247,,,,247,247,,247,247',
',,,247,247,247,247,248,,247,,,,248,,248,,248,248,,248,248,248,,248,248',
',,,,248,248,,,248,,,248,248,,,,,280,280,248,,280,280,,280,248,248,,',
'248,248,,248,248,,,,248,248,248,248,280,,248,,,,280,,280,,280,280,,280',
'280,280,,280,280,,,,,280,280,,,280,,,280,280,,,,,279,279,280,,279,279',
',279,280,,,,280,280,,280,280,,,,280,280,280,280,279,,280,,,,279,,279',
',279,279,,279,279,279,,279,279,,,,,279,279,,,279,,,279,279,,,,,264,264',
'279,,264,264,,264,279,,,,279,279,,279,279,,,,279,279,279,279,264,,279',
',,,264,,264,,264,264,,264,264,264,,264,264,264,264,,,264,264,,,264,',
',264,264,,,,,259,259,264,,259,259,,259,264,,,,264,264,,264,264,,,,264',
'264,264,264,259,,264,,,,259,,259,,259,259,,259,259,259,,259,259,259',
'259,,,259,259,,,259,,,259,259,,,,,254,254,259,,254,254,,254,259,,,,259',
'259,,259,259,,,,259,259,259,259,254,,259,,,,254,,254,,254,254,,254,254',
'254,,254,254,254,254,,,254,254,,,254,,,254,254,,,,,,,254,,,,,,254,,',
',254,254,,254,254,,,,254,254,254,254,258,258,254,,258,258,,258,258,203',
',,,,,,,,,,,,,203,258,203,,203,203,,258,,258,,258,258,,258,258,258,,258',
'258,258,258,,,258,258,203,,258,,,258,258,,203,203,203,203,,258,,203',
'203,,,258,,,203,258,258,,258,258,127,,127,258,258,258,258,,,258,,,127',
'127,127,203,127,,127,127,,127,127,127,127,,251,251,,,251,,,,,,,,,,127',
',,,127,127,,,127,127,127,127,127,127,,127,127,126,,126,,,127,,,251,',
',251,126,126,126,,126,,126,126,,126,126,126,126,,127,,,,,251,,,,,,,',
',126,251,251,,126,126,,,126,126,126,126,126,126,,126,126,124,,124,,',
'126,,,,,,,124,124,124,,124,199,124,124,,124,124,124,124,,126,,,,,199',
',199,,199,199,,,,124,,,,124,124,,328,124,124,124,124,124,124,,124,124',
'199,,328,328,328,124,328,,328,328,,328,328,328,328,199,199,,,,,,199',
',,,124,,,,328,,,,328,328,,353,328,328,328,328,328,328,,328,328,,,353',
'353,353,328,353,,353,353,,353,353,353,353,,,,,,,,,,,,328,,,,353,,,,353',
'353,,,353,353,353,353,353,353,225,353,353,,,,,,353,,,,225,225,225,225',
'225,200,225,225,,225,225,225,225,,,,,353,,200,,200,,200,200,,,,225,',
',,225,225,,155,225,225,225,225,225,225,,225,225,200,,155,155,155,225',
'155,,155,155,,155,155,155,155,200,200,,,,,,200,,,,225,,,,155,,,,155',
'155,,354,155,155,155,155,155,155,,155,155,,,354,354,354,155,354,,354',
'354,,354,354,354,354,,155,155,,,,,,,,,155,,,,354,,,,354,354,,220,354',
'354,354,354,354,354,,354,354,,,220,220,220,354,220,,220,220,,220,220',
'220,220,,,,,,,,,,,,354,,,,220,,,,220,220,,355,220,220,220,220,220,220',
',220,220,,,355,355,355,220,355,,355,355,,355,355,355,355,,,,,,,,,,,',
'220,,,,355,,,,355,355,,,355,355,355,355,355,355,212,355,355,,,212,,',
'355,,,,212,212,212,,212,201,212,212,,212,212,212,212,,,,,355,,201,,201',
',201,201,,,,212,,,,212,212,,211,212,212,212,212,212,212,,212,212,201',
',211,211,211,212,211,,211,211,,211,211,211,211,201,201,,,,,,201,,,,212',
',,,211,,,,,211,,210,211,211,211,211,211,211,,211,211,,,210,210,210,211',
'210,,210,210,,210,210,210,210,209,,,,,,,,,,,211,,209,209,210,209,,209',
'209,167,209,,210,210,210,210,210,210,,210,210,167,167,167,167,167,210',
'167,167,209,167,167,167,167,,,,209,209,209,209,209,209,,209,209,,210',
',167,,209,,167,167,,,167,167,167,167,167,167,356,167,167,,,,,,167,209',
',,356,356,356,,356,208,356,356,,356,356,356,356,,,,,167,208,208,,208',
',208,208,,208,,356,,,,356,356,,,356,356,356,356,356,356,,356,356,208',
',,,,356,,,208,208,208,208,208,208,207,208,208,,,,,,208,,,,356,207,207',
',207,206,207,207,,207,,,,,,,,208,206,206,,206,,206,206,,206,,207,,,181',
'181,,,181,207,207,207,207,207,207,,207,207,206,,,,,207,,,206,206,206',
'206,206,206,,206,206,357,,,,,206,,,181,207,,181,357,357,357,,357,,357',
'357,,357,357,357,357,,206,,,,,181,,,,,,,,,357,181,181,,357,357,,373',
'357,357,357,357,357,357,,357,357,,,373,373,373,357,373,,373,373,,373',
'373,373,373,,,,,,,,,,,,357,,,,373,,,,373,373,,9,373,373,373,373,373',
'373,,373,373,,,9,9,9,373,9,,9,9,,9,9,9,9,,,,,,,,,,,,373,,,,9,,,,9,9',
',205,9,9,9,9,9,9,,9,9,,,,,205,9,205,,205,205,,,,204,,,,,,,,,,,,,9,204',
',204,205,204,204,,,,,,205,205,205,205,205,205,,205,205,,,,,,205,204',
',,,,202,,,204,204,204,204,204,204,,204,204,,,202,205,202,204,202,202',
',,,192,,,,,,,,,,,,192,192,192,204,192,202,192,192,,192,192,192,192,202',
'202,202,202,,,,202,202,,,,,,202,192,,,,192,192,,197,192,192,192,192',
'192,192,,192,192,,,,202,197,192,197,,197,197,,,,198,,,,,,,,,,,,,192',
'198,,198,197,198,198,,,,,,,,197,197,,,,197,197,,,,,,197,198,,,,,,,,',
',198,198,,,,198,198,,,,197,,198,,,276,276,276,276,,276,276,276,,276',
',276,276,,,,,,198,276,276,276,,,,276,,,,,,,,,,,,276,276,,,,,,,,,,,,276',
'276,276,276,219,219,219,219,,219,219,219,,219,,219,219,,,,,,,219,219',
'219,,,,219,,,,,,,,,,,,219,219,,,,,,,,,,,,219,219,219,219,308,308,308',
'308,,308,308,308,,308,,308,308,,,,,,,308,308,308,,,,308,,,,,,,,,,,,308',
'308,,,,,,,,,,,,308,308,308,308,278,278,278,278,,278,278,278,,278,,278',
'278,,,,,,,278,278,278,,,,278,,,,,,,,,,,,278,278,,,,,,,,,,,,278,278,278',
'278' ]
        racc_action_check = arr = ::Array.new(6926, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   358,   nil,   nil,   118,   330,   nil,   173,   332,  6430,
   466,   526,   188,   nil,   nil,   670,   730,   790,   850,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   256,   295,  1030,  1090,  1150,     9,   287,   237,   nil,
   nil,   nil,   nil,  1390,  1450,  1534,   nil,   nil,   nil,   nil,
   nil,  1594,   nil,   211,   214,   nil,  1774,   nil,   nil,     6,
  1894,   270,  2038,  2098,  2158,  2218,  2278,  2338,  2398,  2458,
  2518,  2602,  2662,  2722,  2782,  2842,  2902,  2962,  3022,  3082,
  3142,  3202,  3262,  3322,  3382,  3442,  3502,  3562,  3622,  3682,
  3742,  3802,   241,   267,  3982,  4042,   249,   241,  4246,   223,
   nil,   nil,   nil,   nil,   nil,  1982,    68,  2600,  1538,   126,
   nil,   140,    80,  4810,  5608,   nil,  5551,  5494,   104,   105,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,    14,   nil,
     6,   nil,    80,   nil,    93,   nil,   nil,   186,   nil,   134,
   nil,   nil,   170,  3862,   243,  5803,  1978,   nil,   267,   nil,
   nil,   nil,   nil,   307,   308,   311,   321,  6137,   329,  1714,
    -1,     2,    24,  1654,  1210,   406,   nil,   nil,     5,   128,
    63,  6310,   210,     9,    -2,    -9,   nil,   nil,   nil,   nil,
   nil,   nil,  6568,    18,   614,     2,   350,  6615,  6638,  5625,
  5773,  6015,  6545,  5426,  6500,  6477,  6279,  6262,  6208,  6117,
  6092,  6045,  5998,   nil,   nil,  1834,   297,   224,   nil,  6732,
  5897,   225,   nil,   233,   194,  5756,   nil,   194,   nil,   218,
   nil,   nil,  4330,   nil,   217,   nil,   nil,   nil,   nil,   nil,
   210,   184,   -28,   201,   -11,   nil,  4894,  4978,  5038,   174,
   107,  5525,    -8,   104,  5338,   276,     4,   nil,  5422,  5278,
   nil,   nil,   nil,   nil,  5218,   nil,   nil,   nil,   nil,    57,
   nil,   nil,   nil,   nil,    67,    79,  6678,   100,  6840,  5158,
  5098,  4750,   nil,  4690,  4630,   143,   nil,   139,   nil,   157,
   nil,   166,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   169,  4570,  6786,   196,
   nil,    82,   nil,   196,   201,   nil,   142,   150,  4510,   nil,
   nil,  4450,  4390,   nil,   223,    52,   234,   213,  5655,  4186,
   nil,     0,   nil,   nil,  4102,   261,   nil,  4919,   nil,   nil,
  3922,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   206,    67,
   268,   nil,   nil,  5702,  5850,  5944,  6191,  6336,   281,  1330,
   226,   294,   nil,   nil,   296,  1270,   nil,   nil,   nil,   286,
   nil,   nil,   nil,  6383,    83,   -15,   nil,   970,   313,   290,
   nil,   315,   nil,   nil,   316,   910,   319,   nil,   nil,   610,
   nil,   323,   nil,   nil,   324,   293,   nil,   nil,   nil,   nil,
   nil,   328,   nil,   nil,   nil,   nil,   346,   nil,   262,   178,
   nil,   nil,   344,   nil,   nil,   nil,    58,   nil,   349,   nil,
   350,   nil,   353,   nil,   nil,   nil,   322,   nil,   nil,   nil,
   nil ]

racc_action_default = [
    -3,  -248,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -248,  -248,  -248,   -33,   -34,  -248,  -248,  -248,  -248,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -248,  -248,  -248,  -248,  -248,  -248,  -182,
  -183,  -184,  -185,  -248,  -248,  -248,  -196,  -197,  -198,  -199,
  -200,  -248,  -202,  -248,  -215,  -218,  -248,  -223,  -224,  -248,
  -248,    -7,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -131,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,  -248,
  -248,  -248,  -248,  -126,  -247,  -247,   -22,   -23,  -248,  -247,
  -141,  -163,  -164,  -165,  -166,   -46,  -248,   -47,   -54,  -248,
   -88,  -248,  -248,  -248,  -248,   -98,  -248,  -248,  -247,  -225,
  -150,  -152,  -153,  -154,  -155,  -156,  -158,  -159,  -247,   -14,
  -225,  -187,  -225,  -189,  -248,  -192,  -193,  -248,  -201,  -248,
  -206,  -209,  -248,  -213,  -248,  -248,  -248,   431,    -6,    -9,
   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -248,  -225,  -248,
   -80,   -81,   -82,  -236,  -242,  -230,  -132,  -135,  -248,  -233,
  -231,  -239,  -245,  -183,  -184,  -185,  -229,  -234,  -235,  -237,
  -238,  -240,   -59,  -248,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,
   -55,   -56,  -248,   -57,  -120,  -248,  -225,   -84,   -92,  -131,
  -130,  -248,  -129,  -248,  -227,  -248,   -28,  -247,  -167,  -248,
   -58,   -93,  -248,   -96,  -225,  -170,  -172,  -173,  -174,  -175,
  -177,  -248,  -248,  -180,  -248,   -90,  -248,  -248,  -248,  -248,
  -247,  -226,  -248,  -248,  -226,  -248,  -248,  -190,  -248,  -248,
  -203,  -204,  -205,  -207,  -248,  -210,  -211,  -212,  -214,  -225,
  -216,  -219,  -221,  -222,    -8,  -248,  -131,  -248,  -226,  -248,
  -248,  -248,   -35,  -248,  -248,  -225,  -122,  -248,   -86,  -225,
  -134,  -248,  -230,  -231,  -232,  -233,  -236,  -239,  -241,  -242,
  -243,  -244,  -245,  -246,  -127,  -128,  -248,  -228,  -131,  -248,
  -144,  -248,  -168,  -225,  -248,   -95,  -248,  -226,  -248,  -178,
  -179,  -248,  -248,   -89,  -248,  -101,  -248,  -107,  -116,  -248,
  -111,  -248,  -114,  -117,  -247,  -248,  -160,  -248,  -151,  -157,
  -247,   -15,  -186,  -188,  -191,  -194,  -195,  -208,  -248,  -248,
  -225,   -26,  -133,  -138,  -136,  -137,   -60,  -124,  -248,  -226,
   -83,  -248,   -25,   -29,  -225,  -247,  -145,  -146,  -147,  -248,
   -94,   -97,  -171,  -176,  -248,  -101,  -100,  -248,  -248,  -107,
  -106,  -248,  -110,  -112,  -248,  -248,  -248,  -142,  -143,  -248,
  -161,  -248,  -217,  -220,  -248,   -30,  -121,  -123,   -85,  -125,
   -27,  -248,  -169,  -181,   -99,  -102,  -248,  -105,  -248,  -247,
  -115,  -139,  -248,  -149,  -162,   -24,   -31,  -140,  -248,  -104,
  -248,  -109,  -248,  -118,  -119,  -148,  -227,  -103,  -108,  -113,
   -32 ]

racc_goto_table = [
     2,   115,   117,   118,   120,   224,   250,   132,   134,   214,
   193,   148,   222,   222,   128,   306,   138,   255,   243,   256,
   338,   271,   234,   330,   168,   410,    71,   227,   386,   124,
   126,   127,   106,   107,   391,   422,   380,   221,   223,   140,
   142,   329,   285,   405,   352,   277,   249,   231,   213,   363,
   243,   309,   155,   366,   269,   376,   253,   335,   394,   401,
   119,   339,   372,   320,   319,   345,   167,   192,   194,   195,
   196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   216,   407,   265,
   220,   220,   158,   287,   225,   139,   139,   147,   163,   164,
   165,   166,   266,   150,   383,   404,   390,     3,   263,   244,
   264,   316,   262,   151,   159,   160,   161,   162,   153,   267,
     1,   nil,   nil,   nil,   286,   243,   nil,   nil,   nil,   313,
   nil,   nil,   nil,   nil,   nil,   310,   nil,   nil,   nil,   nil,
   nil,   132,   134,   139,   nil,   nil,   348,   128,   nil,   nil,
   138,   nil,   nil,   268,   nil,   117,   275,   nil,   336,   124,
   126,   127,   358,   289,   nil,   139,   361,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   288,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   369,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,
   nil,   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   132,   134,   243,   347,   393,   nil,   430,   nil,   nil,
   350,   nil,   nil,   nil,   nil,   nil,   nil,   395,   nil,   nil,
   nil,   nil,   314,   nil,   328,   nil,   nil,   nil,   nil,   nil,
   nil,   400,   388,   nil,   nil,   nil,   324,   326,   388,   nil,
   374,   nil,   364,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   353,   354,   355,   397,   356,
   357,   nil,   nil,   388,   nil,   nil,   nil,   nil,   nil,   367,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   225,   nil,   nil,   341,   132,   134,   nil,
   147,   346,   nil,   nil,   373,   nil,   150,   192,   nil,   nil,
   nil,   nil,   nil,   426,   nil,   328,   nil,   423,   nil,   nil,
   nil,   nil,   nil,   398,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   212,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   124,   341,   nil,   nil,   nil,   nil,   nil,
   nil,   328,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   412,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   225,   nil,   nil,   nil,   418,   nil,   420,   424 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    13,    15,    36,    35,    53,
    19,    83,    52,    52,    60,    14,    60,    15,    37,    15,
    68,    91,    43,    48,    11,    51,     5,    61,    62,    10,
    10,    10,     9,     9,    62,    50,    46,    56,    56,     8,
     8,    47,    54,    44,    57,    15,    61,    42,    20,    16,
    37,    64,    10,    65,    43,    45,    61,    67,    12,    62,
     6,    70,    71,    72,    74,    78,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,     8,    46,    79,
    10,    10,     5,    15,    10,     6,     6,     6,     9,     9,
     9,     9,    80,     6,    48,    45,    68,     3,    84,     8,
    85,    15,    87,    88,     6,     6,     6,     6,    89,    90,
     1,   nil,   nil,   nil,    53,    37,   nil,   nil,   nil,    43,
   nil,   nil,   nil,   nil,   nil,    52,   nil,   nil,   nil,   nil,
   nil,    36,    35,     6,   nil,   nil,    15,    60,   nil,   nil,
    60,   nil,   nil,     2,   nil,    10,     2,   nil,    52,    10,
    10,    10,    15,    11,   nil,     6,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,    35,    37,    83,    91,   nil,    14,   nil,   nil,
    11,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,     2,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    15,    52,   nil,   nil,   nil,     2,     2,    52,   nil,
    19,   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,    10,    10,    53,    10,
    10,   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,    60,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,     6,    36,    35,   nil,
     6,     6,   nil,   nil,    10,   nil,     6,    10,   nil,   nil,
   nil,   nil,   nil,    13,   nil,    10,   nil,    52,   nil,   nil,
   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,     6,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   120,     0,   107,   nil,    22,    42,   nil,   -14,    22,
   -14,   -56,  -292,  -103,  -209,  -123,  -258,   nil,   nil,   -71,
   -52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -39,   -40,  -104,   -37,   nil,
   nil,   nil,   -74,  -100,  -334,  -270,  -291,  -207,  -225,   nil,
  -374,  -360,   -92,   -91,  -173,   nil,   -67,  -234,   nil,   nil,
   -32,   -82,  -306,   nil,  -176,  -258,   nil,  -193,  -231,   nil,
  -191,  -255,  -179,   nil,  -177,   nil,   nil,   nil,  -193,   -63,
   -50,   nil,   nil,   -50,   -41,   -39,   nil,   -37,    50,    54,
   -34,  -134 ]

racc_goto_default = [
   nil,   nil,   387,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   226,    13,    14,   nil,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   333,    41,
    42,   121,   nil,   nil,   125,   nil,   nil,   nil,   nil,   331,
   nil,   332,   228,   nil,   nil,   103,   nil,   176,   178,   177,
   110,   nil,   nil,   109,   nil,   nil,   129,   nil,   130,   131,
   135,   235,   236,   237,   238,   239,   242,   144,   146,    56,
    57,    58,    61,   nil,   nil,   nil,   149,   nil,   nil,   nil,
   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 92, :_reduce_1,
  1, 92, :_reduce_2,
  0, 92, :_reduce_3,
  1, 93, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  3, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  1, 99, :_reduce_14,
  3, 99, :_reduce_15,
  1, 98, :_reduce_none,
  3, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  1, 100, :_reduce_none,
  2, 100, :_reduce_22,
  2, 100, :_reduce_23,
  7, 100, :_reduce_24,
  5, 100, :_reduce_25,
  5, 100, :_reduce_26,
  4, 107, :_reduce_27,
  1, 104, :_reduce_28,
  3, 104, :_reduce_29,
  1, 103, :_reduce_30,
  2, 103, :_reduce_31,
  4, 103, :_reduce_32,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 101, :_reduce_35,
  3, 101, :_reduce_36,
  3, 101, :_reduce_37,
  3, 101, :_reduce_38,
  3, 101, :_reduce_39,
  3, 101, :_reduce_40,
  3, 101, :_reduce_41,
  3, 101, :_reduce_42,
  3, 101, :_reduce_43,
  3, 101, :_reduce_44,
  3, 101, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  3, 101, :_reduce_48,
  3, 101, :_reduce_49,
  3, 101, :_reduce_50,
  3, 101, :_reduce_51,
  3, 101, :_reduce_52,
  3, 101, :_reduce_53,
  2, 101, :_reduce_54,
  3, 101, :_reduce_55,
  3, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  1, 110, :_reduce_59,
  3, 110, :_reduce_60,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_78,
  1, 108, :_reduce_79,
  1, 108, :_reduce_80,
  1, 108, :_reduce_81,
  1, 108, :_reduce_82,
  5, 109, :_reduce_83,
  3, 109, :_reduce_84,
  6, 109, :_reduce_85,
  4, 109, :_reduce_86,
  1, 113, :_reduce_87,
  2, 113, :_reduce_88,
  4, 130, :_reduce_89,
  3, 130, :_reduce_90,
  1, 130, :_reduce_91,
  3, 131, :_reduce_92,
  2, 129, :_reduce_93,
  3, 133, :_reduce_94,
  2, 133, :_reduce_95,
  2, 132, :_reduce_96,
  4, 132, :_reduce_97,
  2, 116, :_reduce_98,
  5, 135, :_reduce_99,
  4, 135, :_reduce_100,
  0, 136, :_reduce_none,
  2, 136, :_reduce_102,
  4, 136, :_reduce_103,
  3, 136, :_reduce_104,
  6, 117, :_reduce_105,
  5, 117, :_reduce_106,
  0, 137, :_reduce_none,
  4, 137, :_reduce_108,
  3, 137, :_reduce_109,
  5, 115, :_reduce_110,
  1, 138, :_reduce_111,
  2, 138, :_reduce_112,
  5, 139, :_reduce_113,
  1, 140, :_reduce_114,
  3, 140, :_reduce_115,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_121,
  1, 145, :_reduce_122,
  3, 145, :_reduce_123,
  3, 144, :_reduce_124,
  6, 114, :_reduce_125,
  2, 114, :_reduce_126,
  3, 146, :_reduce_127,
  3, 146, :_reduce_128,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 102, :_reduce_131,
  1, 102, :_reduce_132,
  3, 102, :_reduce_133,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 148, :_reduce_136,
  3, 148, :_reduce_137,
  3, 148, :_reduce_138,
  6, 118, :_reduce_139,
  7, 119, :_reduce_140,
  1, 154, :_reduce_141,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_145,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  7, 120, :_reduce_148,
  6, 120, :_reduce_149,
  1, 157, :_reduce_150,
  3, 157, :_reduce_151,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_154,
  1, 159, :_reduce_none,
  1, 160, :_reduce_156,
  3, 160, :_reduce_157,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_161,
  6, 122, :_reduce_162,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_166,
  1, 152, :_reduce_167,
  2, 152, :_reduce_168,
  4, 152, :_reduce_169,
  1, 134, :_reduce_170,
  3, 134, :_reduce_171,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 165, :_reduce_176,
  1, 165, :_reduce_177,
  2, 166, :_reduce_178,
  2, 164, :_reduce_179,
  1, 167, :_reduce_180,
  4, 167, :_reduce_181,
  1, 112, :_reduce_182,
  1, 123, :_reduce_183,
  1, 123, :_reduce_184,
  1, 123, :_reduce_185,
  4, 124, :_reduce_186,
  2, 124, :_reduce_187,
  4, 124, :_reduce_188,
  2, 124, :_reduce_189,
  3, 125, :_reduce_190,
  4, 125, :_reduce_191,
  2, 125, :_reduce_192,
  1, 168, :_reduce_193,
  3, 168, :_reduce_194,
  3, 169, :_reduce_195,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 170, :_reduce_199,
  1, 170, :_reduce_200,
  2, 171, :_reduce_201,
  1, 173, :_reduce_202,
  1, 175, :_reduce_203,
  1, 176, :_reduce_204,
  2, 174, :_reduce_205,
  1, 177, :_reduce_206,
  1, 178, :_reduce_207,
  2, 178, :_reduce_208,
  2, 172, :_reduce_209,
  2, 179, :_reduce_210,
  2, 179, :_reduce_211,
  3, 94, :_reduce_212,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  0, 180, :_reduce_215,
  2, 180, :_reduce_216,
  4, 180, :_reduce_217,
  1, 121, :_reduce_218,
  3, 121, :_reduce_219,
  5, 121, :_reduce_220,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 128, :_reduce_223,
  1, 126, :_reduce_224,
  0, 106, :_reduce_none,
  1, 106, :_reduce_226,
  0, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 143, :_reduce_247 ]

racc_reduce_n = 248

racc_shift_n = 431

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "option_expressions",
  "options_statements",
  "option_expression",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 395)
  def _reduce_114(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_115(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

module_eval(<<'.,.,', 'egrammar.ra', 415)
  def _reduce_121(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_123(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_124(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_125(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 440)
  def _reduce_126(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_127(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_128(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_131(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_132(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 457)
  def _reduce_133(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'egrammar.ra', 473)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 477)
  def _reduce_137(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_138(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 490)
  def _reduce_139(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_140(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 514)
  def _reduce_141(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 523)
  def _reduce_145(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_149(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_150(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_151(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 152 omitted

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_154(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_156(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_157(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_161(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_162(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_166(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_167(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_168(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_169(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_170(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_171(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_176(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_177(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_178(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_179(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_181(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_182(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_188(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_189(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_191(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_192(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_193(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_194(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_195(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_201(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_205(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_206(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_207(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_208(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_209(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_211(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_212(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 213 omitted

# reduce 214 omitted

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_215(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_216(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_217(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_220(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_223(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_224(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 225 omitted

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_247(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
