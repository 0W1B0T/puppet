#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 736)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'57,59,267,-132,51,237,53,-130,257,-221,-212,257,255,223,242,305,57,59',
'234,241,344,223,290,14,223,57,59,244,230,41,239,48,243,50,45,126,49',
'69,65,125,43,68,46,47,268,-132,66,13,220,-130,67,-221,-212,12,135,288',
'126,133,57,59,125,70,51,135,53,385,133,42,339,234,338,64,60,62,63,61',
'126,70,240,52,125,14,122,354,322,256,70,41,60,48,257,50,45,311,49,69',
'65,60,43,68,46,47,57,59,66,13,57,59,67,324,126,12,57,59,125,219,51,126',
'53,70,79,125,126,126,326,42,125,125,308,64,60,62,63,307,102,14,106,52',
'101,246,304,41,247,48,135,50,45,133,49,69,65,72,43,68,46,47,249,248',
'66,13,105,339,67,338,266,12,264,70,331,332,57,59,333,70,51,223,53,383',
'60,42,210,336,80,64,60,62,63,75,77,76,78,52,74,14,340,57,59,342,289',
'41,186,48,264,50,45,266,49,69,65,264,43,68,46,47,350,351,66,13,288,288',
'67,74,153,12,151,114,361,282,57,59,362,70,51,135,53,381,133,42,281,266',
'127,64,60,62,63,280,365,114,115,52,266,14,114,369,342,371,70,41,372',
'48,373,50,45,374,49,69,65,60,43,68,46,47,375,111,66,13,377,378,67,379',
'264,12,57,59,74,71,51,386,53,70,79,387,388,389,,42,,,,64,60,62,63,,102',
'14,106,52,101,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,',
'12,57,59,,,51,,53,70,79,81,82,,,42,,,80,64,60,62,63,,102,14,106,52,101',
',,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,,12,57,59,,,51',
',53,70,79,81,82,,,42,,,80,64,60,62,63,,102,14,106,52,101,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,105,,67,,,12,57,59,,,51,,53,70,79,81',
'82,,,42,,,80,64,60,62,63,,102,14,106,52,101,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,105,,67,,,12,57,59,,,51,,53,70,79,,,,,42,,,80,64',
'60,62,63,,102,14,106,52,101,,,41,,48,,50,45,,49,69,65,,43,68,46,47,',
',66,13,105,,67,,,12,57,59,,,51,,53,70,79,,,,,42,,,,64,60,62,63,,102',
'14,106,52,101,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,',
'12,57,59,,,51,,53,70,79,,,,,42,,,,64,60,62,63,,102,14,106,52,101,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,105,,67,,,12,57,59,,,51,,53,70',
',,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,',
',,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,121,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,,,,,57,59,,70,51,,53,286,,42,,,,64,60,62,63,,,,',
'52,,14,,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57',
'59,,,51,138,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,140,53,70,,,,,,42,,',
',64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,',
',67,,,12,,,,,57,59,,70,51,,53,143,,42,,,,64,60,62,63,,,,,52,,14,,,,',
',41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,,,,,57,59,,70,51,,53,292,,42,,,,64,60,62,63,,,,',
'52,,14,,,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,',
',,,57,59,,70,51,,53,294,,42,,,,64,60,62,63,,,,,52,,14,,,,,,41,,48,,50',
'45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42',
',,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,,,,,57,59,,70,51,,53,360,,42,,,,64,60,62,63,,,,,52,,14,,,',
',,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,45,,49,69,65,,43',
'68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63',
',,14,,52,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,45,,49',
'69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,62,63,,,14,,52,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,',
'67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48',
',50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51,,53,70,,',
',,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,45,,49,69,65,,43,68,46,47',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,,67,,,12,57,59,,,51',
',53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,',
'43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,',
',14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62',
'63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
'62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50',
'108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,',
',,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13',
',,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48',
',50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,',
'42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66',
'13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68',
',,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,,,,,57,59,,70',
'51,,53,345,,42,,,185,64,60,62,63,,,,,52,,14,,,,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
'62,63,,,14,,52,,,,188,205,199,206,50,200,208,201,197,195,,190,203,,',
',,66,13,209,204,202,,,12,57,59,,,51,,53,70,,,,,207,189,,,,64,60,62,63',
',,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69',
'65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62',
'63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57',
'59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
'62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,62,63,,,14,,52,,,,41,,48,,50,45,,49,69,65,,43,68,46,47,,,66,13,,',
'67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,217,52,,,,41,',
'48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,',
',,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,',
',66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,',
',,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53',
'70,,,,,,42,,,,64,60,62,63,,,14,225,52,,,,41,,48,,50,108,,49,69,65,,43',
'68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14',
',52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51',
'314,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65',
',43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63',
',,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59',
',,51,313,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49',
'69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60',
'62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12',
'57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108',
',49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64',
'60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67',
',,12,,,,,57,59,,70,51,,53,316,,42,,,,64,60,62,63,,,,,52,,14,,,,,,41',
',48,,50,108,,49,69,65,,43,68,,,,,66,13,,,67,,,12,57,59,,,51,,53,70,',
',,,,42,,,,64,60,62,63,,,14,,52,,,,41,,48,,50,108,,49,69,65,,43,68,,',
',,66,13,,,67,,,12,57,59,,,51,,53,70,,,,,,42,,,,64,60,62,63,,,14,,52',
',,,188,205,199,206,50,200,208,201,197,195,,190,203,,,,,66,13,209,204',
'202,,,12,,,,,,,,70,,,,,207,189,,,,64,60,62,63,79,,,,52,258,,,,98,99',
'100,95,90,102,,106,,101,,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,',
'83,84,86,85,88,89,,81,82,79,,229,,,80,,,,98,99,100,95,90,102,,106,,101',
'87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81',
'82,79,,228,,,80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,',
',,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,,,79,,,80,,245,',
',,98,99,100,95,90,102,,106,87,101,,,91,93,92,94,,,,,,,,,,,,,,,,105,',
',,97,96,,,83,84,86,85,88,89,,81,82,79,,227,,,80,,,,98,99,100,95,90,102',
',106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92',
'94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,226,,',
'80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,87,215,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86',
'85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,87,,91,93',
'92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,',
'80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92',
'94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80',
',,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102',
',106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85',
'88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,79,101,87,,91,93',
'92,94,,,,,,,102,,106,,101,,,,,105,,,,97,96,,79,83,84,86,85,88,89,,81',
'82,105,,,,102,80,106,,101,,86,85,,,,81,82,,,87,,,80,,,,,,,,105,,,,,',
'87,,,,86,85,,,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,87,',
'91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79',
',,,,80,,,,98,99,100,95,90,102,262,106,,101,87,,91,93,92,94,,,,,,,,,',
',,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,103,,,80,,,,98,99',
'100,95,90,102,,106,79,101,87,,91,93,92,94,,,,,,,102,,106,,101,,,,,105',
',,,97,96,,,83,84,86,85,88,89,,81,82,105,,,,,80,,79,83,84,86,85,,,,81',
'82,,,87,,102,80,106,79,101,,,,,,,,,,,87,,102,,106,,101,,,,,105,,,,,',
',,83,84,86,85,,,,81,82,105,,,,,80,,79,83,84,86,85,88,89,,81,82,,,87',
',102,80,106,79,101,,,,,,,,,,,87,90,102,,106,,101,,,91,,105,,,,,,,,83',
'84,86,85,88,89,,81,82,105,,,,,80,,79,83,84,86,85,88,89,,81,82,,,87,90',
'102,80,106,79,101,,,91,,,,,,,,87,90,102,,106,,101,,,91,,105,,,,,,,,83',
'84,86,85,88,89,,81,82,105,,,,,80,,79,83,84,86,85,88,89,,81,82,,,87,90',
'102,80,106,,101,,,91,,,,,,,,87,,,,,,,,,,,105,,,,,79,,,83,84,86,85,88',
'89,,81,82,95,90,102,,106,80,101,,,91,93,92,94,,,,,,,87,,,,,,,,,105,',
',,,79,,,83,84,86,85,88,89,,81,82,95,90,102,,106,80,101,,,91,93,92,94',
',,,,,,87,,,,,,,,,105,,,,,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,',
'98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,',
'97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98,99,100,95,90,102,,106',
',101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89',
',81,82,79,,,,,80,,,,98,99,100,95,90,102,,106,,101,87,,91,93,92,94,,',
',,,,,,,,,,,,,105,,,,97,96,,,83,84,86,85,88,89,,81,82,79,,,,,80,,,,98',
'99,100,95,90,102,,106,,101,87,,91,93,92,94,,,,,,,,,,,,,,,,105,,,,97',
'96,,,83,84,86,85,88,89,,81,82,,276,205,275,206,80,273,208,277,271,270',
',272,274,,,,,,87,209,204,278,276,205,275,206,,273,208,277,271,270,,272',
'274,,,207,279,,,209,204,278,276,205,275,206,,273,208,277,271,270,,272',
'274,,,207,279,,,209,204,278,,,,,,,,,,,,,,,,207,279' ]
        racc_action_table = arr = ::Array.new(6168, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,198,197,0,129,0,195,224,202,203,295,151,114,137,234,237,237,123',
'137,295,151,224,0,234,49,49,139,121,0,129,0,139,0,0,48,0,0,0,48,0,0',
'0,0,198,197,0,0,114,195,0,202,203,0,237,254,121,237,372,372,121,0,372',
'49,372,372,49,0,336,128,336,0,0,0,0,0,304,237,131,0,304,372,45,304,259',
'160,49,372,237,372,160,372,372,240,372,372,372,49,372,372,372,372,60',
'60,372,372,201,201,372,263,45,372,5,5,45,113,5,108,5,372,162,108,199',
'200,265,372,199,200,236,372,372,372,372,235,162,5,162,372,162,142,232',
'5,142,5,201,5,5,201,5,5,5,5,5,5,5,5,147,147,5,5,162,292,5,292,269,5',
'231,201,283,285,371,371,287,5,371,288,371,371,201,5,104,291,162,5,5',
'5,5,8,8,8,8,5,154,371,293,239,239,294,223,371,102,371,298,371,371,299',
'371,371,371,300,371,371,371,371,301,302,371,371,221,306,371,73,71,371',
'61,217,319,216,369,369,321,371,369,239,369,369,239,371,214,323,46,371',
'371,371,371,212,330,331,40,371,192,369,39,339,340,342,239,369,343,369',
'347,369,369,348,369,369,369,239,369,369,369,369,349,38,369,369,355,356',
'369,359,191,369,185,185,6,1,185,376,185,369,168,380,382,384,,369,,,',
'369,369,369,369,,168,185,168,369,168,,,185,,185,,185,185,,185,185,185',
',185,185,,,,,185,185,168,,185,,,185,12,12,,,12,,12,185,167,168,168,',
',185,,,168,185,185,185,185,,167,12,167,185,167,,,12,,12,,12,12,,12,12',
'12,,12,12,,,,,12,12,167,,12,,,12,13,13,,,13,,13,12,166,167,167,,,12',
',,167,12,12,12,12,,166,13,166,12,166,,,13,,13,,13,13,,13,13,13,,13,13',
',,,,13,13,166,,13,,,13,14,14,,,14,,14,13,163,166,166,,,13,,,166,13,13',
'13,13,,163,14,163,13,163,,,14,,14,,14,14,,14,14,14,,14,14,,,,,14,14',
'163,,14,,,14,351,351,,,351,,351,14,161,,,,,14,,,163,14,14,14,14,,161',
'351,161,14,161,,,351,,351,,351,351,,351,351,351,,351,351,351,351,,,351',
'351,161,,351,,,351,338,338,,,338,,338,351,109,,,,,351,,,,351,351,351',
'351,,109,338,109,351,109,,,338,,338,,338,338,,338,338,338,,338,338,',
',,,338,338,109,,338,,,338,188,188,,,188,,188,338,107,,,,,338,,,,338',
'338,338,338,,107,188,107,338,107,,,188,,188,,188,188,,188,188,188,,188',
'188,,,,,188,188,107,,188,,,188,41,41,,,41,,41,188,,,,,,188,,,,188,188',
'188,188,,,41,,188,,,,41,,41,,41,41,,41,41,41,,41,41,,,,,41,41,,,41,',
',41,42,42,,,42,,42,41,,,,,,41,,,,41,41,41,41,,,42,,41,,,,42,,42,,42',
'42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,43,43,,,43,,43,42,,,,,,42,,',
',42,42,42,42,,,43,,42,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,',
'43,,,43,44,44,,,44,,44,43,,,,,,43,,,,43,43,43,43,,,44,,43,,,,44,,44',
',44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,189,189,,,189,,189,44,,',
',,,44,,,,44,44,44,44,,,189,,44,,,,189,,189,,189,189,,189,189,189,,189',
'189,,,,,189,189,,,189,,,189,190,190,,,190,,190,189,,,,,,189,,,,189,189',
'189,189,,,190,,189,,,,190,,190,,190,190,,190,190,190,,190,190,,,,,190',
'190,,,190,,,190,322,322,,,322,,322,190,,,,,,190,,,,190,190,190,190,',
',322,,190,,,,322,,322,,322,322,,322,322,322,,322,322,,,,,322,322,,,322',
',,322,,,,,219,219,,322,219,,219,219,,322,,,,322,322,322,322,,,,,322',
',219,,,,,,219,,219,,219,219,,219,219,219,,219,219,219,219,,,219,219',
',,219,,,219,51,51,,,51,51,51,219,,,,,,219,,,,219,219,219,219,,,51,,219',
',,,51,,51,,51,51,,51,51,51,,51,51,,,,,51,51,,,51,,,51,52,52,,,52,52',
'52,51,,,,,,51,,,,51,51,51,51,,,52,,51,,,,52,,52,,52,52,,52,52,52,,52',
'52,,,,,52,52,,,52,,,52,,,,,53,53,,52,53,,53,53,,52,,,,52,52,52,52,,',
',,52,,53,,,,,,53,,53,,53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,58',
'58,,,58,,58,53,,,,,,53,,,,53,53,53,53,,,58,,53,,,,58,,58,,58,58,,58',
'58,58,,58,58,,,,,58,58,,,58,,,58,,,,,226,226,,58,226,,226,226,,58,,',
',58,58,58,58,,,,,58,,226,,,,,,226,,226,,226,226,,226,226,226,,226,226',
'226,226,,,226,226,,,226,,,226,,,,,227,227,,226,227,,227,227,,226,,,',
'226,226,226,226,,,,,226,,227,,,,,,227,,227,,227,227,,227,227,227,,227',
'227,227,227,,,227,227,,,227,,,227,63,63,,,63,,63,227,,,,,,227,,,,227',
'227,227,227,,,63,,227,,,,63,,63,,63,63,,63,63,63,,63,63,,,,,63,63,,',
'63,,,63,,,,,308,308,,63,308,,308,308,,63,,,,63,63,63,63,,,,,63,,308',
',,,,,308,,308,,308,308,,308,308,308,,308,308,308,308,,,308,308,,,308',
',,308,72,72,,,72,,72,308,,,,,,308,,,,308,308,308,308,,,72,,308,,,,72',
',72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,307,307,,,307,,307',
'72,,,,,,72,,,,72,72,72,72,,,307,,72,,,,307,,307,,307,307,,307,307,307',
',307,307,307,307,,,307,307,,,307,,,307,74,74,,,74,,74,307,,,,,,307,',
',,307,307,307,307,,,74,,307,,,,74,,74,,74,74,,74,74,74,,74,74,74,74',
',,74,74,,,74,,,74,75,75,,,75,,75,74,,,,,,74,,,,74,74,74,74,,,75,,74',
',,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,76,76,,,76',
',76,75,,,,,,75,,,,75,75,75,75,,,76,,75,,,,76,,76,,76,76,,76,76,76,,76',
'76,76,76,,,76,76,,,76,,,76,77,77,,,77,,77,76,,,,,,76,,,,76,76,76,76',
',,77,,76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,78',
'78,,,78,,78,77,,,,,,77,,,,77,77,77,77,,,78,,77,,,,78,,78,,78,78,,78',
'78,78,,78,78,78,78,,,78,78,,,78,,,78,79,79,,,79,,79,78,,,,,,78,,,,78',
'78,78,78,,,79,,78,,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,,,79,',
',79,80,80,,,80,,80,79,,,,,,79,,,,79,79,79,79,,,80,,79,,,,80,,80,,80',
'80,,80,80,80,,80,80,,,,,80,80,,,80,,,80,81,81,,,81,,81,80,,,,,,80,,',
',80,80,80,80,,,81,,80,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,',
'81,,,81,82,82,,,82,,82,81,,,,,,81,,,,81,81,81,81,,,82,,81,,,,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,83,83,,,83,,83,82,,,,,,82',
',,,82,82,82,82,,,83,,82,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83',
',,83,,,83,84,84,,,84,,84,83,,,,,,83,,,,83,83,83,83,,,84,,83,,,,84,,84',
',84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,85,85,,,85,,85,84,,,,,,84',
',,,84,84,84,84,,,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85',
',,85,,,85,86,86,,,86,,86,85,,,,,,85,,,,85,85,85,85,,,86,,85,,,,86,,86',
',86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,87,87,,,87,,87,86,,,,,,86',
',,,86,86,86,86,,,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87',
',,87,,,87,88,88,,,88,,88,87,,,,,,87,,,,87,87,87,87,,,88,,87,,,,88,,88',
',88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,89,89,,,89,,89,88,,,,,,88',
',,,88,88,88,88,,,89,,88,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89',
',,89,,,89,90,90,,,90,,90,89,,,,,,89,,,,89,89,89,89,,,90,,89,,,,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,91,91,,,91,,91,90,,,,,,90',
',,,90,90,90,90,,,91,,90,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91',
',,91,,,91,92,92,,,92,,92,91,,,,,,91,,,,91,91,91,91,,,92,,91,,,,92,,92',
',92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,93,93,,,93,,93,92,,,,,,92',
',,,92,92,92,92,,,93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93',
',,93,,,93,94,94,,,94,,94,93,,,,,,93,,,,93,93,93,93,,,94,,93,,,,94,,94',
',94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,95,95,,,95,,95,94,,,,,,94',
',,,94,94,94,94,,,95,,94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95',
',,95,,,95,96,96,,,96,,96,95,,,,,,95,,,,95,95,95,95,,,96,,95,,,,96,,96',
',96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,97,97,,,97,,97,96,,,,,,96',
',,,96,96,96,96,,,97,,96,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,98,98,,,98,,98,97,,,,,,97,,,,97,97,97,97,,,98,,97,,,,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,99,99,,,99,,99,98,,,,,,98',
',,,98,98,98,98,,,99,,98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99',
',,99,,,99,100,100,,,100,,100,99,,,,,,99,,,,99,99,99,99,,,100,,99,,,',
'100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,101',
'101,,,101,,101,100,,,,,,100,,,,100,100,100,100,,,101,,100,,,,101,,101',
',101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,,,,,296,296,',
'101,296,,296,296,,101,,,101,101,101,101,101,,,,,101,,296,,,,,,296,,296',
',296,296,,296,296,296,,296,296,,,,,296,296,,,296,,,296,103,103,,,103',
',103,296,,,,,,296,,,,296,296,296,296,,,103,,296,,,,103,103,103,103,103',
'103,103,103,103,103,,103,103,,,,,103,103,103,103,103,,,103,289,289,',
',289,,289,103,,,,,103,103,,,,103,103,103,103,,,289,,103,,,,289,,289',
',289,289,,289,289,289,,289,289,,,,,289,289,,,289,,,289,105,105,,,105',
',105,289,,,,,,289,,,,289,289,289,289,,,105,,289,,,,105,,105,,105,105',
',105,105,105,,105,105,,,,,105,105,,,105,,,105,106,106,,,106,,106,105',
',,,,,105,,,,105,105,105,105,,,106,,105,,,,106,,106,,106,106,,106,106',
'106,,106,106,,,,,106,106,,,106,,,106,282,282,,,282,,282,106,,,,,,106',
',,,106,106,106,106,,,282,,106,,,,282,,282,,282,282,,282,282,282,,282',
'282,,,,,282,282,,,282,,,282,268,268,,,268,,268,282,,,,,,282,,,,282,282',
'282,282,,,268,,282,,,,268,,268,,268,268,,268,268,268,,268,268,,,,,268',
'268,,,268,,,268,267,267,,,267,,267,268,,,,,,268,,,,268,268,268,268,',
',267,,268,,,,267,,267,,267,267,,267,267,267,,267,267,,,,,267,267,,,267',
',,267,150,150,,,150,,150,267,,,,,,267,,,,267,267,267,267,,,150,,267',
',,,150,,150,,150,150,,150,150,150,,150,150,150,150,,,150,150,,,150,',
',150,111,111,,,111,,111,150,,,,,,150,,,,150,150,150,150,,,111,111,150',
',,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,264',
'264,,,264,,264,111,,,,,,111,,,,111,111,111,111,,,264,,111,,,,264,,264',
',264,264,,264,264,264,,264,264,,,,,264,264,,,264,,,264,258,258,,,258',
',258,264,,,,,,264,,,,264,264,264,264,,,258,,264,,,,258,,258,,258,258',
',258,258,258,,258,258,,,,,258,258,,,258,,,258,115,115,,,115,,115,258',
',,,,,258,,,,258,258,258,258,,,115,115,258,,,,115,,115,,115,115,,115',
'115,115,,115,115,,,,,115,115,,,115,,,115,228,228,,,228,,228,115,,,,',
',115,,,,115,115,115,115,,,228,,115,,,,228,,228,,228,228,,228,228,228',
',228,228,,,,,228,228,,,228,,,228,243,243,,,243,243,243,228,,,,,,228',
',,,228,228,228,228,,,243,,228,,,,243,,243,,243,243,,243,243,243,,243',
'243,,,,,243,243,,,243,,,243,230,230,,,230,,230,243,,,,,,243,,,,243,243',
'243,243,,,230,,243,,,,230,,230,,230,230,,230,230,230,,230,230,,,,,230',
'230,,,230,,,230,241,241,,,241,241,241,230,,,,,,230,,,,230,230,230,230',
',,241,,230,,,,241,,241,,241,241,,241,241,241,,241,241,,,,,241,241,,',
'241,,,241,257,257,,,257,,257,241,,,,,,241,,,,241,241,241,241,,,257,',
'241,,,,257,,257,,257,257,,257,257,257,,257,257,,,,,257,257,,,257,,,257',
'122,122,,,122,,122,257,,,,,,257,,,,257,257,257,257,,,122,,257,,,,122',
',122,,122,122,,122,122,122,,122,122,,,,,122,122,,,122,,,122,252,252',
',,252,,252,122,,,,,,122,,,,122,122,122,122,,,252,,122,,,,252,,252,,252',
'252,,252,252,252,,252,252,,,,,252,252,,,252,,,252,,,,,247,247,,252,247',
',247,247,,252,,,,252,252,252,252,,,,,252,,247,,,,,,247,,247,,247,247',
',247,247,247,,247,247,,,,,247,247,,,247,,,247,245,245,,,245,,245,247',
',,,,,247,,,,247,247,247,247,,,245,,247,,,,245,,245,,245,245,,245,245',
'245,,245,245,,,,,245,245,,,245,,,245,229,229,,,229,,229,245,,,,,,245',
',,,245,245,245,245,,,229,,245,,,,229,229,229,229,229,229,229,229,229',
'229,,229,229,,,,,229,229,229,229,229,,,229,,,,,,,,229,,,,,229,229,,',
',229,229,229,229,182,,,,229,182,,,,182,182,182,182,182,182,,182,,182',
',,182,182,182,182,,,,,,,,,,,,,,,,182,,,,182,182,,,182,182,182,182,182',
'182,,182,182,120,,120,,,182,,,,120,120,120,120,120,120,,120,,120,182',
',120,120,120,120,,,,,,,,,,,,,,,,120,,,,120,120,,,120,120,120,120,120',
'120,,120,120,119,,119,,,120,,,,119,119,119,119,119,119,,119,,119,120',
',119,119,119,119,,,,,,,,,,,,,,,,119,,,,119,119,,,119,119,119,119,119',
'119,,119,119,,,141,,,119,,141,,,,141,141,141,141,141,141,,141,119,141',
',,141,141,141,141,,,,,,,,,,,,,,,,141,,,,141,141,,,141,141,141,141,141',
'141,,141,141,118,,118,,,141,,,,118,118,118,118,118,118,,118,,118,141',
',118,118,118,118,,,,,,,,,,,,,,,,118,,,,118,118,,,118,118,118,118,118',
'118,,118,118,145,,,,,118,,,,145,145,145,145,145,145,,145,,145,118,,145',
'145,145,145,,,,,,,,,,,,,,,,145,,,,145,145,,,145,145,145,145,145,145',
',145,145,116,,116,,,145,,,,116,116,116,116,116,116,,116,,116,145,,116',
'116,116,116,,,,,,,,,,,,,,,,116,,,,116,116,,,116,116,116,116,116,116',
',116,116,110,,,,,116,,,,110,110,110,110,110,110,,110,,110,116,110,110',
'110,110,110,,,,,,,,,,,,,,,,110,,,,110,110,,,110,110,110,110,110,110',
',110,110,312,,,,,110,,,,312,312,312,312,312,312,,312,,312,110,,312,312',
'312,312,,,,,,,,,,,,,,,,312,,,,312,312,,,312,312,312,312,312,312,,312',
'312,152,,,,,312,,,,152,152,152,152,152,152,,152,,152,312,,152,152,152',
'152,,,,,,,,,,,,,,,,152,,,,152,152,,,152,152,152,152,152,152,,152,152',
'315,,,,,152,,,,315,315,315,315,315,315,,315,,315,152,,315,315,315,315',
',,,,,,,,,,,,,,,315,,,,315,315,,,315,315,315,315,315,315,,315,315,320',
',,,,315,,,,320,320,320,320,320,320,,320,,320,315,,320,320,320,320,,',
',,,,,,,,,,,,,320,,,,320,320,,,320,320,320,320,320,320,,320,320,211,',
',,,320,,,,211,211,211,211,211,211,,211,,211,320,,211,211,211,211,,,',
',,,,,,,,,,,,211,,,,211,211,,,211,211,211,211,211,211,,211,211,328,,',
',,211,,,,328,328,328,328,328,328,,328,,328,211,,328,328,328,328,,,,',
',,,,,,,,,,,328,,,,328,328,,,328,328,328,328,328,328,,328,328,329,,,',
',328,,,,329,329,329,329,329,329,,329,164,329,328,,329,329,329,329,,',
',,,,164,,164,,164,,,,,329,,,,329,329,,165,329,329,329,329,329,329,,329',
'329,164,,,,165,329,165,,165,,164,164,,,,164,164,,,329,,,164,,,,,,,,165',
',,,,,164,,,,165,165,,,,165,165,335,,,,,165,,,,335,335,335,335,335,335',
',335,,335,165,,335,335,335,335,,,,,,,,,,,,,,,,335,,,,335,335,,,335,335',
'335,335,335,335,,335,335,187,,,,,335,,,,187,187,187,187,187,187,187',
'187,,187,335,,187,187,187,187,,,,,,,,,,,,,,,,187,,,,187,187,,,187,187',
'187,187,187,187,,187,187,11,,11,,,187,,,,11,11,11,11,11,11,,11,169,11',
'187,,11,11,11,11,,,,,,,169,,169,,169,,,,,11,,,,11,11,,,11,11,11,11,11',
'11,,11,11,169,,,,,11,,170,169,169,169,169,,,,169,169,,,11,,170,169,170',
'171,170,,,,,,,,,,,169,,171,,171,,171,,,,,170,,,,,,,,170,170,170,170',
',,,170,170,171,,,,,170,,172,171,171,171,171,171,171,,171,171,,,170,',
'172,171,172,173,172,,,,,,,,,,,171,173,173,,173,,173,,,173,,172,,,,,',
',,172,172,172,172,172,172,,172,172,173,,,,,172,,174,173,173,173,173',
'173,173,,173,173,,,172,174,174,173,174,175,174,,,174,,,,,,,,173,175',
'175,,175,,175,,,175,,174,,,,,,,,174,174,174,174,174,174,,174,174,175',
',,,,174,,176,175,175,175,175,175,175,,175,175,,,174,176,176,175,176',
',176,,,176,,,,,,,,175,,,,,,,,,,,176,,,,,177,,,176,176,176,176,176,176',
',176,176,177,177,177,,177,176,177,,,177,177,177,177,,,,,,,176,,,,,,',
',,177,,,,,178,,,177,177,177,177,177,177,,177,177,178,178,178,,178,177',
'178,,,178,178,178,178,,,,,,,177,,,,,,,,,178,,,,,178,,,178,178,178,178',
'178,178,,178,178,179,,,,,178,,,,179,179,179,179,179,179,,179,,179,178',
',179,179,179,179,,,,,,,,,,,,,,,,179,,,,179,179,,,179,179,179,179,179',
'179,,179,179,180,,,,,179,,,,180,180,180,180,180,180,,180,,180,179,,180',
'180,180,180,,,,,,,,,,,,,,,,180,,,,180,180,,,180,180,180,180,180,180',
',180,180,181,,,,,180,,,,181,181,181,181,181,181,,181,,181,180,,181,181',
'181,181,,,,,,,,,,,,,,,,181,,,,181,181,,,181,181,181,181,181,181,,181',
'181,136,,,,,181,,,,136,136,136,136,136,136,,136,,136,181,,136,136,136',
'136,,,,,,,,,,,,,,,,136,,,,136,136,,,136,136,136,136,136,136,,136,136',
',261,261,261,261,136,261,261,261,261,261,,261,261,,,,,,136,261,261,261',
'266,266,266,266,,266,266,266,266,266,,266,266,,,261,261,,,266,266,266',
'210,210,210,210,,210,210,210,210,210,,210,210,,,266,266,,,210,210,210',
',,,,,,,,,,,,,,,210,210' ]
        racc_action_check = arr = ::Array.new(6168, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   285,   nil,   nil,   nil,   110,   272,   nil,   123,   nil,
   nil,  5447,   334,   388,   442,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   248,   182,
   223,   658,   712,   766,   820,    74,   196,   nil,    -1,    23,
   nil,  1094,  1148,  1206,   nil,   nil,   nil,   nil,  1260,   nil,
   100,   199,   nil,  1430,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   222,  1542,   209,  1650,  1704,  1758,  1812,  1866,  1920,
  1974,  2028,  2082,  2136,  2190,  2244,  2298,  2352,  2406,  2460,
  2514,  2568,  2622,  2676,  2730,  2784,  2838,  2892,  2946,  3000,
  3054,  3108,   160,  3220,   172,  3328,  3382,   608,    81,   554,
  4830,  3652,   nil,   107,   -22,  3814,  4773,   nil,  4659,  4543,
  4486,    20,  4138,    -7,   nil,   nil,   nil,   nil,    44,    -7,
   nil,    58,   nil,   nil,   nil,   nil,  6021,     7,   nil,    20,
   nil,  4602,   130,   nil,   nil,  4716,   nil,   152,   nil,   nil,
  3598,   -14,  4944,   nil,   180,   nil,   nil,   nil,   nil,   nil,
    78,   500,   114,   446,  5246,  5276,   392,   338,   284,  5464,
  5511,  5528,  5575,  5592,  5639,  5656,  5703,  5748,  5793,  5850,
  5907,  5964,  4429,   nil,   nil,   280,   nil,  5390,   604,   874,
   928,   239,   238,   nil,   nil,    -4,   nil,    -8,    -9,    86,
    87,   104,    -2,    -1,   nil,   nil,   nil,   nil,   nil,   nil,
  6098,  5115,   198,   nil,   215,   nil,   215,   155,   nil,  1040,
   nil,   206,   nil,   183,    -4,   nil,  1318,  1376,  3868,  4358,
  3976,   125,   103,   nil,   -11,   125,   120,    14,   nil,   193,
    53,  4030,   nil,  3922,   nil,  4304,   nil,  4250,   nil,   nil,
   nil,   nil,  4192,   nil,    43,   nil,   nil,  4084,  3760,    72,
   nil,  6054,   nil,   100,  3706,   115,  6076,  3544,  3490,   152,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  3436,   142,   nil,   160,   nil,   102,   140,  3274,
   nil,   172,   129,   185,   165,    -1,  3166,   nil,   161,   193,
   168,   205,   207,   nil,    40,   nil,   207,  1596,  1488,   nil,
   nil,   nil,  4887,   nil,   nil,  5001,   nil,   nil,   nil,   200,
  5058,   221,   982,   227,   nil,   nil,   nil,   nil,  5172,  5229,
   237,   177,   nil,   nil,   nil,  5333,    36,   nil,   550,   245,
   222,   nil,   247,   250,   nil,   nil,   nil,   251,   254,   263,
   nil,   496,   nil,   nil,   nil,   250,   268,   nil,   nil,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   226,
   nil,   168,    56,   nil,   nil,   nil,   278,   nil,   nil,   nil,
   282,   nil,   283,   nil,   284,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -223,  -224,    -1,    -2,    -3,    -4,    -5,    -8,   -10,   -11,
   -16,  -107,  -224,  -224,  -224,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -66,   -67,   -72,   -73,
   -77,  -224,  -224,  -224,  -224,  -224,  -118,  -120,  -224,  -224,
  -165,  -224,  -224,  -224,  -178,  -179,  -180,  -181,  -224,  -183,
  -224,  -193,  -196,  -224,  -198,  -199,  -200,  -201,  -202,  -203,
  -204,  -224,  -224,    -7,  -224,  -224,  -224,  -224,  -224,  -224,
  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,  -224,
  -224,  -224,  -224,  -127,  -122,  -223,  -223,   -28,  -224,   -35,
  -224,  -224,   -74,  -224,  -224,  -224,  -224,   -84,  -224,  -224,
  -224,  -224,  -224,  -223,  -137,  -156,  -157,  -119,  -223,  -223,
  -146,  -148,  -149,  -150,  -151,  -152,   -43,  -224,  -168,  -224,
  -171,  -224,  -224,  -174,  -175,  -187,  -182,  -224,  -190,  -191,
  -224,  -224,  -197,   390,    -6,    -9,   -12,   -13,   -14,   -15,
  -224,   -18,   -19,   -20,   -21,   -22,   -23,   -24,   -25,   -26,
   -27,   -29,   -30,   -31,   -32,   -33,   -34,   -36,   -37,   -38,
   -39,   -40,  -224,   -41,  -102,  -224,   -78,  -224,  -216,  -222,
  -210,  -207,  -205,  -116,  -128,  -199,  -131,  -203,  -224,  -213,
  -211,  -219,  -201,  -202,  -209,  -214,  -215,  -217,  -218,  -220,
  -127,  -126,  -224,  -125,  -224,   -42,  -205,   -69,   -79,  -224,
   -82,  -205,  -161,  -164,  -224,   -76,  -224,  -224,  -224,  -127,
  -224,  -207,  -223,  -158,  -224,  -224,  -224,  -224,  -154,  -224,
  -224,  -224,  -166,  -224,  -169,  -224,  -172,  -224,  -184,  -185,
  -186,  -188,  -224,  -192,  -205,  -194,   -17,  -224,  -224,  -205,
  -104,  -127,  -115,  -224,  -208,  -224,  -206,  -224,  -224,  -205,
  -130,  -132,  -210,  -211,  -212,  -213,  -216,  -219,  -221,  -222,
  -123,  -124,  -206,  -224,   -71,  -224,   -81,  -224,  -206,  -224,
   -75,  -224,   -87,  -224,   -93,  -224,  -224,   -97,  -207,  -205,
  -207,  -224,  -224,  -140,  -224,  -159,  -205,  -223,  -224,  -147,
  -155,  -153,   -44,  -167,  -170,  -177,  -173,  -176,  -189,  -224,
  -106,  -224,  -206,  -205,  -110,  -117,  -111,  -129,  -133,  -134,
  -224,   -68,   -80,   -83,  -162,  -163,   -87,   -86,  -224,  -224,
   -93,   -92,  -224,  -224,  -101,   -96,   -98,  -224,  -224,  -224,
  -113,  -223,  -141,  -142,  -143,  -224,  -224,  -138,  -139,  -224,
  -145,  -195,  -103,  -105,  -114,  -121,   -70,   -85,   -88,  -224,
   -91,  -224,  -224,  -108,  -109,  -112,  -224,  -160,  -135,  -144,
  -224,   -90,  -224,   -95,  -224,  -100,  -136,   -89,   -94,   -99 ]

racc_goto_table = [
     2,   112,     4,   144,   107,   109,   110,   128,   146,   191,
   184,   134,   192,   263,   221,   132,   337,   341,   232,   309,
   356,   310,     1,   235,   156,   157,   158,   159,   231,    73,
   259,   297,   325,   116,   118,   119,   120,   261,   265,   212,
   214,   343,   327,   136,   136,   141,   296,   368,   218,   302,
   145,   254,   352,   301,   236,   152,   183,   334,   142,   155,
   367,   148,   283,   370,   376,   149,     3,   287,   251,   252,
   250,   136,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   182,   260,   187,   154,   211,   211,   346,
   319,   137,   139,   136,   150,   321,   nil,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   187,   330,   nil,   nil,   nil,   269,
   347,   nil,   349,   nil,   nil,   233,   nil,   nil,   nil,   160,
   233,   238,   nil,   nil,   306,   298,   300,   nil,   299,   nil,
   nil,   nil,   nil,   nil,   nil,   348,   nil,   nil,   nil,   nil,
   253,   nil,   355,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   216,   nil,   134,   nil,   224,   nil,   132,   nil,   364,
   323,   nil,   nil,   nil,   nil,   nil,   nil,   182,   nil,   284,
   116,   118,   119,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   317,   nil,   134,
   nil,   134,   318,   132,   nil,   132,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   285,
   136,   187,   187,   nil,   nil,   nil,   291,   293,   nil,   nil,
   nil,   363,   nil,   312,   303,   312,   nil,   315,   nil,   141,
   nil,   nil,   nil,   nil,   145,   nil,   nil,   nil,   nil,   312,
   320,   nil,   nil,   nil,   nil,   nil,   187,   nil,   nil,   328,
   329,   nil,   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   312,   nil,   nil,   nil,   nil,   nil,
   nil,   335,   nil,   nil,   nil,   nil,   nil,   nil,   136,   nil,
   nil,   nil,   nil,   366,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   359,   358,
   nil,   nil,   nil,   nil,   182,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   116,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   358,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   380,
   nil,   382,   384 ]

racc_goto_check = [
     2,    39,     4,    76,    10,    10,    10,    64,    81,    54,
    51,    31,    56,    55,    44,    37,    46,    47,    65,    72,
    66,    72,     1,    65,     8,     8,     8,     8,    54,     6,
    52,    49,    57,    10,    10,    10,    10,    58,    38,    60,
    60,    50,    61,    10,    10,    10,    48,    45,    43,    68,
    10,    44,    69,    55,    71,    10,    13,    74,    75,     7,
    46,    77,    38,    47,    66,    78,     3,    38,    82,    83,
    85,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    51,    10,     6,    10,    10,    49,
    38,    12,    12,    10,    86,    38,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,    10,    38,   nil,   nil,   nil,    56,
    55,   nil,    55,   nil,   nil,     4,   nil,   nil,   nil,    12,
     4,     4,   nil,   nil,    44,    54,    54,   nil,    56,   nil,
   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,
     2,   nil,    38,   nil,   nil,   nil,   nil,   nil,    64,   nil,
   nil,    12,   nil,    31,   nil,    12,   nil,    37,   nil,    38,
    56,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,    39,
    10,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    76,   nil,    31,
   nil,    31,    81,    37,   nil,    37,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
    10,    10,    10,   nil,   nil,   nil,     2,     2,   nil,   nil,
   nil,    51,   nil,    10,     4,    10,   nil,    10,   nil,    10,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,    10,
    10,   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,     4,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    22,     0,    66,     2,   nil,    24,   -15,   -51,   nil,
    -8,   nil,    50,   -45,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -38,   nil,   nil,   nil,   nil,   nil,   -34,  -154,   -38,
   nil,   nil,   nil,   -65,  -100,  -291,  -276,  -277,  -182,  -197,
  -254,   -91,  -155,   nil,   -94,  -178,   -91,  -232,  -150,   nil,
   -66,  -224,   nil,   nil,   -41,  -105,  -287,   nil,  -183,  -252,
   nil,   -75,  -218,   nil,  -231,     5,   -50,     1,     5,   nil,
   nil,   -50,   -79,   -78,   nil,   -77,    43 ]

racc_goto_default = [
   nil,   nil,   357,   nil,   213,     5,     6,     7,     8,     9,
    11,    10,   295,   nil,    15,    38,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,   nil,   nil,
    39,    40,   113,   nil,   nil,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    44,   nil,   nil,   nil,   193,   nil,   104,
   nil,   194,   198,   196,   124,   nil,   nil,   123,   nil,   nil,
   129,   nil,   130,   131,   222,   nil,   nil,    54,    55,    56,
    58,   nil,   nil,   nil,   147,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 86, :_reduce_1,
  1, 86, :_reduce_2,
  1, 86, :_reduce_none,
  1, 87, :_reduce_4,
  1, 90, :_reduce_5,
  3, 90, :_reduce_6,
  2, 90, :_reduce_7,
  1, 91, :_reduce_8,
  3, 91, :_reduce_9,
  1, 92, :_reduce_none,
  1, 93, :_reduce_11,
  3, 93, :_reduce_12,
  3, 93, :_reduce_13,
  3, 93, :_reduce_14,
  3, 93, :_reduce_15,
  1, 95, :_reduce_none,
  4, 95, :_reduce_17,
  3, 95, :_reduce_18,
  3, 95, :_reduce_19,
  3, 95, :_reduce_20,
  3, 95, :_reduce_21,
  3, 95, :_reduce_22,
  3, 95, :_reduce_23,
  3, 95, :_reduce_24,
  3, 95, :_reduce_25,
  3, 95, :_reduce_26,
  3, 95, :_reduce_27,
  2, 95, :_reduce_28,
  3, 95, :_reduce_29,
  3, 95, :_reduce_30,
  3, 95, :_reduce_31,
  3, 95, :_reduce_32,
  3, 95, :_reduce_33,
  3, 95, :_reduce_34,
  2, 95, :_reduce_35,
  3, 95, :_reduce_36,
  3, 95, :_reduce_37,
  3, 95, :_reduce_38,
  3, 95, :_reduce_39,
  3, 95, :_reduce_40,
  3, 95, :_reduce_41,
  3, 95, :_reduce_42,
  1, 97, :_reduce_43,
  3, 97, :_reduce_44,
  1, 96, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 117, :_reduce_66,
  1, 117, :_reduce_67,
  5, 99, :_reduce_68,
  3, 99, :_reduce_69,
  6, 99, :_reduce_70,
  4, 99, :_reduce_71,
  1, 99, :_reduce_72,
  1, 103, :_reduce_73,
  2, 103, :_reduce_74,
  4, 125, :_reduce_75,
  3, 125, :_reduce_76,
  1, 125, :_reduce_77,
  3, 126, :_reduce_78,
  2, 124, :_reduce_79,
  3, 128, :_reduce_80,
  2, 128, :_reduce_81,
  2, 127, :_reduce_82,
  4, 127, :_reduce_83,
  2, 106, :_reduce_84,
  5, 130, :_reduce_85,
  4, 130, :_reduce_86,
  0, 131, :_reduce_none,
  2, 131, :_reduce_88,
  4, 131, :_reduce_89,
  3, 131, :_reduce_90,
  6, 107, :_reduce_91,
  5, 107, :_reduce_92,
  0, 132, :_reduce_none,
  4, 132, :_reduce_94,
  3, 132, :_reduce_95,
  5, 105, :_reduce_96,
  1, 133, :_reduce_97,
  2, 133, :_reduce_98,
  5, 134, :_reduce_99,
  4, 134, :_reduce_100,
  1, 135, :_reduce_101,
  1, 98, :_reduce_none,
  4, 98, :_reduce_103,
  1, 137, :_reduce_104,
  3, 137, :_reduce_105,
  3, 136, :_reduce_106,
  1, 94, :_reduce_107,
  6, 94, :_reduce_108,
  6, 94, :_reduce_109,
  5, 94, :_reduce_110,
  5, 94, :_reduce_111,
  6, 94, :_reduce_112,
  5, 94, :_reduce_113,
  4, 142, :_reduce_114,
  1, 143, :_reduce_115,
  1, 139, :_reduce_116,
  3, 139, :_reduce_117,
  1, 138, :_reduce_118,
  2, 138, :_reduce_119,
  1, 138, :_reduce_120,
  6, 104, :_reduce_121,
  2, 104, :_reduce_122,
  3, 144, :_reduce_123,
  3, 144, :_reduce_124,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 141, :_reduce_127,
  1, 141, :_reduce_128,
  3, 141, :_reduce_129,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 146, :_reduce_133,
  3, 146, :_reduce_134,
  6, 108, :_reduce_135,
  7, 109, :_reduce_136,
  1, 152, :_reduce_137,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_141,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  6, 110, :_reduce_144,
  5, 110, :_reduce_145,
  1, 155, :_reduce_146,
  3, 155, :_reduce_147,
  1, 157, :_reduce_148,
  1, 157, :_reduce_149,
  1, 157, :_reduce_150,
  1, 157, :_reduce_none,
  1, 158, :_reduce_152,
  3, 158, :_reduce_153,
  1, 156, :_reduce_none,
  2, 156, :_reduce_155,
  1, 149, :_reduce_156,
  1, 149, :_reduce_157,
  1, 150, :_reduce_158,
  2, 150, :_reduce_159,
  4, 150, :_reduce_160,
  1, 129, :_reduce_161,
  3, 129, :_reduce_162,
  3, 159, :_reduce_163,
  1, 159, :_reduce_164,
  1, 102, :_reduce_165,
  3, 112, :_reduce_166,
  4, 112, :_reduce_167,
  2, 112, :_reduce_168,
  3, 112, :_reduce_169,
  4, 112, :_reduce_170,
  2, 112, :_reduce_171,
  3, 115, :_reduce_172,
  4, 115, :_reduce_173,
  2, 115, :_reduce_174,
  1, 160, :_reduce_175,
  3, 160, :_reduce_176,
  3, 161, :_reduce_177,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 122, :_reduce_none,
  1, 162, :_reduce_181,
  2, 163, :_reduce_182,
  1, 165, :_reduce_183,
  1, 167, :_reduce_184,
  1, 168, :_reduce_185,
  2, 166, :_reduce_186,
  1, 169, :_reduce_187,
  1, 170, :_reduce_188,
  2, 170, :_reduce_189,
  2, 164, :_reduce_190,
  2, 164, :_reduce_191,
  3, 88, :_reduce_192,
  0, 171, :_reduce_193,
  2, 171, :_reduce_194,
  4, 171, :_reduce_195,
  1, 111, :_reduce_196,
  2, 111, :_reduce_197,
  1, 118, :_reduce_198,
  1, 121, :_reduce_199,
  1, 119, :_reduce_200,
  1, 120, :_reduce_201,
  1, 114, :_reduce_202,
  1, 113, :_reduce_203,
  1, 116, :_reduce_204,
  0, 123, :_reduce_none,
  1, 123, :_reduce_206,
  0, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 89, :_reduce_223 ]

racc_reduce_n = 224

racc_shift_n = 390

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :DELETES => 17,
  :LESSEQUAL => 18,
  :NOTEQUAL => 19,
  :DOT => 20,
  :COLON => 21,
  :LLCOLLECT => 22,
  :RRCOLLECT => 23,
  :QMARK => 24,
  :LPAREN => 25,
  :RPAREN => 26,
  :ISEQUAL => 27,
  :GREATEREQUAL => 28,
  :GREATERTHAN => 29,
  :LESSTHAN => 30,
  :IF => 31,
  :ELSE => 32,
  :DEFINE => 33,
  :ELSIF => 34,
  :VARIABLE => 35,
  :CLASS => 36,
  :INHERITS => 37,
  :NODE => 38,
  :BOOLEAN => 39,
  :NAME => 40,
  :SEMIC => 41,
  :CASE => 42,
  :DEFAULT => 43,
  :AT => 44,
  :ATAT => 45,
  :LCOLLECT => 46,
  :RCOLLECT => 47,
  :CLASSREF => 48,
  :NOT => 49,
  :OR => 50,
  :AND => 51,
  :UNDEF => 52,
  :PARROW => 53,
  :PLUS => 54,
  :MINUS => 55,
  :TIMES => 56,
  :DIV => 57,
  :LSHIFT => 58,
  :RSHIFT => 59,
  :UMINUS => 60,
  :MATCH => 61,
  :NOMATCH => 62,
  :REGEX => 63,
  :IN_EDGE => 64,
  :OUT_EDGE => 65,
  :IN_EDGE_SUB => 66,
  :OUT_EDGE_SUB => 67,
  :IN => 68,
  :UNLESS => 69,
  :PIPE => 70,
  :LAMBDA => 71,
  :SELBRACE => 72,
  :NUMBER => 73,
  :HEREDOC => 74,
  :RENDER_STRING => 75,
  :RENDER_EXPR => 76,
  :EPP_START => 77,
  :LOW => 78,
  :HIGH => 79,
  :CALL => 80,
  :LISTSTART => 81,
  :MODULO => 82,
  :TITLE_COLON => 83,
  :CASE_COLON => 84 }

racc_nt_base = 85

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "LOW",
  "HIGH",
  "CALL",
  "LISTSTART",
  "MODULO",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "epp_parameters_list" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 64)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_2(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 77)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_11(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_15(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_17(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_18(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_19(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_20(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_21(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_22(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_23(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_24(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_25(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_26(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_27(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_28(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_29(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_30(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_31(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_32(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_33(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_34(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_35(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_36(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 120)
  def _reduce_37(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 121)
  def _reduce_38(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 122)
  def _reduce_39(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_40(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 124)
  def _reduce_41(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 133)
  def _reduce_43(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_44(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

module_eval(<<'.,.,', 'egrammar.ra', 166)
  def _reduce_66(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_67(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_70(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_71(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_72(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_73(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_74(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_76(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_77(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_78(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_81(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_82(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_83(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 241)
  def _reduce_84(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_85(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 87 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_90(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_91(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_92(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_94(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_95(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_96(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_97(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_98(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_100(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_103(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_104(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_105(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_106(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_107(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 375)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_111(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_112(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        result.form = val[0]
        loc result, val[1], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_113(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 421)
  def _reduce_114(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_116(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_117(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_118(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_119(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_120(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[2], nil))
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_156(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_157(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_158(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_159(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_161(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_162(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 605)
  def _reduce_163(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_164(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_165(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_166(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_167(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_168(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_169(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_170(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_171(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_172(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_173(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_174(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_175(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_176(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_177(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 178 omitted

# reduce 179 omitted

# reduce 180 omitted

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_181(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_182(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_183(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_186(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_187(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_188(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_189(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_190(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_191(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_192(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_193(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_194(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_195(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_196(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_197(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_198(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_199(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_200(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_201(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_202(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 205 omitted

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_206(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

# reduce 210 omitted

# reduce 211 omitted

# reduce 212 omitted

# reduce 213 omitted

# reduce 214 omitted

# reduce 215 omitted

# reduce 216 omitted

# reduce 217 omitted

# reduce 218 omitted

# reduce 219 omitted

# reduce 220 omitted

# reduce 221 omitted

# reduce 222 omitted

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_223(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
