#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 759)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'61,64,322,-241,62,56,283,57,-242,83,-230,-129,241,138,158,378,323,397',
'374,280,373,-244,283,104,18,107,282,102,103,338,42,283,45,242,47,12',
'-243,46,36,39,339,44,37,10,11,-241,139,69,17,106,-242,38,-230,-129,15',
'16,75,76,77,90,89,281,70,-244,85,86,114,257,43,254,258,84,35,65,-239',
'67,68,66,-243,304,48,49,51,50,52,53,54,61,64,55,278,62,56,317,57,91',
'83,116,61,64,259,113,62,272,273,78,80,79,81,115,104,18,107,345,102,103',
'-239,42,312,45,82,47,118,347,46,36,39,241,44,37,374,82,373,82,69,17',
'106,82,38,74,69,15,16,334,87,88,90,89,242,70,331,85,86,114,355,43,110',
'356,84,35,65,278,67,68,241,261,260,48,49,51,50,52,53,54,61,64,55,69',
'62,56,279,57,91,83,116,242,358,259,113,114,305,361,254,317,366,367,115',
'104,18,107,114,102,103,307,42,254,45,253,47,12,252,46,36,39,72,44,37',
'10,11,371,116,69,17,106,113,38,311,375,15,16,377,116,115,90,89,113,70',
'321,85,86,114,230,43,115,233,84,35,65,384,67,68,231,386,241,48,49,51',
'50,52,53,54,61,64,55,278,62,56,230,57,91,83,116,82,82,220,113,114,219',
'390,74,124,393,278,115,104,18,107,124,102,103,396,42,155,45,318,47,12',
'317,46,36,39,153,44,37,10,11,400,116,69,17,106,113,38,377,364,15,16',
'402,403,115,404,125,407,70,408,85,86,409,124,43,82,74,84,35,65,417,67',
'68,71,419,420,48,49,51,50,52,53,54,61,64,55,421,62,56,307,57,327,83',
',,,,,,,,,,,,,104,18,107,,102,103,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,69,17,106,,38,,,15,16,,,,,,,70,,,,,,43,,,84,35,65,,67,68,,,,48',
'49,51,50,52,53,54,61,64,55,,62,56,,57,413,83,,,,,,,,,,,,,,104,18,107',
',102,103,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,106,,38,,,15',
'16,,87,88,90,89,,70,,85,86,,,43,,,84,35,65,,67,68,,,,48,49,51,50,52',
'53,54,61,64,55,83,62,56,,57,91,83,,,,,,,,104,,107,,102,103,104,18,107',
',102,103,,42,241,45,,47,118,,46,36,39,,44,37,106,69,,,69,17,106,,38',
'242,,15,16,,,241,,,,70,,,84,234,,43,,,69,35,65,,67,68,,,242,48,49,51',
'50,52,53,54,61,64,55,,62,56,270,57,,83,,,,,,,,,,,,,,104,18,107,,102',
'103,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,106,,38,,,15,16,,',
',,,,70,,85,86,,,43,,,84,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55',
',62,56,,57,,83,,,,,,,,,,,,,,104,18,107,,102,103,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,69,17,106,,38,,,15,16,,,,,,,70,,85,86,,,43,,,84,35',
'65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,296,188,295,189',
',293,191,297,,290,,292,294,,,,18,,,192,187,298,42,,45,291,47,12,,46',
'36,39,,44,37,10,11,190,299,69,17,,,38,,,15,16,,,302,303,301,300,70,',
',,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,296',
'188,295,189,,293,191,297,,290,,292,294,,,,18,,,192,187,298,42,,45,291',
'47,118,,46,36,39,,44,37,,,190,299,69,17,,,38,,,15,16,,,302,303,301,300',
'70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,',
'57,296,188,295,189,,293,191,297,,290,,292,294,,,,18,,,192,187,298,42',
',45,291,47,118,,46,36,39,,44,37,,,190,299,69,17,,,38,,,15,16,,,302,303',
'301,300,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55',
',62,56,,57,296,188,295,189,,293,191,297,,290,,292,294,,,,18,,,192,187',
'298,42,,45,291,47,118,,46,36,39,,44,37,,,190,299,69,17,,,38,,,15,16',
',,302,303,301,300,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,83,,,,,,,,,,,,,,104,18,107,,102,103,,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,69,17,106,,38,,,15,16,,,,,,,70,,,,,,43,',
',,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,411,83,,',
',,,,,,,,,,,104,18,107,,102,103,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,69,17,106,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51',
'50,52,53,54,61,64,55,,62,56,,57,406,83,,,,,,,,,,,,,,104,18,107,,102',
'103,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,106,,38,,,15,16,,',
',,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62',
'56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69',
'17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53',
'54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36',
'39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,',
',48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42',
',45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43',
',,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,340,,,,',
',,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38',
',,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61',
'64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44',
'37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49',
'51,50,52,53,54,61,64,55,,62,56,142,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43',
',,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,144,57,,,,,',
',,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38',
',,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61',
'64,55,,62,56,,57,146,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,',
',,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,',
',43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,',
',15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64',
'55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37',
'10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49',
'51,50,52,53,54,61,64,55,,62,56,,157,,,,,,,,,,,,,,,,,18,,,,,,42,,45,',
'47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35',
'65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,',
',,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16',
',,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62',
'56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50',
'52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118',
',46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67',
'68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,',
',,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70',
',,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57',
',,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17',
',,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,',
',,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,',
',43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38',
',,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61',
'64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48',
'49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43',
',,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,',
',,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,',
'15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64',
'55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,174,188,180,189,47,181,191,182',
'36,173,,176,171,,,,,69,17,192,187,172,,,15,170,,,,,,,70,,,,,190,175',
',,,35,65,,67,68,,,,183,184,186,185,52,53,54,61,64,55,,62,56,,57,,,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,',
',15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64',
'55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37',
',,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51',
'50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118',
',46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67',
'68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,',
',,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,',
',,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,',
',,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38',
',,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61',
'64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44',
'37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49',
'51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47',
'118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65',
',67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18',
',,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70',
',,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57',
',,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,',
'38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39',
',44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48',
'49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45',
',47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,',
'35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,',
',,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16',
',,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62',
'56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69',
'17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53',
'54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36',
'39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,',
',48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42',
',45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43',
',,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,',
',,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15',
'16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55',
',62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,',
',,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50',
'52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118',
',46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67',
'68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,',
',,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,',
',,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,',
',,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38',
',,15,16,,,,,,,70,,,,,,43,,,216,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,218,,,,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68',
',,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,',
'42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,',
',43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,',
',15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64',
'55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37',
',,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51',
'50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118',
',46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67',
'68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,',
',,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,',
',,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,',
',279,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17',
',,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39',
',44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48',
'49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43',
',,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,',
',,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15',
'16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55',
',62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,',
',,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50',
'52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118',
',46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67',
'68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,146,,,,,,,,,,,,,,,,18',
',,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,',
',70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56',
',57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17',
',,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,',
',,48,49,51,50,52,53,54,61,64,55,,62,56,,57,315,,,,,,,,,,,,,,,,18,,,',
',,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70',
',,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57',
',,,,,,,,,,,,,,,,18,246,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,69',
'17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53',
'54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68',
',,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,',
'42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,',
',43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,',
',,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,',
',15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64',
'55,,62,56,,57,379,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44',
'37,,,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49',
'51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,,,,70,,,,,,43,,,,35',
'65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56,,57,,,,,,,,,,,,,,',
',,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17,,,38,,,15,16,,,',
',,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54,61,64,55,,62,56',
',57,,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,118,,46,36,39,,44,37,,,,,69,17',
',,38,,,15,16,,,,,,,70,,,,,,43,,,,35,65,,67,68,,,,48,49,51,50,52,53,54',
'61,64,55,,62,56,,57,325,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,69,17,,,38,,,15,16,,,,61,64,,70,62,,,,,43,,,,35,65',
'83,67,68,,,,48,49,51,50,52,53,54,94,104,55,107,,102,103,83,95,,,138',
',,135,,,,,99,94,104,308,107,,102,103,106,95,97,96,98,,,70,87,88,90,89',
'92,93,,85,86,139,65,,106,,84,,101,100,,,87,88,90,89,92,93,,85,86,83',
',249,,,84,,,,91,,,99,94,104,,107,,102,103,,95,97,96,98,,61,64,,91,62',
',,,,,,,,,106,,,,101,100,,,87,88,90,89,92,93,,85,86,83,,248,,,84,,,138',
',,135,99,94,104,,107,,102,103,,95,97,96,98,,61,64,,91,62,70,,,,,,,,',
'106,139,65,,101,100,,,87,88,90,89,92,93,,85,86,83,,247,,,84,,,138,,',
'135,99,94,104,,107,,102,103,,95,97,96,98,,,,,91,,70,,,,,,,,,106,139',
'65,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102,103',
',95,97,96,98,,,,,,,,,,,,,,,91,106,,,,101,100,,83,87,88,90,89,92,93,',
'85,86,,,99,94,104,84,107,,102,103,,95,97,96,98,,,,,,,,,,,,,,,91,106',
',,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,,102,103',
',95,97,96,98,,272,273,,,,,,,,,,,,91,106,,,,101,100,,83,87,88,90,89,92',
'93,,85,86,,,99,94,104,84,107,,102,103,,95,97,96,98,,,,,,,,,,,,,,,91',
'106,,,,101,100,,,87,88,90,89,92,93,83,85,86,,,284,,,84,,,,99,94,104',
',107,,102,103,,95,97,96,98,,,,,,,,91,,,,,,,,106,,,,101,100,,83,87,88',
'90,89,92,93,,85,86,,,99,94,104,84,107,,102,103,,95,97,96,98,,,,,,,,',
',,,,,,91,106,,,,,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107',
',102,103,,95,97,96,98,,,,,,,,,,,,,,,91,106,,,,,83,,,87,88,90,89,92,93',
',85,86,99,94,104,276,107,84,102,103,,95,97,96,98,,,,,,,,,,,,,,,,106',
'91,,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,83,102',
'103,,95,97,96,98,,,,,,94,104,,107,,102,103,,95,91,106,,,,101,100,,,87',
'88,90,89,92,93,,85,86,106,,,,,84,,83,87,88,90,89,92,93,,85,86,,,,94',
'104,84,107,,102,103,,95,91,,,,,,,,,,,,,,,,,91,106,,,,,83,,,87,88,90',
'89,92,93,,85,86,99,94,104,,107,84,102,103,,95,97,96,98,,,,,,,,,,,,,',
',,106,91,,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,',
'102,103,,95,97,96,98,,,,,,,,,,,,,,,91,106,,,,101,100,,83,87,88,90,89',
'92,93,,85,86,,,99,94,104,84,107,,102,103,,95,97,96,98,,,,,,,,,,,,,,',
'91,106,,,,101,100,,83,87,88,90,89,92,93,,85,86,,,99,94,104,84,107,83',
'102,103,,95,97,96,98,,,,,,94,104,,107,,102,103,,95,91,106,,,,101,100',
',,87,88,90,89,92,93,,85,86,106,,,,,84,,83,87,88,90,89,92,93,,85,86,',
',,,104,84,107,83,102,103,,,91,,,,,,,,,104,,107,,102,103,,,91,106,,,',
',,,,87,88,90,89,92,93,,85,86,106,,,,,84,,,87,88,90,89,92,93,83,85,86',
',,,,,84,,,,99,94,104,91,107,,102,103,,95,97,96,98,61,64,,,62,,,91,,',
',,,,,106,,,,101,100,,,87,88,90,89,92,93,,85,86,,,,,,84,,138,,,135,,',
',,,,,,,,,,,,,,,,91,70,,,,,,,,,,139,65' ]
        racc_action_table = arr = ::Array.new(8485, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,245,185,0,0,328,0,186,198,171,173,243,253,71,328,245,370,371,179',
'371,184,370,198,0,198,194,198,198,255,0,194,0,243,0,0,183,0,0,0,256',
'0,0,0,0,185,253,0,0,198,186,0,171,173,0,0,7,7,7,198,198,179,0,184,198',
'198,45,145,0,217,145,198,0,0,172,0,0,0,183,222,0,0,0,0,0,0,0,408,408',
'0,169,408,408,269,408,198,203,45,153,153,274,45,153,345,345,7,7,7,7',
'45,203,408,203,275,203,203,172,408,230,408,167,408,408,277,408,408,408',
'230,408,408,325,166,325,165,408,408,203,164,408,159,230,408,408,251',
'203,203,203,203,230,408,250,203,203,12,285,408,12,287,203,408,408,289',
'408,408,317,150,150,408,408,408,408,408,408,408,4,4,408,317,4,4,291',
'4,203,199,12,317,306,148,12,181,224,309,143,313,314,316,12,199,4,199',
'118,199,199,225,4,141,4,133,4,4,131,4,4,4,4,4,4,4,4,324,181,4,4,199',
'181,4,228,326,4,4,327,118,181,199,199,118,4,244,199,199,180,130,4,118',
'123,199,4,4,332,4,4,121,344,242,4,4,4,4,4,4,4,403,403,4,346,403,403',
'111,403,199,202,180,109,108,105,180,311,104,354,73,356,357,360,180,202',
'403,202,218,202,202,365,403,66,403,241,403,403,235,403,403,403,65,403',
'403,403,403,374,311,403,403,202,311,403,375,311,403,403,377,378,311',
'381,41,388,403,389,202,202,395,40,403,8,5,202,403,403,405,403,403,1',
'410,412,403,403,403,403,403,403,403,248,248,403,414,248,248,418,248',
'248,196,,,,,,,,,,,,,,196,248,196,,196,196,,248,,248,,248,248,,248,248',
'248,,248,248,248,248,,,248,248,196,,248,,,248,248,,,,,,,248,,,,,,248',
',,196,248,248,,248,248,,,,248,248,248,248,248,248,248,402,402,248,,402',
'402,,402,402,204,,,,,,,,,,,,,,204,402,204,,204,204,,402,,402,,402,402',
',402,402,402,,402,402,402,402,,,402,402,204,,402,,,402,402,,204,204',
'204,204,,402,,204,204,,,402,,,204,402,402,,402,402,,,,402,402,402,402',
'402,402,402,249,249,402,197,249,249,,249,204,120,,,,,,,,197,,197,,197',
'197,120,249,120,,120,120,,249,124,249,,249,249,,249,249,249,,249,249',
'197,124,,,249,249,120,,249,124,,249,249,,,155,,,,249,,,197,124,,249',
',,155,249,249,,249,249,,,155,249,249,249,249,249,249,249,10,10,249,',
'10,10,155,10,,201,,,,,,,,,,,,,,201,10,201,,201,201,,10,,10,,10,10,,10',
'10,10,,10,10,10,10,,,10,10,201,,10,,,10,10,,,,,,,10,,201,201,,,10,,',
'201,10,10,,10,10,,,,10,10,10,10,10,10,10,11,11,10,,11,11,,11,,200,,',
',,,,,,,,,,,200,11,200,,200,200,,11,,11,,11,11,,11,11,11,,11,11,11,11',
',,11,11,200,,11,,,11,11,,,,,,,11,,200,200,,,11,,,200,11,11,,11,11,,',
',11,11,11,11,11,11,11,254,254,11,,254,254,,254,276,276,276,276,,276',
'276,276,,276,,276,276,,,,254,,,276,276,276,254,,254,276,254,254,,254',
'254,254,,254,254,254,254,276,276,254,254,,,254,,,254,254,,,276,276,276',
'276,254,,,,,,254,,,,254,254,,254,254,,,,254,254,254,254,254,254,254',
'15,15,254,,15,15,,15,278,278,278,278,,278,278,278,,278,,278,278,,,,15',
',,278,278,278,15,,15,278,15,15,,15,15,15,,15,15,,,278,278,15,15,,,15',
',,15,15,,,278,278,278,278,15,,,,,,15,,,,15,15,,15,15,,,,15,15,15,15',
'15,15,15,16,16,15,,16,16,,16,308,308,308,308,,308,308,308,,308,,308',
'308,,,,16,,,308,308,308,16,,16,308,16,16,,16,16,16,,16,16,,,308,308',
'16,16,,,16,,,16,16,,,308,308,308,308,16,,,,,,16,,,,16,16,,16,16,,,,16',
'16,16,16,16,16,16,17,17,16,,17,17,,17,220,220,220,220,,220,220,220,',
'220,,220,220,,,,17,,,220,220,220,17,,17,220,17,17,,17,17,17,,17,17,',
',220,220,17,17,,,17,,,17,17,,,220,220,220,220,17,,,,,,17,,,,17,17,,17',
'17,,,,17,17,17,17,17,17,17,18,18,17,,18,18,,18,,195,,,,,,,,,,,,,,195',
'18,195,,195,195,,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18,18,195,,18',
',,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18,18,18,18,18,18,18,400',
'400,18,,400,400,,400,400,117,,,,,,,,,,,,,,117,400,117,,117,117,,400',
',400,,400,400,,400,400,400,,400,400,400,400,,,400,400,117,,400,,,400',
'400,,,,,,,400,,,,,,400,,,,400,400,,400,400,,,,400,400,400,400,400,400',
'400,384,384,400,,384,384,,384,384,119,,,,,,,,,,,,,,119,384,119,,119',
'119,,384,,384,,384,384,,384,384,384,,384,384,384,384,,,384,384,119,',
'384,,,384,384,,,,,,,384,,,,,,384,,,,384,384,,384,384,,,,384,384,384',
'384,384,384,384,42,42,384,,42,42,,42,,,,,,,,,,,,,,,,,42,,,,,,42,,42',
',42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,42,,,,,,,42,,,,,,42,,,,42',
'42,,42,42,,,,42,42,42,42,42,42,42,43,43,42,,43,43,,43,,,,,,,,,,,,,,',
',,43,,,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,',
',,43,,,,,,43,,,,43,43,,43,43,,,,43,43,43,43,43,43,43,44,44,43,,44,44',
',44,,,,,,,,,,,,,,,,,44,,,,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44',
',,44,,,44,44,,,,,,,44,,,,,,44,,,,44,44,,44,44,,,,44,44,44,44,44,44,44',
'258,258,44,,258,258,,258,258,,,,,,,,,,,,,,,,258,,,,,,258,,258,,258,258',
',258,258,258,,258,258,258,258,,,258,258,,,258,,,258,258,,,,,,,258,,',
',,,258,,,,258,258,,258,258,,,,258,258,258,258,258,258,258,216,216,258',
',216,216,,216,,,,,,,,,,,,,,,,,216,,,,,,216,,216,,216,216,,216,216,216',
',216,216,,,,,216,216,,,216,,,216,216,,,,,,,216,,,,,,216,,,,216,216,',
'216,216,,,,216,216,216,216,216,216,216,55,55,216,,55,55,55,55,,,,,,',
',,,,,,,,,,55,,,,,,55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,,,55',
',,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55,55,55,55,55,55,56',
'56,55,,56,56,56,56,,,,,,,,,,,,,,,,,56,,,,,,56,,56,,56,56,,56,56,56,',
'56,56,56,56,,,56,56,,,56,,,56,56,,,,,,,56,,,,,,56,,,,56,56,,56,56,,',
',56,56,56,56,56,56,56,57,57,56,,57,57,,57,57,,,,,,,,,,,,,,,,57,,,,,',
'57,,57,,57,57,,57,57,57,,57,57,57,57,,,57,57,,,57,,,57,57,,,,,,,57,',
',,,,57,,,,57,57,,57,57,,,,57,57,57,57,57,57,57,63,63,57,,63,63,,63,',
',,,,,,,,,,,,,,,63,,,,,,63,,63,,63,63,,63,63,63,,63,63,63,63,,,63,63',
',,63,,,63,63,,,,,,,63,,,,,,63,,,,63,63,,63,63,,,,63,63,63,63,63,63,63',
'373,373,63,,373,373,,373,,,,,,,,,,,,,,,,,373,,,,,,373,,373,,373,373',
',373,373,373,,373,373,,,,,373,373,,,373,,,373,373,,,,,,,373,,,,,,373',
',,,373,373,,373,373,,,,373,373,373,373,373,373,373,259,259,373,,259',
'259,,259,,,,,,,,,,,,,,,,,259,,,,,,259,,259,,259,259,,259,259,259,,259',
'259,259,259,,,259,259,,,259,,,259,259,,,,,,,259,,,,,,259,,,,259,259',
',259,259,,,,259,259,259,259,259,259,259,68,68,259,,68,68,,68,,,,,,,',
',,,,,,,,,68,,,,,,68,,68,,68,68,,68,68,68,,68,68,,,,,68,68,,,68,,,68',
'68,,,,,,,68,,,,,,68,,,,68,68,,68,68,,,,68,68,68,68,68,68,68,361,361',
'68,,361,361,,361,,,,,,,,,,,,,,,,,361,,,,,,361,,361,,361,361,,361,361',
'361,,361,361,361,361,,,361,361,,,361,,,361,361,,,,,,,361,,,,,,361,,',
',361,361,,361,361,,,,361,361,361,361,361,361,361,72,72,361,,72,72,,72',
',,,,,,,,,,,,,,,,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72',
',,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72,,,,72,72,72,72,72,72,72',
'355,355,72,,355,355,,355,,,,,,,,,,,,,,,,,355,,,,,,355,,355,,355,355',
',355,355,355,,355,355,,,,,355,355,,,355,,,355,355,,,,,,,355,,,,,,355',
',,,355,355,,355,355,,,,355,355,355,355,355,355,355,74,74,355,,74,74',
',74,,,,,,,,,,,,,,,,,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,74,74,,,74',
'74,,,74,,,74,74,,,,,,,74,,,,,,74,,,,74,74,,74,74,,,,74,74,74,74,74,74',
'74,75,75,74,,75,75,,75,,,,,,,,,,,,,,,,,75,,,,,,75,,75,,75,75,,75,75',
'75,,75,75,75,75,,,75,75,,,75,,,75,75,,,,,,,75,,,,,,75,,,,75,75,,75,75',
',,,75,75,75,75,75,75,75,76,76,75,,76,76,,76,,,,,,,,,,,,,,,,,76,,,,,',
'76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,,,76,',
',,,,76,,,,76,76,,76,76,,,,76,76,76,76,76,76,76,77,77,76,,77,77,,77,',
',,,,,,,,,,,,,,,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77',
',,77,,,77,77,,,,,,,77,,,,,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77',
'78,78,77,,78,78,,78,,,,,,,,,,,,,,,,,78,,,,,,78,,78,,78,78,,78,78,78',
',78,78,78,78,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78,,,,78,78,,78,78,',
',,78,78,78,78,78,78,78,79,79,78,,79,79,,79,,,,,,,,,,,,,,,,,79,,,,,,79',
',79,,79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,,,79,,,,',
',79,,,,79,79,,79,79,,,,79,79,79,79,79,79,79,80,80,79,,80,80,,80,,,,',
',,,,,,,,,,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,,,80',
',,80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80,,,,80,80,80,80,80,80,80,81',
'81,80,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81,81,81,,81',
'81,81,81,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81',
'81,81,81,81,81,81,82,82,81,,82,82,,82,,,,,,,,,,,,,,,,,82,,,,,,82,82',
'82,82,82,82,82,82,82,82,,82,82,,,,,82,82,82,82,82,,,82,82,,,,,,,82,',
',,,82,82,,,,82,82,,82,82,,,,82,82,82,82,82,82,82,83,83,82,,83,83,,83',
',,,,,,,,,,,,,,,,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,,83',
',,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83,83,83,83,84',
'84,83,,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84,,84,84,,84,84,84,,84',
'84,,,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84',
'84,84,84,84,84,85,85,84,,85,85,,85,,,,,,,,,,,,,,,,,85,,,,,,85,,85,,85',
'85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85',
',85,85,,,,85,85,85,85,85,85,85,86,86,85,,86,86,,86,,,,,,,,,,,,,,,,,86',
',,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,,,86',
',,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86,86,87,87,86,,87,87,,87',
',,,,,,,,,,,,,,,,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87',
',,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,88',
'88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88',
'88,,,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88',
'88,88,88,88,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89',
'89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89',
',89,89,,,,89,89,89,89,89,89,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90',
',,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90',
',,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,91,91,90,,91,91,,91',
',,,,,,,,,,,,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91',
',,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,92',
'92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92',
'92,,,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92',
'92,92,92,92,92,93,93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,,93',
'93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93',
',93,93,,,,93,93,93,93,93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94',
',,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94',
',,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,95,95,94,,95,95,,95',
',,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95',
',,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,95,95,96',
'96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96',
'96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96',
'96,96,96,96,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97',
',97,97,,,,97,97,97,97,97,97,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98',
',,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98',
',,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,98,98,99,99,98,,99,99,,99',
',,,,,,,,,,,,,,,,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99',
',,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,99,99,100',
'100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,,,,,,100,,100,,100,100,,100',
'100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100',
'100,,100,100,,,,100,100,100,100,100,100,100,101,101,100,,101,101,,101',
',,,,,,,,,,,,,,,,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,',
',101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101',
'101,101,101,101,101,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,,102',
',,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102',
'102,,,,,,,102,,,,,,102,,,102,102,102,,102,102,,,,102,102,102,102,102',
'102,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,103,,,,,103,,103',
',103,103,,103,103,103,,103,103,103,103,,,103,103,,,103,,,103,103,,,',
',,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,103,103,176',
'176,103,,176,176,,176,,,,,,,,,,,,,,,,,176,,,,,,176,,176,,176,176,,176',
'176,176,,176,176,,,,,176,176,,,176,,,176,176,,,,,,,176,,,,,,176,,,,176',
'176,,176,176,,,,176,176,176,176,176,176,176,175,175,176,,175,175,,175',
',,,,,,,,,,,,,,,,175,,,,,,175,,175,,175,175,,175,175,175,,175,175,,,',
',175,175,,,175,,,175,175,,,,,,,175,,,,,,175,,,,175,175,,175,175,,,,175',
'175,175,175,175,175,175,106,106,175,,106,106,,106,,,,,,,,,,,,,,,,,106',
',,,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106',
'106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106',
'106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107',
'107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,',
',107,,,,107,107,,107,107,,,,107,107,107,107,107,107,107,174,174,107',
',174,174,,174,,,,,,,,,,,,,,,,,174,,,,,,174,,174,,174,174,,174,174,174',
',174,174,,,,,174,174,,,174,,,174,174,,,,,,,174,,,,,,174,,,,174,174,',
'174,174,,,,174,174,174,174,174,174,174,170,170,174,,170,170,,170,,,170',
',,,,,,,,,,,,,170,,,,,,170,,170,,170,170,,170,170,170,,170,170,,,,,170',
'170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170,,170,170,,,,170,170',
'170,170,170,170,170,110,110,170,,110,110,,110,,,,,,,,,,,,,,,,,110,,',
',,,110,,110,,110,110,,110,110,110,,110,110,,,,,110,110,,,110,,,110,110',
',,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110,110,110,110,110',
'264,264,110,,264,264,,264,,,,,,,,,,,,,,,,,264,,,,,,264,,264,,264,264',
',264,264,264,,264,264,264,264,,,264,264,,,264,,,264,264,,,,,,,264,,',
',,,264,,,,264,264,,264,264,,,,264,264,264,264,264,264,264,279,279,264',
',279,279,,279,,,,,,,,,,,,,,,,,279,,,,,,279,,279,,279,279,,279,279,279',
',279,279,,,,,279,279,,,279,,,279,279,,,,,,,279,,,,,,279,,,,279,279,',
'279,279,,,,279,279,279,279,279,279,279,280,280,279,,280,280,,280,,,',
',,,,,,,,,,,,,280,,,,,,280,,280,,280,280,,280,280,280,,280,280,,,,,280',
'280,,,280,,,280,280,,,,,,,280,,,,,,280,,,,280,280,,280,280,,,,280,280',
'280,280,280,280,280,281,281,280,,281,281,,281,,,,,,,,,,,,,,,,,281,,',
',,,281,,281,,281,281,,281,281,281,,281,281,,,,,281,281,,,281,,,281,281',
',,,,,,281,,,,,,281,,,,281,281,,281,281,,,,281,281,281,281,281,281,281',
'157,157,281,,157,157,,157,157,,,,,,,,,,,,,,,,157,,,,,,157,,157,,157',
'157,,157,157,157,,157,157,157,157,,,157,157,,,157,,,157,157,,,,,,,157',
',,,,,157,,,,157,157,,157,157,,,,157,157,157,157,157,157,157,307,307',
'157,,307,307,,307,,,,,,,,,,,,,,,,,307,,,,,,307,,307,,307,307,,307,307',
'307,,307,307,,,,,307,307,,,307,,,307,307,,,,,,,307,,,,,,307,,,,307,307',
',307,307,,,,307,307,307,307,307,307,307,331,331,307,,331,331,,331,,',
',,,,,,,,,,,,,,331,,,,,,331,,331,,331,331,,331,331,331,,331,331,331,331',
',,331,331,,,331,,,331,331,,,,,,,331,,,,,,331,,,,331,331,,331,331,,,',
'331,331,331,331,331,331,331,233,233,331,,233,233,,233,233,,,,,,,,,,',
',,,,,233,,,,,,233,,233,,233,233,,233,233,233,,233,233,233,233,,,233',
'233,,,233,,,233,233,,,,,,,233,,,,,,233,,,,233,233,,233,233,,,,233,233',
'233,233,233,233,233,125,125,233,,125,125,,125,,,,,,,,,,,,,,,,,125,125',
',,,,125,,125,,125,125,,125,125,125,,125,125,125,125,,,125,125,,,125',
',,125,125,,,,,,,125,,,,,,125,,,,125,125,,125,125,,,,125,125,125,125',
'125,125,125,154,154,125,,154,154,,154,,,,,,,,,,,,,,,,,154,,,,,,154,',
'154,,154,154,,154,154,154,,154,154,154,154,,,154,154,,,154,,,154,154',
',,,,,,154,,,,,,154,,,,154,154,,154,154,,,,154,154,154,154,154,154,154',
'283,283,154,,283,283,,283,,,,,,,,,,,,,,,,,283,,,,,,283,,283,,283,283',
',283,283,283,,283,283,,,,,283,283,,,283,,,283,283,,,,,,,283,,,,,,283',
',,,283,283,,283,283,,,,283,283,283,283,283,283,283,284,284,283,,284',
'284,,284,,,,,,,,,,,,,,,,,284,,,,,,284,,284,,284,284,,284,284,284,,284',
'284,,,,,284,284,,,284,,,284,284,,,,,,,284,,,,,,284,,,,284,284,,284,284',
',,,284,284,284,284,284,284,284,329,329,284,,329,329,,329,329,,,,,,,',
',,,,,,,,329,,,,,,329,,329,,329,329,,329,329,329,,329,329,,,,,329,329',
',,329,,,329,329,,,,,,,329,,,,,,329,,,,329,329,,329,329,,,,329,329,329',
'329,329,329,329,322,322,329,,322,322,,322,,,,,,,,,,,,,,,,,322,,,,,,322',
',322,,322,322,,322,322,322,,322,322,322,322,,,322,322,,,322,,,322,322',
',,,,,,322,,,,,,322,,,,322,322,,322,322,,,,322,322,322,322,322,322,322',
'321,321,322,,321,321,,321,,,,,,,,,,,,,,,,,321,,,,,,321,,321,,321,321',
',321,321,321,,321,321,,,,,321,321,,,321,,,321,321,,,,,,,321,,,,,,321',
',,,321,321,,321,321,,,,321,321,321,321,321,321,321,318,318,321,,318',
'318,,318,,,,,,,,,,,,,,,,,318,,,,,,318,,318,,318,318,,318,318,318,,318',
'318,,,,,318,318,,,318,,,318,318,,,,,,,318,,,,,,318,,,,318,318,,318,318',
',,,318,318,318,318,318,318,318,247,247,318,,247,247,,247,247,,,,,,,',
',,,,,,,,247,,,,,,247,,247,,247,247,,247,247,247,,247,247,247,247,,,247',
'247,,,247,,,247,247,,,,182,182,,247,182,,,,,247,,,,247,247,208,247,247',
',,,247,247,247,247,247,247,247,208,208,247,208,,208,208,226,208,,,182',
',,182,,,,,226,226,226,226,226,,226,226,208,226,226,226,226,,,182,208',
'208,208,208,208,208,,208,208,182,182,,226,,208,,226,226,,,226,226,226',
'226,226,226,,226,226,129,,129,,,226,,,,208,,,129,129,129,,129,,129,129',
',129,129,129,129,,46,46,,226,46,,,,,,,,,,129,,,,129,129,,,129,129,129',
'129,129,129,,129,129,128,,128,,,129,,,46,,,46,128,128,128,,128,,128',
'128,,128,128,128,128,,252,252,,129,252,46,,,,,,,,,128,46,46,,128,128',
',,128,128,128,128,128,128,,128,128,126,,126,,,128,,,252,,,252,126,126',
'126,,126,,126,126,,126,126,126,126,,,,,128,,252,,,,,,,,,126,252,252',
',126,126,,9,126,126,126,126,126,126,,126,126,,,9,9,9,126,9,,9,9,,9,9',
'9,9,,,,,,,,,,,,,,,126,9,,,,9,9,,156,9,9,9,9,9,9,,9,9,,,156,156,156,9',
'156,,156,156,,156,156,156,156,,,,,,,,,,,,,,,9,156,,,,156,156,,193,156',
'156,156,156,156,156,,156,156,,,193,193,193,156,193,,193,193,,193,193',
'193,193,,156,156,,,,,,,,,,,,156,193,,,,193,193,,221,193,193,193,193',
'193,193,,193,193,,,221,221,221,193,221,,221,221,,221,221,221,221,,,',
',,,,,,,,,,,193,221,,,,221,221,,,221,221,221,221,221,221,213,221,221',
',,213,,,221,,,,213,213,213,,213,,213,213,,213,213,213,213,,,,,,,,221',
',,,,,,,213,,,,213,213,,212,213,213,213,213,213,213,,213,213,,,212,212',
'212,213,212,,212,212,,212,212,212,212,,,,,,,,,,,,,,,213,212,,,,,212',
',211,212,212,212,212,212,212,,212,212,,,211,211,211,212,211,,211,211',
',211,211,211,211,,,,,,,,,,,,,,,212,211,,,,,168,,,211,211,211,211,211',
'211,,211,211,168,168,168,168,168,211,168,168,,168,168,168,168,,,,,,',
',,,,,,,,,168,211,,,168,168,,349,168,168,168,168,168,168,,168,168,,,349',
'349,349,168,349,210,349,349,,349,349,349,349,,,,,,210,210,,210,,210',
'210,,210,168,349,,,,349,349,,,349,349,349,349,349,349,,349,349,210,',
',,,349,,209,210,210,210,210,210,210,,210,210,,,,209,209,210,209,,209',
'209,,209,349,,,,,,,,,,,,,,,,,210,209,,,,,369,,,209,209,209,209,209,209',
',209,209,369,369,369,,369,209,369,369,,369,369,369,369,,,,,,,,,,,,,',
',,369,209,,,369,369,,351,369,369,369,369,369,369,,369,369,,,351,351',
'351,369,351,,351,351,,351,351,351,351,,,,,,,,,,,,,,,369,351,,,,351,351',
',352,351,351,351,351,351,351,,351,351,,,352,352,352,351,352,,352,352',
',352,352,352,352,,,,,,,,,,,,,,,351,352,,,,352,352,,353,352,352,352,352',
'352,352,,352,352,,,353,353,353,352,353,207,353,353,,353,353,353,353',
',,,,,207,207,,207,,207,207,,207,352,353,,,,353,353,,,353,353,353,353',
'353,353,,353,353,207,,,,,353,,206,207,207,207,207,207,207,,207,207,',
',,,206,207,206,205,206,206,,,353,,,,,,,,,205,,205,,205,205,,,207,206',
',,,,,,,206,206,206,206,206,206,,206,206,205,,,,,206,,,205,205,205,205',
'205,205,350,205,205,,,,,,205,,,,350,350,350,206,350,,350,350,,350,350',
'350,350,334,334,,,334,,,205,,,,,,,,350,,,,350,350,,,350,350,350,350',
'350,350,,350,350,,,,,,350,,334,,,334,,,,,,,,,,,,,,,,,,,350,334,,,,,',
',,,,334,334' ]
        racc_action_check = arr = ::Array.new(8485, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   338,   nil,   nil,   172,   318,   nil,    40,   321,  7613,
   607,   694,   147,   nil,   nil,   868,   955,  1042,  1129,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   257,   295,  1390,  1477,  1564,    60,  7483,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1825,  1912,  1999,   nil,   nil,
   nil,   nil,   nil,  2086,   nil,   225,   221,   nil,  2347,   nil,
   nil,    14,  2521,   266,  2695,  2782,  2869,  2956,  3043,  3130,
  3217,  3304,  3391,  3478,  3565,  3652,  3739,  3826,  3913,  4000,
  4087,  4174,  4261,  4348,  4435,  4522,  4609,  4696,  4783,  4870,
  4957,  5044,  5131,  5218,   236,   265,  5479,  5566,   264,   263,
  5827,   241,   nil,   nil,   nil,   nil,   nil,  1220,   194,  1307,
   524,   224,   nil,   235,   517,  6610,  7566,   nil,  7509,  7452,
   215,   197,   nil,   186,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   192,   nil,   179,   nil,    57,   nil,   nil,   175,   nil,
   161,   nil,   nil,    96,  6697,   544,  7660,  6262,   nil,   126,
   nil,   nil,   nil,   nil,   128,   124,   122,   111,  7947,    77,
  5740,    -2,    62,    -1,  5653,  5392,  5305,   nil,   nil,     7,
   234,   183,  7365,    24,     9,    -9,    -4,   nil,   nil,   nil,
   nil,   nil,   nil,  7707,    18,  1133,   350,   518,     2,   176,
   698,   611,   263,    89,   437,  8325,  8308,  8261,  7375,  8058,
  8011,  7902,  7855,  7808,   nil,   nil,  1738,    56,   216,   nil,
  1020,  7754,    31,   nil,   166,   161,  7395,   nil,   188,   nil,
    91,   nil,   nil,  6523,   nil,   284,   nil,   nil,   nil,   nil,
   nil,   278,   217,   -24,   230,   -11,   nil,  7306,   346,   520,
   141,   105,  7540,   -28,   781,    21,    32,   nil,  1651,  2260,
   nil,   nil,   nil,   nil,  5914,   nil,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,    88,   103,   759,   113,   846,  6001,
  6088,  6175,   nil,  6784,  6871,   141,   nil,   130,   nil,   148,
   nil,   168,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   176,  6349,   933,   182,
   nil,   270,   nil,   180,   184,   nil,   124,   128,  7219,   nil,
   nil,  7132,  7045,   nil,   209,    97,   217,   197,    -7,  6958,
   nil,  6436,   239,   nil,  8409,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   181,    23,   251,   nil,   nil,  7994,
  8379,  8150,  8197,  8244,   268,  2608,   209,   271,   nil,   nil,
   269,  2434,   nil,   nil,   nil,   263,   nil,   nil,   nil,  8103,
     9,   -15,   nil,  2173,   297,   280,   nil,   308,   309,   nil,
   nil,   310,   nil,   nil,  1303,   nil,   nil,   nil,   312,   282,
   nil,   nil,   nil,   nil,   nil,   317,   nil,   nil,   nil,   nil,
  1216,   nil,   433,   259,   nil,   325,   nil,   nil,    85,   nil,
   329,   nil,   330,   nil,   341,   nil,   nil,   nil,   312,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -3,  -246,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -246,  -246,  -246,   -33,   -34,  -246,  -246,  -246,  -246,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -86,   -90,  -246,  -246,  -246,  -246,  -246,  -176,  -177,  -178,
  -179,  -180,  -181,  -182,  -183,  -246,  -246,  -246,  -194,  -195,
  -196,  -197,  -198,  -246,  -200,  -246,  -213,  -216,  -246,  -221,
  -222,  -246,  -246,    -7,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -126,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,  -246,
  -246,  -246,  -246,  -246,  -246,  -121,  -245,  -245,   -22,   -23,
  -246,  -245,  -136,  -157,  -158,  -159,  -160,   -46,  -246,   -47,
   -54,  -246,   -87,  -246,  -246,  -246,  -246,   -97,  -246,  -246,
  -245,  -223,  -145,  -147,  -148,  -149,  -150,  -151,  -153,  -154,
   -14,  -223,  -185,  -223,  -187,  -246,  -190,  -191,  -246,  -199,
  -246,  -204,  -207,  -246,  -211,  -246,  -246,  -246,   423,    -6,
    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -246,  -223,
  -246,   -79,   -80,   -81,  -234,  -240,  -228,  -127,  -130,  -246,
  -231,  -229,  -237,  -177,  -178,  -179,  -180,  -227,  -232,  -233,
  -235,  -236,  -238,   -59,  -246,   -36,   -37,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,
   -53,   -55,   -56,  -246,   -57,  -115,  -246,  -223,   -83,   -91,
  -126,  -125,  -246,  -124,  -246,  -225,  -246,   -28,  -245,  -161,
  -246,   -58,   -92,  -246,   -95,  -223,  -164,  -166,  -167,  -168,
  -169,  -171,  -246,  -246,  -174,  -246,   -89,  -246,  -246,  -246,
  -246,  -245,  -224,  -246,  -224,  -246,  -246,  -188,  -246,  -246,
  -201,  -202,  -203,  -205,  -246,  -208,  -209,  -210,  -212,  -223,
  -214,  -217,  -219,  -220,    -8,  -246,  -126,  -246,  -224,  -246,
  -246,  -246,   -35,  -246,  -246,  -223,  -117,  -246,   -85,  -223,
  -129,  -246,  -228,  -229,  -230,  -231,  -234,  -237,  -239,  -240,
  -241,  -242,  -243,  -244,  -122,  -123,  -246,  -226,  -126,  -246,
  -139,  -246,  -162,  -223,  -246,   -94,  -246,  -224,  -246,  -172,
  -173,  -246,  -246,   -88,  -246,  -100,  -246,  -106,  -246,  -246,
  -110,  -245,  -246,  -155,  -246,  -146,  -152,   -15,  -184,  -186,
  -189,  -192,  -193,  -206,  -246,  -246,  -223,   -26,  -128,  -133,
  -131,  -132,   -60,  -119,  -246,  -224,   -82,  -246,   -25,   -29,
  -223,  -245,  -140,  -141,  -142,  -246,   -93,   -96,  -165,  -170,
  -246,  -100,   -99,  -246,  -246,  -106,  -105,  -246,  -246,  -109,
  -111,  -246,  -137,  -138,  -246,  -156,  -215,  -218,  -246,   -30,
  -116,  -118,   -84,  -120,   -27,  -246,  -163,  -175,   -98,  -101,
  -246,  -104,  -246,  -245,  -134,  -246,  -144,   -24,   -31,  -135,
  -246,  -103,  -246,  -108,  -246,  -113,  -114,  -143,  -225,  -102,
  -107,  -112,   -32 ]

racc_goto_table = [
     2,   117,   119,   120,   122,   121,   229,   225,   130,   134,
   215,   136,   194,   169,   251,   149,   306,   271,   330,   335,
   244,    73,   235,   414,   255,   229,   256,   381,   126,   128,
   129,   222,   224,   329,   108,   109,   228,   285,   399,   348,
   232,   214,   140,   140,   148,   372,   141,   143,   359,   376,
   151,   244,   277,   269,   156,   250,   309,   395,   362,   332,
   388,   160,   161,   162,   163,   336,   368,   320,   168,   193,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   211,   212,   213,   159,
   140,   398,   221,   221,   217,   319,   226,   401,   380,   341,
   287,   385,   164,   165,   166,   167,   265,   266,     3,   263,
   264,   262,   140,   152,   154,   267,   245,     1,   316,   nil,
   nil,   nil,   nil,   310,   286,   nil,   244,   nil,   313,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   130,   274,   134,   333,   136,   nil,   nil,
   nil,   289,   344,   nil,   268,   nil,   119,   275,   nil,   nil,
   126,   128,   129,   nil,   nil,   nil,   nil,   nil,   354,   nil,
   nil,   nil,   357,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   365,   nil,   nil,   nil,
   nil,   nil,   213,   nil,   nil,   nil,   387,   346,   nil,   422,
   nil,   nil,   nil,   244,   nil,   134,   343,   136,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   383,   nil,   nil,   389,
   nil,   nil,   nil,   314,   nil,   193,   nil,   nil,   nil,   360,
   nil,   337,   nil,   394,   nil,   148,   342,   324,   326,   nil,
   370,   151,   nil,   nil,   nil,   nil,   383,   nil,   nil,   nil,
   nil,   nil,   nil,   391,   nil,   349,   350,   351,   nil,   352,
   353,   nil,   nil,   nil,   363,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   226,   nil,   nil,   nil,   134,   415,   136,
   nil,   nil,   nil,   nil,   369,   418,   nil,   193,   nil,   337,
   nil,   nil,   nil,   nil,   nil,   193,   nil,   nil,   nil,   nil,
   392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   213,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   405,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   226,   nil,   nil,   nil,   nil,   nil,
   410,   nil,   412,   416 ]

racc_goto_check = [
     2,    10,    10,    10,    37,     6,    49,    13,    57,    35,
    50,    34,    19,    11,    15,    80,    14,    88,    47,    65,
    36,     5,    42,    48,    15,    49,    15,    59,    10,    10,
    10,    53,    53,    46,     9,     9,    58,    51,    43,    54,
    41,    20,     6,     6,     6,    44,     8,     8,    16,    45,
     6,    36,    15,    42,    10,    58,    61,    59,    62,    64,
    12,     6,     6,     6,     6,    67,    68,    69,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,     5,
     6,    44,    10,    10,     8,    71,    10,    45,    47,    75,
    15,    65,     9,     9,     9,     9,    76,    77,     3,    81,
    82,    84,     6,    85,    86,    87,     8,     1,    15,   nil,
   nil,   nil,   nil,    49,    50,   nil,    36,   nil,    42,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    57,     6,    35,    49,    34,   nil,   nil,
   nil,    11,    15,   nil,     2,   nil,    10,     2,   nil,   nil,
    10,    10,    10,   nil,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,    88,    11,   nil,    14,
   nil,   nil,   nil,    36,   nil,    35,    80,    34,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,    15,
   nil,   nil,   nil,     2,   nil,    10,   nil,   nil,   nil,    11,
   nil,     6,   nil,    15,   nil,     6,     6,     2,     2,   nil,
    19,     6,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   nil,   nil,   nil,    50,   nil,    10,    10,    10,   nil,    10,
    10,   nil,   nil,   nil,    57,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,    35,    49,    34,
   nil,   nil,   nil,   nil,    10,    13,   nil,    10,   nil,     6,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,
     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   117,     0,   108,   nil,    17,   -13,   nil,    -9,    24,
   -14,   -69,  -286,  -103,  -209,  -117,  -259,   nil,   nil,   -71,
   -61,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -35,   -37,  -104,   -36,   nil,   nil,
   nil,   -83,  -102,  -335,  -280,  -278,  -216,  -231,  -380,  -105,
   -92,  -179,   nil,   -75,  -239,   nil,   nil,   -37,   -75,  -304,
   nil,  -172,  -253,   nil,  -192,  -233,   nil,  -188,  -251,  -176,
   nil,  -147,   nil,   nil,   nil,  -159,   -47,   -46,   nil,   nil,
   -48,   -41,   -40,   nil,   -39,    48,    48,   -39,  -139 ]

racc_goto_default = [
   nil,   nil,   382,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   227,    13,    14,   328,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   nil,    40,    41,
   123,   nil,   nil,   127,   nil,   nil,   nil,   nil,   nil,   223,
   nil,   nil,   105,   nil,   177,   179,   178,   112,   nil,   nil,
   111,   nil,   nil,   131,   nil,   132,   133,   137,   236,   237,
   238,   239,   240,   243,   145,   147,    58,    59,    60,    63,
   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  3, 100, :_reduce_11,
  3, 100, :_reduce_12,
  3, 100, :_reduce_13,
  1, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 101, :_reduce_none,
  3, 101, :_reduce_17,
  3, 101, :_reduce_18,
  3, 101, :_reduce_19,
  3, 101, :_reduce_20,
  1, 103, :_reduce_none,
  2, 103, :_reduce_22,
  2, 103, :_reduce_23,
  7, 103, :_reduce_24,
  5, 103, :_reduce_25,
  5, 103, :_reduce_26,
  4, 110, :_reduce_27,
  1, 107, :_reduce_28,
  3, 107, :_reduce_29,
  1, 106, :_reduce_30,
  2, 106, :_reduce_31,
  4, 106, :_reduce_32,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 104, :_reduce_35,
  3, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  3, 104, :_reduce_44,
  3, 104, :_reduce_45,
  2, 104, :_reduce_46,
  2, 104, :_reduce_47,
  3, 104, :_reduce_48,
  3, 104, :_reduce_49,
  3, 104, :_reduce_50,
  3, 104, :_reduce_51,
  3, 104, :_reduce_52,
  3, 104, :_reduce_53,
  2, 104, :_reduce_54,
  3, 104, :_reduce_55,
  3, 104, :_reduce_56,
  3, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 113, :_reduce_59,
  3, 113, :_reduce_60,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_77,
  1, 111, :_reduce_78,
  1, 111, :_reduce_79,
  1, 111, :_reduce_80,
  1, 111, :_reduce_81,
  5, 112, :_reduce_82,
  3, 112, :_reduce_83,
  6, 112, :_reduce_84,
  4, 112, :_reduce_85,
  1, 116, :_reduce_86,
  2, 116, :_reduce_87,
  4, 132, :_reduce_88,
  3, 132, :_reduce_89,
  1, 132, :_reduce_90,
  3, 133, :_reduce_91,
  2, 131, :_reduce_92,
  3, 135, :_reduce_93,
  2, 135, :_reduce_94,
  2, 134, :_reduce_95,
  4, 134, :_reduce_96,
  2, 119, :_reduce_97,
  5, 137, :_reduce_98,
  4, 137, :_reduce_99,
  0, 138, :_reduce_none,
  2, 138, :_reduce_101,
  4, 138, :_reduce_102,
  3, 138, :_reduce_103,
  6, 120, :_reduce_104,
  5, 120, :_reduce_105,
  0, 139, :_reduce_none,
  4, 139, :_reduce_107,
  3, 139, :_reduce_108,
  5, 118, :_reduce_109,
  1, 140, :_reduce_110,
  2, 140, :_reduce_111,
  5, 141, :_reduce_112,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 114, :_reduce_none,
  4, 114, :_reduce_116,
  1, 145, :_reduce_117,
  3, 145, :_reduce_118,
  3, 144, :_reduce_119,
  6, 117, :_reduce_120,
  2, 117, :_reduce_121,
  3, 146, :_reduce_122,
  3, 146, :_reduce_123,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 105, :_reduce_126,
  1, 105, :_reduce_127,
  3, 105, :_reduce_128,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  3, 148, :_reduce_131,
  3, 148, :_reduce_132,
  3, 148, :_reduce_133,
  6, 121, :_reduce_134,
  7, 122, :_reduce_135,
  1, 154, :_reduce_136,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_140,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  7, 123, :_reduce_143,
  6, 123, :_reduce_144,
  1, 157, :_reduce_145,
  3, 157, :_reduce_146,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 159, :_reduce_149,
  1, 159, :_reduce_none,
  1, 160, :_reduce_151,
  3, 160, :_reduce_152,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_156,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_160,
  1, 152, :_reduce_161,
  2, 152, :_reduce_162,
  4, 152, :_reduce_163,
  1, 136, :_reduce_164,
  3, 136, :_reduce_165,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 165, :_reduce_170,
  1, 165, :_reduce_171,
  2, 166, :_reduce_172,
  2, 164, :_reduce_173,
  1, 167, :_reduce_174,
  4, 167, :_reduce_175,
  1, 115, :_reduce_176,
  1, 125, :_reduce_177,
  1, 125, :_reduce_178,
  1, 125, :_reduce_179,
  1, 125, :_reduce_180,
  1, 125, :_reduce_181,
  1, 125, :_reduce_182,
  1, 125, :_reduce_183,
  4, 126, :_reduce_184,
  2, 126, :_reduce_185,
  4, 126, :_reduce_186,
  2, 126, :_reduce_187,
  3, 127, :_reduce_188,
  4, 127, :_reduce_189,
  2, 127, :_reduce_190,
  1, 168, :_reduce_191,
  3, 168, :_reduce_192,
  3, 169, :_reduce_193,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 129, :_reduce_none,
  1, 170, :_reduce_197,
  1, 170, :_reduce_198,
  2, 171, :_reduce_199,
  1, 173, :_reduce_200,
  1, 175, :_reduce_201,
  1, 176, :_reduce_202,
  2, 174, :_reduce_203,
  1, 177, :_reduce_204,
  1, 178, :_reduce_205,
  2, 178, :_reduce_206,
  2, 172, :_reduce_207,
  2, 179, :_reduce_208,
  2, 179, :_reduce_209,
  3, 97, :_reduce_210,
  0, 181, :_reduce_none,
  1, 181, :_reduce_none,
  0, 180, :_reduce_213,
  2, 180, :_reduce_214,
  4, 180, :_reduce_215,
  1, 124, :_reduce_216,
  3, 124, :_reduce_217,
  5, 124, :_reduce_218,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 130, :_reduce_221,
  1, 128, :_reduce_222,
  0, 109, :_reduce_none,
  1, 109, :_reduce_224,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 143, :_reduce_245 ]

racc_reduce_n = 246

racc_shift_n = 423

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :HIGH => 90,
  :LISTSTART => 91,
  :SPLAT => 92,
  :MODULO => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_77(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_78(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_79(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_81(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_82(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_87(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_88(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_91(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_92(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_93(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_94(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_95(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_97(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_98(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 338)
  def _reduce_101(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 342)
  def _reduce_102(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_103(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_104(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 357)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 367)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_109(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_112(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 406)
  def _reduce_116(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_119(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 427)
  def _reduce_120(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_122(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_123(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_128(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 472)
  def _reduce_133(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_134(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_135(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_136(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 514)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 531)
  def _reduce_143(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_151(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_152(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_160(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_162(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_163(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_164(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_165(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_170(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_171(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_172(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_173(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_174(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_175(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_176(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_177(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_184(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_185(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_186(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_187(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_188(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_190(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_192(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_193(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_199(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_203(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_204(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_205(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_207(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_208(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_210(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 211 omitted

# reduce 212 omitted

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_213(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_214(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_215(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 219 omitted

# reduce 220 omitted

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_221(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_222(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 223 omitted

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_224(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_245(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
