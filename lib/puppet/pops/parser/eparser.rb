#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 770)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'64,67,331,-233,65,59,291,60,78,79,80,74,247,142,-242,389,332,385,117',
'384,290,113,-131,288,18,291,265,64,67,266,44,65,47,248,51,12,117,49',
'38,41,77,46,39,10,11,-233,143,72,17,119,85,40,-247,116,15,16,-242,81',
'83,82,84,118,73,127,-131,289,142,119,45,139,128,116,37,68,-244,70,71',
'69,-245,118,50,52,54,53,55,56,57,86,48,73,58,64,67,158,-247,65,59,410',
'60,143,68,107,291,110,160,105,106,64,67,117,163,65,117,269,268,18,-244',
'77,64,67,-245,44,65,47,225,51,12,109,49,38,41,75,46,39,10,11,226,247',
'72,17,119,85,40,119,116,15,16,116,85,87,72,236,118,73,385,118,384,142',
'248,45,139,280,281,37,68,237,70,71,117,239,236,50,52,54,53,55,56,57',
'86,48,73,58,64,67,236,259,65,59,260,60,143,68,107,236,110,262,105,106',
'262,119,117,267,77,116,85,85,18,85,85,64,67,118,44,65,47,286,51,12,109',
'49,38,41,262,46,39,10,11,127,313,72,17,119,314,40,316,116,15,16,320',
'326,87,327,247,118,73,330,340,341,142,344,45,139,117,117,37,68,347,70',
'71,117,349,350,50,52,54,53,55,56,57,326,48,73,58,64,67,267,321,65,59',
'356,60,143,68,119,119,247,358,116,116,366,119,117,367,286,116,118,118',
'18,72,287,64,67,118,44,65,47,248,51,12,369,49,38,41,372,46,39,10,11',
'326,377,72,17,119,378,40,382,116,15,16,375,386,247,388,396,118,73,399',
'286,403,142,127,45,139,406,72,37,68,286,70,71,409,413,248,50,52,54,53',
'55,56,57,86,48,73,58,64,67,240,86,65,59,388,60,143,68,107,415,110,416',
'105,106,417,107,418,110,421,105,106,422,18,423,424,432,434,435,44,247',
'47,436,51,121,109,49,38,41,316,46,39,109,72,,,72,17,,,40,248,,15,16',
',,88,89,,,73,,,87,278,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,86',
'48,,58,64,67,,86,65,59,,60,,86,107,,110,,105,106,,107,,110,,105,106',
'107,18,110,,105,106,,44,,47,,51,121,109,49,38,41,,46,39,109,,,,72,17',
'109,,40,,,15,16,,,88,89,,,73,,,87,,,45,,,,37,68,,70,71,,,,50,52,54,53',
'55,56,57,86,48,,58,64,67,,86,65,59,,60,,,107,,110,,105,106,,107,,110',
',105,106,,18,,,,,,44,,47,,51,121,109,49,38,41,,46,39,109,,,,72,17,,',
'40,,,15,16,,,88,89,,,73,,,87,,,45,,,,37,68,,70,71,,,,50,52,54,53,55',
'56,57,,48,,58,64,67,,,65,59,,60,304,194,303,195,,301,197,305,,298,,300',
'302,,,,18,,,198,193,306,44,,47,299,51,12,,49,38,41,,46,39,10,11,196',
'307,72,17,,,40,,,15,16,,,310,311,309,308,73,,,,312,,45,,,,37,68,,70',
'71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,304,194,303,195',
',301,197,305,,298,,300,302,,,,18,,,198,193,306,44,,47,299,51,121,,49',
'38,41,,46,39,,,196,307,72,17,,,40,,,15,16,,,310,311,309,308,73,,,,312',
',45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60',
'304,194,303,195,,301,197,305,,298,,300,302,,,,18,,,198,193,306,44,,47',
'299,51,121,,49,38,41,,46,39,,,196,307,72,17,,,40,,,15,16,,,310,311,309',
'308,73,,,,312,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64',
'67,,,65,59,,60,304,194,303,195,,301,197,305,,298,,300,302,,,,18,,,198',
'193,306,44,,47,299,51,121,,49,38,41,,46,39,,,196,307,72,17,,,40,,,15',
'16,,,310,311,309,308,73,,,,312,,45,,,,37,68,,70,71,,,,50,52,54,53,55',
'56,57,,48,,58,64,67,,,65,59,147,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51',
'12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37',
'68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,149,60,,,,,',
',,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40',
',,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48',
',58,64,67,,,65,59,,60,151,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38',
'41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,',
',73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,',
'65,59,,162,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,',
',,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53',
'55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51',
'12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37',
'68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,',
',,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,',
'15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,',
'58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41',
',46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,',
',,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,',
',73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,',
'65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10',
'11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54',
'53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47',
',51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45',
',,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,',
',,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,',
',40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49',
'38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70',
'71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,',
',18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,',
',,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67',
',,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,179,194,185,195,51,187,197,188,38',
'178,,181,176,,,,,72,17,198,193,177,,,15,175,,,,,,,73,,,,,196,180,,,',
'37,68,,70,71,,,,189,190,192,191,55,56,57,,186,,58,64,67,,,65,59,,60',
',,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,',
'40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,222,37,68,,70',
'71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,',
',18,224,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16',
',,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64',
'67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46',
'39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52',
'54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44',
',47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45',
',,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,',
',,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40',
',,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48',
',58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,252,,,,,44,,47,,51,12,,49,38',
'41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,',
',73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,',
'65,59,,60,151,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39',
'10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52',
'54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,287,,,,,,,,,,,,,,18,,,,,',
'44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,',
',45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60',
',,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,',
'40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,324,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,',
'49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68',
',70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,334,,,,,,,',
',,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,',
'15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,',
'58,64,67,,,65,59,,60,336,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38',
'41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72',
'17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56',
'57,,48,,58,64,67,,,65,59,,60,351,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12',
',49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68',
',70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,',
',,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15',
'16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58',
'64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46',
'39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50',
'52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,',
'44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,',
',45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60',
',,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,',
'40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73',
',,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59',
',60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49',
'38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70',
'71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,390,,,,,,,,,,,',
',,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,,,,72,17,,,40,,,15,16,',
',,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67',
',,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10',
'11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54',
'53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47',
',51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45',
',,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,',
',,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,',
',40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49',
'38,41,,46,39,,,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71',
',,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,,,,,,,18',
',,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,',
',73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,',
'65,59,,60,,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,121,,49,38,41,,46,39,,',
',,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53',
'55,56,57,,48,,58,64,67,,,65,59,,60,420,,,,,,,,,,,,,,,,18,,,,,,44,,47',
',51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45',
',,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,426',
',,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17',
',,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57',
',48,,58,64,67,,,65,59,,60,428,,,,,,,,,,,,,,,,18,,,,,,44,,47,,51,12,',
'49,38,41,,46,39,10,11,,,72,17,,,40,,,15,16,,,,,,,73,,,,,,45,,,,37,68',
',70,71,,,,50,52,54,53,55,56,57,,48,,58,64,67,,,65,59,,60,,,,,,,,,,,',
',,,,,18,,,,,,44,,47,,51,12,,49,38,41,,46,39,10,11,,,72,17,,,40,,,15',
'16,,,,,,,73,,,,,,45,,,,37,68,,70,71,,,,50,52,54,53,55,56,57,,48,,58',
'64,67,,,65,59,,60,,86,,,,,,,,,,,,,,107,18,110,,105,106,,44,,47,,51,121',
',49,38,41,,46,39,,,,,72,17,109,,40,,,15,16,,,,93,92,,73,,88,89,,,45',
',,87,37,68,,70,71,,,86,50,52,54,53,55,56,57,,48,,58,102,97,107,,110',
'94,105,106,,98,100,99,101,,,,,,,,,,,,,,,,109,,,,104,103,,,90,91,93,92',
'95,96,,88,89,86,,253,,,87,,,,,,,102,97,107,,110,,105,106,,98,100,99',
'101,,,,,,94,,,,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,254',
',,87,,,,,,,102,97,107,,110,,105,106,,98,100,99,101,,,,,,94,,,,,,,,,',
'109,,,,104,103,,,90,91,93,92,95,96,,88,89,86,,255,,,87,,,,,,,102,97',
'107,,110,,105,106,,98,100,99,101,,,,,,94,,,,,,,,,,109,,,,104,103,,,90',
'91,93,92,95,96,86,88,89,,,,,,87,,,,102,97,107,,110,,105,106,,98,100',
'99,101,,,,,,,,,94,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,,88,89,,',
',,,87,,,,,86,,,,,,280,281,,,,,102,97,107,284,110,,105,106,94,98,100',
'99,101,,,,,,,,,,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,86,88,89,,',
',,,87,,,,102,97,107,,110,,105,106,86,98,100,99,101,,,,,,,,,94,107,,110',
',105,106,109,,,,104,103,,,90,91,93,92,95,96,,88,89,,,,109,,87,,,86,',
',,,93,92,,,,88,89,,,107,,110,87,105,106,86,,94,,,,,,,,,,,,107,,110,',
'105,106,109,,94,,,,,,90,91,93,92,,,,88,89,,,,109,,87,,,86,,,90,91,93',
'92,,,,88,89,,,107,,110,87,105,106,86,,94,,,,,,,,,,,,107,,110,,105,106',
'109,,94,,,,,,90,91,93,92,95,96,,88,89,,,,109,,87,,,86,,,90,91,93,92',
'95,96,,88,89,,97,107,,110,87,105,106,86,98,94,,,,,,,,,,,97,107,,110',
',105,106,109,98,94,,,,,,90,91,93,92,95,96,,88,89,,,,109,,87,,,86,,,90',
'91,93,92,95,96,,88,89,,97,107,,110,87,105,106,86,98,94,,,,,,,,,,,97',
'107,,110,,105,106,109,98,94,,,,,,90,91,93,92,95,96,,88,89,,,,109,,87',
',,,,,90,91,93,92,95,96,,88,89,86,,,,,87,,,,,94,,102,97,107,,110,,105',
'106,86,98,100,99,101,,,,,,94,,102,97,107,,110,,105,106,109,98,100,99',
'101,,,,90,91,93,92,95,96,,88,89,,,,109,,87,,,103,,,90,91,93,92,95,96',
',88,89,,86,,,,87,292,,,,94,,,102,97,107,,110,,105,106,,98,100,99,101',
',,,,94,,,,,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87',
',,,102,97,107,,110,,105,106,,98,100,99,101,,,,,,,,,94,,,,,,,109,,,,104',
'103,,,90,91,93,92,95,96,86,88,89,,,,,,87,,,,102,97,107,317,110,,105',
'106,,98,100,99,101,,,,,,,,,94,,,,,,,109,,,,104,103,,,90,91,93,92,95',
'96,86,88,89,,,,,,87,,,,102,97,107,,110,,105,106,,98,100,99,101,,,,,',
',,,94,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,,,,102',
'97,107,,110,,105,106,,98,100,99,101,,,,,,,,,94,,,,,,,109,,,,104,103',
',,90,91,93,92,95,96,86,88,89,,,,,,87,,,,102,97,107,,110,,105,106,,98',
'100,99,101,,,,,,,,,94,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,86,88',
'89,,,,,,87,,,,102,97,107,,110,,105,106,,98,100,99,101,,,,,,,,,94,,,',
',,,109,,,,104,103,,,90,91,93,92,95,96,86,88,89,,,,,,87,,,,102,97,107',
',110,,105,106,,98,100,99,101,,,,,,,,,94,,,,,,,109,,,,104,103,,,90,91',
'93,92,95,96,86,88,89,,,,,,87,,,,102,97,107,,110,,105,106,,98,100,99',
'101,,,,,,,,,94,,,,,,,109,,,,104,103,,,90,91,93,92,95,96,,88,89,,,,,',
'87,,,,,,,,,,,,,,,,,,,,,,,,,94' ]
        racc_action_table = arr = ::Array.new(9186, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,251,176,0,0,337,0,7,7,7,1,249,260,177,337,251,334,12,334,200,12',
'178,184,0,200,150,49,49,150,0,49,0,249,0,0,47,0,0,0,5,0,0,0,0,176,260',
'0,0,12,8,0,190,12,0,0,177,7,7,7,7,12,0,42,178,184,49,47,0,49,43,47,0',
'0,191,0,0,0,192,47,0,0,0,0,0,0,0,202,0,49,0,4,4,68,190,4,4,381,4,49',
'49,202,381,202,69,202,202,158,158,48,74,158,50,155,155,4,191,76,188',
'188,192,4,188,4,107,4,4,202,4,4,4,4,4,4,4,4,108,326,4,4,48,111,4,50',
'48,4,4,50,112,202,326,114,48,4,382,50,382,188,326,4,188,356,356,4,4',
'124,4,4,121,126,133,4,4,4,4,4,4,4,203,4,188,4,10,10,134,135,10,10,137',
'10,188,188,203,144,203,146,203,203,148,121,185,153,164,121,169,170,10',
'171,172,259,259,121,10,259,10,174,10,10,203,10,10,10,223,10,10,10,10',
'224,228,10,10,185,230,10,231,185,10,10,234,241,203,247,248,185,10,250',
'256,257,259,258,10,259,186,187,10,10,261,10,10,189,263,264,10,10,10',
'10,10,10,10,277,10,259,10,11,11,282,236,11,11,283,11,259,259,186,187',
'236,285,186,187,293,189,320,295,297,189,186,187,11,236,299,344,344,189',
'11,344,11,236,11,11,315,11,11,11,318,11,11,11,11,322,323,11,11,320,325',
'11,333,320,11,11,320,335,127,336,342,320,11,355,357,365,344,367,11,344',
'368,127,11,11,371,11,11,376,385,127,11,11,11,11,11,11,11,120,11,344',
'11,15,15,127,206,15,15,386,15,344,344,120,388,120,389,120,120,392,206',
'395,206,398,206,206,401,15,402,408,419,425,427,15,160,15,429,15,15,120',
'15,15,15,433,15,15,206,160,,,15,15,,,15,160,,15,15,,,206,206,,,15,,',
'206,160,,15,,,,15,15,,15,15,,,,15,15,15,15,15,15,15,122,15,,15,16,16',
',207,16,16,,16,,123,122,,122,,122,122,,207,,207,,207,207,123,16,123',
',123,123,,16,,16,,16,16,122,16,16,16,,16,16,207,,,,16,16,123,,16,,,16',
'16,,,207,207,,,16,,,207,,,16,,,,16,16,,16,16,,,,16,16,16,16,16,16,16',
'201,16,,16,17,17,,208,17,17,,17,,,201,,201,,201,201,,208,,208,,208,208',
',17,,,,,,17,,17,,17,17,201,17,17,17,,17,17,208,,,,17,17,,,17,,,17,17',
',,208,208,,,17,,,208,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,17,17,,17',
',17,18,18,,,18,18,,18,226,226,226,226,,226,226,226,,226,,226,226,,,',
'18,,,226,226,226,18,,18,226,18,18,,18,18,18,,18,18,18,18,226,226,18',
'18,,,18,,,18,18,,,226,226,226,226,18,,,,226,,18,,,,18,18,,18,18,,,,18',
'18,18,18,18,18,18,,18,,18,44,44,,,44,44,,44,284,284,284,284,,284,284',
'284,,284,,284,284,,,,44,,,284,284,284,44,,44,284,44,44,,44,44,44,,44',
'44,,,284,284,44,44,,,44,,,44,44,,,284,284,284,284,44,,,,284,,44,,,,44',
'44,,44,44,,,,44,44,44,44,44,44,44,,44,,44,45,45,,,45,45,,45,286,286',
'286,286,,286,286,286,,286,,286,286,,,,45,,,286,286,286,45,,45,286,45',
'45,,45,45,45,,45,45,,,286,286,45,45,,,45,,,45,45,,,286,286,286,286,45',
',,,286,,45,,,,45,45,,45,45,,,,45,45,45,45,45,45,45,,45,,45,46,46,,,46',
'46,,46,317,317,317,317,,317,317,317,,317,,317,317,,,,46,,,317,317,317',
'46,,46,317,46,46,,46,46,46,,46,46,,,317,317,46,46,,,46,,,46,46,,,317',
'317,317,317,46,,,,317,,46,,,,46,46,,46,46,,,,46,46,46,46,46,46,46,,46',
',46,58,58,,,58,58,58,58,,,,,,,,,,,,,,,,,58,,,,,,58,,58,,58,58,,58,58',
'58,,58,58,58,58,,,58,58,,,58,,,58,58,,,,,,,58,,,,,,58,,,,58,58,,58,58',
',,,58,58,58,58,58,58,58,,58,,58,59,59,,,59,59,59,59,,,,,,,,,,,,,,,,',
'59,,,,,,59,,59,,59,59,,59,59,59,,59,59,59,59,,,59,59,,,59,,,59,59,,',
',,,,59,,,,,,59,,,,59,59,,59,59,,,,59,59,59,59,59,59,59,,59,,59,60,60',
',,60,60,,60,60,,,,,,,,,,,,,,,,60,,,,,,60,,60,,60,60,,60,60,60,,60,60',
'60,60,,,60,60,,,60,,,60,60,,,,,,,60,,,,,,60,,,,60,60,,60,60,,,,60,60',
'60,60,60,60,60,,60,,60,66,66,,,66,66,,66,,,,,,,,,,,,,,,,,66,,,,,,66',
',66,,66,66,,66,66,66,,66,66,66,66,,,66,66,,,66,,,66,66,,,,,,,66,,,,',
',66,,,,66,66,,66,66,,,,66,66,66,66,66,66,66,,66,,66,71,71,,,71,71,,71',
',,,,,,,,,,,,,,,,71,,,,,,71,,71,,71,71,,71,71,71,,71,71,,,,,71,71,,,71',
',,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71,71,,71',
',71,75,75,,,75,75,,75,,,,,,,,,,,,,,,,,75,,,,,,75,,75,,75,75,,75,75,75',
',75,75,75,75,,,75,75,,,75,,,75,75,,,,,,,75,,,,,,75,,,,75,75,,75,75,',
',,75,75,75,75,75,75,75,,75,,75,77,77,,,77,77,,77,,,,,,,,,,,,,,,,,77',
',,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,',
',77,,,,,,77,,,,77,77,,77,77,,,,77,77,77,77,77,77,77,,77,,77,78,78,,',
'78,78,,78,,,,,,,,,,,,,,,,,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,78',
'78,,,78,78,,,78,,,78,78,,,,,,,78,,,,,,78,,,,78,78,,78,78,,,,78,78,78',
'78,78,78,78,,78,,78,79,79,,,79,79,,79,,,,,,,,,,,,,,,,,79,,,,,,79,,79',
',79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,,,79,,,,,,79',
',,,79,79,,79,79,,,,79,79,79,79,79,79,79,,79,,79,80,80,,,80,80,,80,,',
',,,,,,,,,,,,,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,80,80,,,80,80,',
',80,,,80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80,,,,80,80,80,80,80,80,80',
',80,,80,81,81,,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,,81,,81,,81,81,,81',
'81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,,,81,,,,,,81,,,,81,81,,81',
'81,,,,81,81,81,81,81,81,81,,81,,81,82,82,,,82,82,,82,,,,,,,,,,,,,,,',
',82,,,,,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,',
',,,,,82,,,,,,82,,,,82,82,,82,82,,,,82,82,82,82,82,82,82,,82,,82,83,83',
',,83,83,,83,,,,,,,,,,,,,,,,,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,83',
'83,,,83,83,,,83,,,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83',
'83,83,83,83,,83,,83,84,84,,,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84',
',84,84,,84,84,84,,84,84,84,84,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84',
',,,84,84,,84,84,,,,84,84,84,84,84,84,84,,84,,84,85,85,,,85,85,,85,,',
',,,,,,,,,,,,,,85,,,,,,85,85,85,85,85,85,85,85,85,85,,85,85,,,,,85,85',
'85,85,85,,,85,85,,,,,,,85,,,,,85,85,,,,85,85,,85,85,,,,85,85,85,85,85',
'85,85,,85,,85,86,86,,,86,86,,86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86',
',86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86',
'86,,,,86,86,86,86,86,86,86,,86,,86,87,87,,,87,87,,87,,,,,,,,,,,,,,,',
',87,,,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,',
',87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87,87,87,87,,87,,87,88,88,,',
'88,88,,88,,,,,,,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,,,',
',88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88',
'88,88,88,,88,,88,89,89,,,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89',
'89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89',
',89,89,,,,89,89,89,89,89,89,89,,89,,89,90,90,,,90,90,,90,,,,,,,,,,,',
',,,,,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,',
',,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,90,90,,90,,90,91,91',
',,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,',
',,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91',
'91,91,91,,91,,91,92,92,,,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92',
'92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92',
',92,92,,,,92,92,92,92,92,92,92,,92,,92,93,93,,,93,93,,93,,,,,,,,,,,',
',,,,,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,',
',,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,93,93,,93,,93,94,94',
',,94,94,,94,,,,,,,,,,,,,,,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,',
',,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94',
'94,94,94,,94,,94,95,95,,,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95',
'95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95',
',95,95,,,,95,95,95,95,95,95,95,,95,,95,96,96,,,96,96,,96,,,,,,,,,,,',
',,,,,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,',
',,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96,,96,,96,97,97',
',,97,97,,97,,,,,,,,,,,,,,,,,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,',
',,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97',
'97,97,97,,97,,97,98,98,,,98,98,,98,,,,,,,,,,,,,,,,,98,,,,,,98,,98,,98',
'98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98',
',98,98,,,,98,98,98,98,98,98,98,,98,,98,99,99,,,99,99,,99,,,,,,,,,,,',
',,,,,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,',
',,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,99,99,,99,,99,100',
'100,,,100,100,,100,,,,,,,,,,,,,,,,,100,,,,,,100,,100,,100,100,,100,100',
'100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100',
',100,100,,,,100,100,100,100,100,100,100,,100,,100,101,101,,,101,101',
',101,,,,,,,,,,,,,,,,,101,,,,,,101,,101,,101,101,,101,101,101,,101,101',
',,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,',
',,101,101,101,101,101,101,101,,101,,101,102,102,,,102,102,,102,,,,,',
',,,,,,,,,,,102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102',
'102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102',
'102,102,102,102,102,,102,,102,103,103,,,103,103,,103,,,,,,,,,,,,,,,',
',103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103',
',,103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103',
'103,103,103,,103,,103,104,104,,,104,104,,104,,,,,,,,,,,,,,,,,104,,,',
',,104,,104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104',
',,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,104,104',
',104,,104,105,105,,,105,105,,105,,,,,,,,,,,,,,,,,105,,,,,,105,,105,',
'105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105',
',,,,,105,,,105,105,105,,105,105,,,,105,105,105,105,105,105,105,,105',
',105,106,106,,,106,106,,106,,,,,,,,,,,,,,,,,106,106,,,,,106,,106,,106',
'106,,106,106,106,,106,106,106,106,,,106,106,,,106,,,106,106,,,,,,,106',
',,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106,106,,106,,106',
'109,109,,,109,109,,109,,,,,,,,,,,,,,,,,109,,,,,,109,,109,,109,109,,109',
'109,109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109',
'109,,109,109,,,,109,109,109,109,109,109,109,,109,,109,110,110,,,110',
'110,,110,,,,,,,,,,,,,,,,,110,,,,,,110,,110,,110,110,,110,110,110,,110',
'110,,,,,110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110',
',,,110,110,110,110,110,110,110,,110,,110,113,113,,,113,113,,113,,,,',
',,,,,,,,,,,,113,,,,,,113,,113,,113,113,,113,113,113,,113,113,,,,,113',
'113,,,113,,,113,113,,,,,,,113,,,,,,113,,,,113,113,,113,113,,,,113,113',
'113,113,113,113,113,,113,,113,128,128,,,128,128,,128,,,,,,,,,,,,,,,',
',128,128,,,,,128,,128,,128,128,,128,128,128,,128,128,128,128,,,128,128',
',,128,,,128,128,,,,,,,128,,,,,,128,,,,128,128,,128,128,,,,128,128,128',
'128,128,128,128,,128,,128,159,159,,,159,159,,159,,,,,,,,,,,,,,,,,159',
',,,,,159,,159,,159,159,,159,159,159,,159,159,159,159,,,159,159,,,159',
',,159,159,,,,,,,159,,,,,,159,,,,159,159,,159,159,,,,159,159,159,159',
'159,159,159,,159,,159,162,162,,,162,162,,162,162,,,,,,,,,,,,,,,,162',
',,,,,162,,162,,162,162,,162,162,162,,162,162,162,162,,,162,162,,,162',
',,162,162,,,,,,,162,,,,,,162,,,,162,162,,162,162,,,,162,162,162,162',
'162,162,162,,162,,162,175,175,,,175,175,,175,,,175,,,,,,,,,,,,,,175',
',,,,,175,,175,,175,175,,175,175,175,,175,175,,,,,175,175,,,175,,,175',
'175,,,,,,,175,,,,,,175,,,,175,175,,175,175,,,,175,175,175,175,175,175',
'175,,175,,175,179,179,,,179,179,,179,,,,,,,,,,,,,,,,,179,,,,,,179,,179',
',179,179,,179,179,179,,179,179,,,,,179,179,,,179,,,179,179,,,,,,,179',
',,,,,179,,,,179,179,,179,179,,,,179,179,179,179,179,179,179,,179,,179',
'180,180,,,180,180,,180,,,,,,,,,,,,,,,,,180,,,,,,180,,180,,180,180,,180',
'180,180,,180,180,,,,,180,180,,,180,,,180,180,,,,,,,180,,,,,,180,,,,180',
'180,,180,180,,,,180,180,180,180,180,180,180,,180,,180,181,181,,,181',
'181,,181,,,,,,,,,,,,,,,,,181,,,,,,181,,181,,181,181,,181,181,181,,181',
'181,,,,,181,181,,,181,,,181,181,,,,,,,181,,,,,,181,,,,181,181,,181,181',
',,,181,181,181,181,181,181,181,,181,,181,222,222,,,222,222,,222,,,,',
',,,,,,,,,,,,222,,,,,,222,,222,,222,222,,222,222,222,,222,222,,,,,222',
'222,,,222,,,222,222,,,,,,,222,,,,,,222,,,,222,222,,222,222,,,,222,222',
'222,222,222,222,222,,222,,222,239,239,,,239,239,,239,239,,,,,,,,,,,',
',,,,239,,,,,,239,,239,,239,239,,239,239,239,,239,239,239,239,,,239,239',
',,239,,,239,239,,,,,,,239,,,,,,239,,,,239,239,,239,239,,,,239,239,239',
'239,239,239,239,,239,,239,253,253,,,253,253,,253,253,,,,,,,,,,,,,,,',
'253,,,,,,253,,253,,253,253,,253,253,253,,253,253,253,253,,,253,253,',
',253,,,253,253,,,,,,,253,,,,,,253,,,,253,253,,253,253,,,,253,253,253',
'253,253,253,253,,253,,253,254,254,,,254,254,,254,254,,,,,,,,,,,,,,,',
'254,,,,,,254,,254,,254,254,,254,254,254,,254,254,254,254,,,254,254,',
',254,,,254,254,,,,,,,254,,,,,,254,,,,254,254,,254,254,,,,254,254,254',
'254,254,254,254,,254,,254,255,255,,,255,255,,255,,,,,,,,,,,,,,,,,255',
',,,,,255,,255,,255,255,,255,255,255,,255,255,,,,,255,255,,,255,,,255',
'255,,,,,,,255,,,,,,255,,,,255,255,,255,255,,,,255,255,255,255,255,255',
'255,,255,,255,262,262,,,262,262,,262,,,,,,,,,,,,,,,,,262,,,,,,262,,262',
',262,262,,262,262,262,,262,262,262,262,,,262,262,,,262,,,262,262,,,',
',,,262,,,,,,262,,,,262,262,,262,262,,,,262,262,262,262,262,262,262,',
'262,,262,266,266,,,266,266,,266,266,,,,,,,,,,,,,,,,266,,,,,,266,,266',
',266,266,,266,266,266,,266,266,266,266,,,266,266,,,266,,,266,266,,,',
',,,266,,,,,,266,,,,266,266,,266,266,,,,266,266,266,266,266,266,266,',
'266,,266,267,267,,,267,267,,267,,,,,,,,,,,,,,,,,267,,,,,,267,,267,,267',
'267,,267,267,267,,267,267,267,267,,,267,267,,,267,,,267,267,,,,,,,267',
',,,,,267,,,,267,267,,267,267,,,,267,267,267,267,267,267,267,,267,,267',
'272,272,,,272,272,,272,,,,,,,,,,,,,,,,,272,,,,,,272,,272,,272,272,,272',
'272,272,,272,272,272,272,,,272,272,,,272,,,272,272,,,,,,,272,,,,,,272',
',,,272,272,,272,272,,,,272,272,272,272,272,272,272,,272,,272,287,287',
',,287,287,,287,,,,,,,,,,,,,,,,,287,,,,,,287,,287,,287,287,,287,287,287',
',287,287,,,,,287,287,,,287,,,287,287,,,,,,,287,,,,,,287,,,,287,287,',
'287,287,,,,287,287,287,287,287,287,287,,287,,287,288,288,,,288,288,',
'288,,,,,,,,,,,,,,,,,288,,,,,,288,,288,,288,288,,288,288,288,,288,288',
',,,,288,288,,,288,,,288,288,,,,,,,288,,,,,,288,,,,288,288,,288,288,',
',,288,288,288,288,288,288,288,,288,,288,289,289,,,289,289,,289,,,,,',
',,,,,,,,,,,289,,,,,,289,,289,,289,289,,289,289,289,,289,289,,,,,289',
'289,,,289,,,289,289,,,,,,,289,,,,,,289,,,,289,289,,289,289,,,,289,289',
'289,289,289,289,289,,289,,289,291,291,,,291,291,,291,,,,,,,,,,,,,,,',
',291,,,,,,291,,291,,291,291,,291,291,291,,291,291,,,,,291,291,,,291',
',,291,291,,,,,,,291,,,,,,291,,,,291,291,,291,291,,,,291,291,291,291',
'291,291,291,,291,,291,292,292,,,292,292,,292,,,,,,,,,,,,,,,,,292,,,',
',,292,,292,,292,292,,292,292,292,,292,292,,,,,292,292,,,292,,,292,292',
',,,,,,292,,,,,,292,,,,292,292,,292,292,,,,292,292,292,292,292,292,292',
',292,,292,316,316,,,316,316,,316,,,,,,,,,,,,,,,,,316,,,,,,316,,316,',
'316,316,,316,316,316,,316,316,,,,,316,316,,,316,,,316,316,,,,,,,316',
',,,,,316,,,,316,316,,316,316,,,,316,316,316,316,316,316,316,,316,,316',
'327,327,,,327,327,,327,,,,,,,,,,,,,,,,,327,,,,,,327,,327,,327,327,,327',
'327,327,,327,327,,,,,327,327,,,327,,,327,327,,,,,,,327,,,,,,327,,,,327',
'327,,327,327,,,,327,327,327,327,327,327,327,,327,,327,330,330,,,330',
'330,,330,,,,,,,,,,,,,,,,,330,,,,,,330,,330,,330,330,,330,330,330,,330',
'330,,,,,330,330,,,330,,,330,330,,,,,,,330,,,,,,330,,,,330,330,,330,330',
',,,330,330,330,330,330,330,330,,330,,330,331,331,,,331,331,,331,,,,',
',,,,,,,,,,,,331,,,,,,331,,331,,331,331,,331,331,331,,331,331,331,331',
',,331,331,,,331,,,331,331,,,,,,,331,,,,,,331,,,,331,331,,331,331,,,',
'331,331,331,331,331,331,331,,331,,331,338,338,,,338,338,,338,338,,,',
',,,,,,,,,,,,338,,,,,,338,,338,,338,338,,338,338,338,,338,338,,,,,338',
'338,,,338,,,338,338,,,,,,,338,,,,,,338,,,,338,338,,338,338,,,,338,338',
'338,338,338,338,338,,338,,338,340,340,,,340,340,,340,,,,,,,,,,,,,,,',
',340,,,,,,340,,340,,340,340,,340,340,340,,340,340,340,340,,,340,340',
',,340,,,340,340,,,,,,,340,,,,,,340,,,,340,340,,340,340,,,,340,340,340',
'340,340,340,340,,340,,340,341,341,,,341,341,,341,,,,,,,,,,,,,,,,,341',
',,,,,341,,341,,341,341,,341,341,341,,341,341,341,341,,,341,341,,,341',
',,341,341,,,,,,,341,,,,,,341,,,,341,341,,341,341,,,,341,341,341,341',
'341,341,341,,341,,341,347,347,,,347,347,,347,,,,,,,,,,,,,,,,,347,,,',
',,347,,347,,347,347,,347,347,347,,347,347,347,347,,,347,347,,,347,,',
'347,347,,,,,,,347,,,,,,347,,,,347,347,,347,347,,,,347,347,347,347,347',
'347,347,,347,,347,366,366,,,366,366,,366,,,,,,,,,,,,,,,,,366,,,,,,366',
',366,,366,366,,366,366,366,,366,366,,,,,366,366,,,366,,,366,366,,,,',
',,366,,,,,,366,,,,366,366,,366,366,,,,366,366,366,366,366,366,366,,366',
',366,372,372,,,372,372,,372,,,,,,,,,,,,,,,,,372,,,,,,372,,372,,372,372',
',372,372,372,,372,372,372,372,,,372,372,,,372,,,372,372,,,,,,,372,,',
',,,372,,,,372,372,,372,372,,,,372,372,372,372,372,372,372,,372,,372',
'384,384,,,384,384,,384,,,,,,,,,,,,,,,,,384,,,,,,384,,384,,384,384,,384',
'384,384,,384,384,,,,,384,384,,,384,,,384,384,,,,,,,384,,,,,,384,,,,384',
'384,,384,384,,,,384,384,384,384,384,384,384,,384,,384,396,396,,,396',
'396,,396,396,,,,,,,,,,,,,,,,396,,,,,,396,,396,,396,396,,396,396,396',
',396,396,396,396,,,396,396,,,396,,,396,396,,,,,,,396,,,,,,396,,,,396',
'396,,396,396,,,,396,396,396,396,396,396,396,,396,,396,413,413,,,413',
'413,,413,413,,,,,,,,,,,,,,,,413,,,,,,413,,413,,413,413,,413,413,413',
',413,413,413,413,,,413,413,,,413,,,413,413,,,,,,,413,,,,,,413,,,,413',
'413,,413,413,,,,413,413,413,413,413,413,413,,413,,413,415,415,,,415',
'415,,415,415,,,,,,,,,,,,,,,,415,,,,,,415,,415,,415,415,,415,415,415',
',415,415,415,415,,,415,415,,,415,,,415,415,,,,,,,415,,,,,,415,,,,415',
'415,,415,415,,,,415,415,415,415,415,415,415,,415,,415,416,416,,,416',
'416,,416,,,,,,,,,,,,,,,,,416,,,,,,416,,416,,416,416,,416,416,416,,416',
'416,416,416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416,,,,416,416',
',416,416,,,,416,416,416,416,416,416,416,,416,,416,423,423,,,423,423',
',423,,204,,,,,,,,,,,,,,204,423,204,,204,204,,423,,423,,423,423,,423',
'423,423,,423,423,,,,,423,423,204,,423,,,423,423,,,,204,204,,423,,204',
'204,,,423,,,204,423,423,,423,423,,,9,423,423,423,423,423,423,423,,423',
',423,9,9,9,,9,204,9,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,,9,9,,,9,9,9,9,9,9',
',9,9,129,,129,,,9,,,,,,,129,129,129,,129,,129,129,,129,129,129,129,',
',,,,9,,,,,,,,,,129,,,,129,129,,,129,129,129,129,129,129,,129,129,131',
',131,,,129,,,,,,,131,131,131,,131,,131,131,,131,131,131,131,,,,,,129',
',,,,,,,,,131,,,,131,131,,,131,131,131,131,131,131,,131,131,132,,132',
',,131,,,,,,,132,132,132,,132,,132,132,,132,132,132,132,,,,,,131,,,,',
',,,,,132,,,,132,132,,,132,132,132,132,132,132,161,132,132,,,,,,132,',
',,161,161,161,,161,,161,161,,161,161,161,161,,,,,,,,,132,,,,,,,161,',
',,161,161,,,161,161,161,161,161,161,,161,161,,,,,,161,,,,,173,,,,,,161',
'161,,,,,173,173,173,173,173,,173,173,161,173,173,173,173,,,,,,,,,,,',
',,,,173,,,,173,173,,,173,173,173,173,173,173,199,173,173,,,,,,173,,',
',199,199,199,,199,,199,199,205,199,199,199,199,,,,,,,,,173,205,,205',
',205,205,199,,,,199,199,,,199,199,199,199,199,199,,199,199,,,,205,,199',
',,209,,,,,205,205,,,,205,205,,,209,,209,205,209,209,210,,199,,,,,,,',
',,,,210,,210,,210,210,209,,205,,,,,,209,209,209,209,,,,209,209,,,,210',
',209,,,211,,,210,210,210,210,,,,210,210,,,211,,211,210,211,211,212,',
'209,,,,,,,,,,,,212,,212,,212,212,211,,210,,,,,,211,211,211,211,211,211',
',211,211,,,,212,,211,,,213,,,212,212,212,212,212,212,,212,212,,213,213',
',213,212,213,213,214,213,211,,,,,,,,,,,214,214,,214,,214,214,213,214',
'212,,,,,,213,213,213,213,213,213,,213,213,,,,214,,213,,,215,,,214,214',
'214,214,214,214,,214,214,,215,215,,215,214,215,215,216,215,213,,,,,',
',,,,,216,216,,216,,216,216,215,216,214,,,,,,215,215,215,215,215,215',
',215,215,,,,216,,215,,,,,,216,216,216,216,216,216,,216,216,217,,,,,216',
',,,,215,,217,217,217,,217,,217,217,218,217,217,217,217,,,,,,216,,218',
'218,218,,218,,218,218,217,218,218,218,218,,,,217,217,217,217,217,217',
',217,217,,,,218,,217,,,218,,,218,218,218,218,218,218,,218,218,,219,',
',,218,219,,,,217,,,219,219,219,,219,,219,219,,219,219,219,219,,,,,218',
',,,,,,,,,,219,,,,219,219,,,219,219,219,219,219,219,227,219,219,,,,,',
'219,,,,227,227,227,,227,,227,227,,227,227,227,227,,,,,,,,,219,,,,,,',
'227,,,,227,227,,,227,227,227,227,227,227,232,227,227,,,,,,227,,,,232',
'232,232,232,232,,232,232,,232,232,232,232,,,,,,,,,227,,,,,,,232,,,,232',
'232,,,232,232,232,232,232,232,360,232,232,,,,,,232,,,,360,360,360,,360',
',360,360,,360,360,360,360,,,,,,,,,232,,,,,,,360,,,,360,360,,,360,360',
'360,360,360,360,361,360,360,,,,,,360,,,,361,361,361,,361,,361,361,,361',
'361,361,361,,,,,,,,,360,,,,,,,361,,,,361,361,,,361,361,361,361,361,361',
'362,361,361,,,,,,361,,,,362,362,362,,362,,362,362,,362,362,362,362,',
',,,,,,,361,,,,,,,362,,,,362,362,,,362,362,362,362,362,362,363,362,362',
',,,,,362,,,,363,363,363,,363,,363,363,,363,363,363,363,,,,,,,,,362,',
',,,,,363,,,,363,363,,,363,363,363,363,363,363,364,363,363,,,,,,363,',
',,364,364,364,,364,,364,364,,364,364,364,364,,,,,,,,,363,,,,,,,364,',
',,364,364,,,364,364,364,364,364,364,380,364,364,,,,,,364,,,,380,380',
'380,,380,,380,380,,380,380,380,380,,,,,,,,,364,,,,,,,380,,,,380,380',
',,380,380,380,380,380,380,,380,380,,,,,,380,,,,,,,,,,,,,,,,,,,,,,,,',
'380' ]
        racc_action_check = arr = ::Array.new(9186, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    11,   nil,   nil,    89,    27,   nil,    -8,    41,  7898,
   180,   271,    12,   nil,   nil,   362,   453,   544,   635,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    -8,    44,   726,   817,   908,    30,   103,    25,
   106,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   999,  1090,
  1181,   nil,   nil,   nil,   nil,   nil,  1272,   nil,    17,    33,
   nil,  1363,   nil,   nil,   110,  1454,   104,  1545,  1636,  1727,
  1818,  1909,  2000,  2091,  2182,  2273,  2364,  2455,  2546,  2637,
  2728,  2819,  2910,  3001,  3092,  3183,  3274,  3365,  3456,  3547,
  3638,  3729,  3820,  3911,  4002,  4093,  4184,    83,   127,  4275,
  4366,   132,   139,  4457,   125,   nil,   nil,   nil,   nil,   nil,
   353,   162,   444,   457,   138,   nil,   160,   295,  4548,  7955,
   nil,  8012,  8069,   144,   158,   172,   nil,   167,   nil,   nil,
   nil,   nil,   nil,   nil,   167,   nil,   182,   nil,   185,   nil,
    16,   nil,   nil,   189,   nil,   109,   nil,   nil,   105,  4639,
   359,  8123,  4730,   nil,   189,   nil,   nil,   nil,   nil,   195,
   196,   198,   199,  8190,   202,  4821,    -9,     2,    10,  4912,
  5003,  5094,   nil,   nil,    11,   194,   246,   247,   116,   253,
    40,    62,    66,   nil,   nil,   nil,   nil,   nil,   nil,  8244,
    12,   535,    80,   171,  7828,  8264,   360,   451,   542,  8309,
  8329,  8374,  8394,  8439,  8459,  8504,  8524,  8581,  8601,  8659,
   nil,   nil,  5185,   209,   156,   nil,   613,  8713,   180,   nil,
   208,   192,  8767,   nil,   200,   nil,   249,   nil,   nil,  5276,
   nil,   226,   nil,   nil,   nil,   nil,   nil,   225,   206,   -24,
   238,   -11,   nil,  5367,  5458,  5549,   237,   238,   211,   207,
   -28,   247,  5640,   252,   253,   nil,  5731,  5822,   nil,   nil,
   nil,   nil,  5913,   nil,   nil,   nil,   nil,   256,   nil,   nil,
   nil,   nil,   263,   269,   704,   276,   795,  6004,  6095,  6186,
   nil,  6277,  6368,   276,   nil,   265,   nil,   280,   nil,   287,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   299,  6459,   886,   304,   nil,
   285,   nil,   305,   309,   nil,   252,   101,  6550,   nil,   nil,
  6641,  6732,   nil,   315,   -16,   320,   299,    -7,  6823,   nil,
  6914,  7005,   324,   nil,   298,   nil,   nil,  7096,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   265,    81,   324,   nil,   nil,
  8821,  8875,  8929,  8983,  9037,   328,  7187,   269,   333,   nil,
   nil,   334,  7278,   nil,   nil,   nil,   323,   nil,   nil,   nil,
  9091,    89,   121,   nil,  7369,   342,   337,   nil,   366,   368,
   nil,   nil,   370,   nil,   nil,   372,  7460,   nil,   374,   nil,
   nil,   377,   347,   nil,   nil,   nil,   nil,   nil,   380,   nil,
   nil,   nil,   nil,  7551,   nil,  7642,  7733,   nil,   nil,   381,
   nil,   nil,   nil,  7824,   nil,   382,   nil,   383,   nil,   387,
   nil,   nil,   nil,   362,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -250,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -250,  -250,  -250,   -33,   -34,  -250,  -250,  -250,  -250,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -88,   -92,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -180,  -181,  -182,  -183,  -184,  -185,  -186,  -250,  -250,
  -250,  -197,  -198,  -199,  -200,  -201,  -250,  -203,  -250,  -216,
  -219,  -250,  -224,  -225,  -250,  -250,    -7,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -128,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,
  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -250,  -123,  -249,
  -249,   -22,   -23,  -250,  -249,  -139,  -161,  -162,  -163,  -164,
   -46,  -250,   -47,   -54,  -250,   -89,  -250,  -250,  -250,  -250,
   -99,  -250,  -250,  -249,  -249,  -226,  -148,  -150,  -151,  -152,
  -153,  -154,  -156,  -157,  -249,   -14,  -226,  -188,  -226,  -190,
  -250,  -193,  -194,  -250,  -202,  -250,  -207,  -210,  -250,  -214,
  -250,  -250,  -250,   438,    -6,    -9,   -11,   -12,   -13,   -17,
   -18,   -19,   -20,  -250,  -226,  -250,   -81,   -82,   -83,  -237,
  -243,  -231,  -129,  -132,  -250,  -234,  -248,  -232,  -240,  -246,
  -181,  -182,  -183,  -230,  -235,  -236,  -238,  -239,  -241,   -59,
  -250,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,  -250,
   -57,  -117,  -250,  -226,   -85,   -93,  -128,  -127,  -250,  -126,
  -250,  -228,  -250,   -28,  -249,  -165,  -250,   -58,   -94,  -250,
   -97,  -226,  -168,  -170,  -171,  -172,  -173,  -175,  -250,  -250,
  -178,  -250,   -91,  -250,  -250,  -250,  -250,  -250,  -249,  -227,
  -250,  -250,  -227,  -250,  -250,  -191,  -250,  -250,  -204,  -205,
  -206,  -208,  -250,  -211,  -212,  -213,  -215,  -226,  -217,  -220,
  -222,  -223,    -8,  -250,  -128,  -250,  -227,  -250,  -250,  -250,
   -35,  -250,  -250,  -226,  -119,  -250,   -87,  -226,  -131,  -250,
  -231,  -232,  -233,  -234,  -237,  -240,  -242,  -243,  -244,  -245,
  -246,  -247,  -248,  -124,  -125,  -250,  -229,  -128,  -250,  -142,
  -250,  -166,  -226,  -250,   -96,  -250,  -227,  -250,  -176,  -177,
  -250,  -250,   -90,  -250,  -102,  -250,  -108,  -250,  -250,  -112,
  -249,  -249,  -250,  -158,  -250,  -149,  -155,  -249,   -15,  -187,
  -189,  -192,  -195,  -196,  -209,  -250,  -250,  -226,   -26,  -130,
  -135,  -133,  -134,   -60,  -121,  -250,  -227,   -84,  -250,   -25,
   -29,  -226,  -249,  -143,  -144,  -145,  -250,   -95,   -98,  -169,
  -174,  -250,  -102,  -101,  -250,  -250,  -108,  -107,  -250,  -250,
  -111,  -113,  -250,  -140,  -141,  -250,  -250,  -159,  -250,  -218,
  -221,  -250,   -30,  -118,  -120,   -86,  -122,   -27,  -250,  -167,
  -179,  -100,  -103,  -250,  -106,  -250,  -249,  -136,  -137,  -250,
  -147,  -160,   -24,   -31,  -138,  -250,  -105,  -250,  -110,  -250,
  -115,  -116,  -146,  -228,  -104,  -109,  -114,   -32 ]

racc_goto_table = [
     2,   120,   122,   123,   125,   231,   140,   221,   138,   154,
   279,   133,   134,   174,   144,   200,   241,   315,   250,   229,
   229,   345,   258,    76,   339,   228,   230,   392,   395,     1,
   129,   131,   132,   263,   398,   264,   234,     3,   401,   370,
   111,   112,   387,   220,   238,   146,   148,   412,   338,   277,
   383,   250,   429,   293,   359,   256,   257,   161,   318,   408,
   124,   285,   373,   342,   346,   379,   261,   329,   328,   352,
   273,   173,   199,   201,   202,   203,   204,   205,   206,   207,
   208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   414,   223,   164,   227,   227,   274,   411,   232,
   145,   145,   153,   271,   272,   270,   397,   391,   156,   157,
   295,   169,   170,   171,   172,   251,   159,   275,   nil,   165,
   166,   167,   168,   nil,   294,   322,   nil,   250,   325,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   319,   140,   nil,   138,   145,   133,
   134,   nil,   nil,   144,   297,   nil,   nil,   nil,   nil,   276,
   nil,   122,   283,   nil,   355,   129,   131,   132,   343,   nil,
   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   365,   nil,   nil,   nil,   368,   nil,   296,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   282,   400,   nil,   nil,   219,   376,
   nil,   nil,   357,   nil,   nil,   354,   140,   250,   138,   437,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   323,
   nil,   199,   nil,   nil,   402,   371,   nil,   nil,   nil,   nil,
   394,   394,   nil,   333,   335,   nil,   nil,   394,   407,   381,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   404,   nil,
   nil,   nil,   nil,   360,   361,   362,   nil,   363,   364,   nil,
   nil,   nil,   394,   nil,   374,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   140,   232,   138,   348,   nil,   nil,   nil,   153,   353,
   nil,   nil,   nil,   380,   156,   433,   199,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   199,   nil,   430,   nil,   nil,   405,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   219,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   129,   nil,   nil,   348,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   419,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   232,
   nil,   nil,   nil,   425,   nil,   427,   431 ]

racc_goto_check = [
     2,    10,    10,    10,    39,    13,    36,    52,    37,    82,
    90,    59,    59,    11,    59,    19,    44,    14,    38,    51,
    51,    67,    15,     5,    49,    55,    55,    61,    61,     1,
    10,    10,    10,    15,    61,    15,    60,     3,    12,    16,
     9,     9,    47,    20,    43,     8,     8,    45,    48,    44,
    46,    38,    50,    53,    56,    60,    60,    10,    63,    61,
     6,    15,    64,    66,    69,    70,    60,    71,    73,    77,
    78,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    47,     8,     5,    10,    10,    79,    46,    10,
     6,     6,     6,    83,    84,    86,    67,    49,     6,    87,
    15,     9,     9,     9,     9,     8,    88,    89,   nil,     6,
     6,     6,     6,   nil,    52,    44,   nil,    38,    15,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    51,    36,   nil,    37,     6,    59,
    59,   nil,   nil,    59,    11,   nil,   nil,   nil,   nil,     2,
   nil,    10,     2,   nil,    15,    10,    10,    10,    51,   nil,
     6,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    15,   nil,   nil,   nil,    15,   nil,    39,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     6,    90,   nil,   nil,    10,    15,
   nil,   nil,    11,   nil,   nil,    82,    36,    38,    37,    14,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,    10,   nil,   nil,    15,    11,   nil,   nil,   nil,   nil,
    51,    51,   nil,     2,     2,   nil,   nil,    51,    15,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,   nil,
   nil,   nil,   nil,    10,    10,    10,   nil,    10,    10,   nil,
   nil,   nil,    51,   nil,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    36,    10,    37,     6,   nil,   nil,   nil,     6,     6,
   nil,   nil,   nil,    10,     6,    13,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    10,   nil,    51,   nil,   nil,    39,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    29,     0,    37,   nil,    19,    42,   nil,   -13,    30,
   -14,   -72,  -319,  -108,  -214,  -113,  -277,   nil,   nil,   -71,
   -62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   -43,   -41,  -109,   -38,
   nil,   nil,   nil,   -82,  -111,  -337,  -284,  -294,  -207,  -231,
  -364,   -90,   -98,  -169,   nil,   -84,  -232,   nil,   nil,   -36,
   -78,  -313,   nil,  -176,  -258,   nil,  -195,  -238,   nil,  -196,
  -261,  -182,   nil,  -180,   nil,   nil,   nil,  -197,   -88,   -61,
   nil,   nil,   -57,   -52,   -51,   nil,   -50,    41,    47,   -42,
  -151 ]

racc_goto_default = [
   nil,   nil,   393,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   233,    13,    14,   337,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,   nil,
    42,    43,   126,   nil,   nil,   130,   nil,   nil,   nil,   nil,
   nil,   235,   nil,   nil,   108,   nil,   182,   184,   183,   115,
   nil,   nil,   114,   nil,   nil,   135,   nil,   136,   137,   141,
   242,   243,   244,   245,   246,   249,   150,   152,    61,    62,
    63,    66,   nil,   nil,   nil,   155,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 96, :_reduce_1,
  1, 96, :_reduce_2,
  0, 96, :_reduce_3,
  1, 97, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 100, :_reduce_8,
  3, 100, :_reduce_9,
  1, 101, :_reduce_none,
  3, 101, :_reduce_11,
  3, 101, :_reduce_12,
  3, 101, :_reduce_13,
  1, 103, :_reduce_14,
  3, 103, :_reduce_15,
  1, 102, :_reduce_none,
  3, 102, :_reduce_17,
  3, 102, :_reduce_18,
  3, 102, :_reduce_19,
  3, 102, :_reduce_20,
  1, 104, :_reduce_none,
  2, 104, :_reduce_22,
  2, 104, :_reduce_23,
  7, 104, :_reduce_24,
  5, 104, :_reduce_25,
  5, 104, :_reduce_26,
  4, 111, :_reduce_27,
  1, 108, :_reduce_28,
  3, 108, :_reduce_29,
  1, 107, :_reduce_30,
  2, 107, :_reduce_31,
  4, 107, :_reduce_32,
  1, 105, :_reduce_none,
  1, 105, :_reduce_none,
  4, 105, :_reduce_35,
  3, 105, :_reduce_36,
  3, 105, :_reduce_37,
  3, 105, :_reduce_38,
  3, 105, :_reduce_39,
  3, 105, :_reduce_40,
  3, 105, :_reduce_41,
  3, 105, :_reduce_42,
  3, 105, :_reduce_43,
  3, 105, :_reduce_44,
  3, 105, :_reduce_45,
  2, 105, :_reduce_46,
  2, 105, :_reduce_47,
  3, 105, :_reduce_48,
  3, 105, :_reduce_49,
  3, 105, :_reduce_50,
  3, 105, :_reduce_51,
  3, 105, :_reduce_52,
  3, 105, :_reduce_53,
  2, 105, :_reduce_54,
  3, 105, :_reduce_55,
  3, 105, :_reduce_56,
  3, 105, :_reduce_57,
  3, 105, :_reduce_58,
  1, 114, :_reduce_59,
  3, 114, :_reduce_60,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 112, :_reduce_79,
  1, 112, :_reduce_80,
  1, 112, :_reduce_81,
  1, 112, :_reduce_82,
  1, 112, :_reduce_83,
  5, 113, :_reduce_84,
  3, 113, :_reduce_85,
  6, 113, :_reduce_86,
  4, 113, :_reduce_87,
  1, 117, :_reduce_88,
  2, 117, :_reduce_89,
  4, 135, :_reduce_90,
  3, 135, :_reduce_91,
  1, 135, :_reduce_92,
  3, 136, :_reduce_93,
  2, 134, :_reduce_94,
  3, 138, :_reduce_95,
  2, 138, :_reduce_96,
  2, 137, :_reduce_97,
  4, 137, :_reduce_98,
  2, 120, :_reduce_99,
  5, 140, :_reduce_100,
  4, 140, :_reduce_101,
  0, 141, :_reduce_none,
  2, 141, :_reduce_103,
  4, 141, :_reduce_104,
  3, 141, :_reduce_105,
  6, 121, :_reduce_106,
  5, 121, :_reduce_107,
  0, 142, :_reduce_none,
  4, 142, :_reduce_109,
  3, 142, :_reduce_110,
  5, 119, :_reduce_111,
  1, 143, :_reduce_112,
  2, 143, :_reduce_113,
  5, 144, :_reduce_114,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 115, :_reduce_none,
  4, 115, :_reduce_118,
  1, 148, :_reduce_119,
  3, 148, :_reduce_120,
  3, 147, :_reduce_121,
  6, 118, :_reduce_122,
  2, 118, :_reduce_123,
  3, 149, :_reduce_124,
  3, 149, :_reduce_125,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  0, 106, :_reduce_128,
  1, 106, :_reduce_129,
  3, 106, :_reduce_130,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  3, 151, :_reduce_133,
  3, 151, :_reduce_134,
  3, 151, :_reduce_135,
  6, 122, :_reduce_136,
  6, 123, :_reduce_137,
  7, 124, :_reduce_138,
  1, 157, :_reduce_139,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 158, :_reduce_none,
  2, 158, :_reduce_143,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  7, 125, :_reduce_146,
  6, 125, :_reduce_147,
  1, 160, :_reduce_148,
  3, 160, :_reduce_149,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_152,
  1, 162, :_reduce_none,
  1, 163, :_reduce_154,
  3, 163, :_reduce_155,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 161, :_reduce_none,
  2, 161, :_reduce_159,
  6, 127, :_reduce_160,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 154, :_reduce_164,
  1, 155, :_reduce_165,
  2, 155, :_reduce_166,
  4, 155, :_reduce_167,
  1, 139, :_reduce_168,
  3, 139, :_reduce_169,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  3, 168, :_reduce_174,
  1, 168, :_reduce_175,
  2, 169, :_reduce_176,
  2, 167, :_reduce_177,
  1, 170, :_reduce_178,
  4, 170, :_reduce_179,
  1, 116, :_reduce_180,
  1, 128, :_reduce_181,
  1, 128, :_reduce_182,
  1, 128, :_reduce_183,
  1, 128, :_reduce_184,
  1, 128, :_reduce_185,
  1, 128, :_reduce_186,
  4, 129, :_reduce_187,
  2, 129, :_reduce_188,
  4, 129, :_reduce_189,
  2, 129, :_reduce_190,
  3, 130, :_reduce_191,
  4, 130, :_reduce_192,
  2, 130, :_reduce_193,
  1, 171, :_reduce_194,
  3, 171, :_reduce_195,
  3, 172, :_reduce_196,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 132, :_reduce_none,
  1, 173, :_reduce_200,
  1, 173, :_reduce_201,
  2, 174, :_reduce_202,
  1, 176, :_reduce_203,
  1, 178, :_reduce_204,
  1, 179, :_reduce_205,
  2, 177, :_reduce_206,
  1, 180, :_reduce_207,
  1, 181, :_reduce_208,
  2, 181, :_reduce_209,
  2, 175, :_reduce_210,
  2, 182, :_reduce_211,
  2, 182, :_reduce_212,
  3, 98, :_reduce_213,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 183, :_reduce_216,
  2, 183, :_reduce_217,
  4, 183, :_reduce_218,
  1, 126, :_reduce_219,
  3, 126, :_reduce_220,
  5, 126, :_reduce_221,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 133, :_reduce_224,
  1, 131, :_reduce_225,
  0, 110, :_reduce_none,
  1, 110, :_reduce_227,
  0, 109, :_reduce_none,
  1, 109, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 146, :_reduce_249 ]

racc_reduce_n = 250

racc_shift_n = 438

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :APPLICATION => 90,
  :HIGH => 91,
  :LISTSTART => 92,
  :SPLAT => 93,
  :MODULO => 94 }

racc_nt_base = 95

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "APPLICATION",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_79(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_80(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_83(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 280)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_88(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_93(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_94(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_95(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_96(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_99(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 336)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 102 omitted

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_103(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_104(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_105(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 108 omitted

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_109(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_110(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_111(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_112(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_113(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_114(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_118(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_119(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_120(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_121(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_124(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_125(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 452)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_130(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_134(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_135(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_136(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_137(val, _values, result)
        result = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_138(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_139(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 527)
  def _reduce_143(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 144 omitted

# reduce 145 omitted

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_146(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 548)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_148(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_149(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_152(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 153 omitted

module_eval(<<'.,.,', 'egrammar.ra', 570)
  def _reduce_154(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_155(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 580)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_160(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_164(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 602)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_169(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_174(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_175(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_176(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_177(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_179(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_180(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_185(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_186(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_187(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_188(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_189(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_190(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_191(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_192(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_193(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_194(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_195(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_196(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_202(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_204(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_205(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_206(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_207(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_208(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_209(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_210(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_211(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_212(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 697)
  def _reduce_213(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 214 omitted

# reduce 215 omitted

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_216(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_217(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_218(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_220(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_221(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 222 omitted

# reduce 223 omitted

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_224(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_225(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 226 omitted

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_227(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

module_eval(<<'.,.,', 'egrammar.ra', 754)
  def _reduce_249(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
