#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 754)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'59,62,322,-228,60,54,337,55,240,81,-240,-239,229,283,-237,112,323,-130',
'375,339,374,280,379,102,18,105,399,100,101,241,43,283,46,136,49,12,-242',
'47,37,40,340,45,38,10,11,-228,114,67,17,104,111,39,-240,-239,15,16,-237',
'252,113,-130,59,62,68,281,60,54,137,55,44,272,273,82,36,63,112,65,66',
'64,-242,251,48,50,52,51,18,375,53,374,112,229,43,282,46,317,49,116,283',
'47,37,40,257,45,38,258,259,114,346,67,17,111,334,39,365,348,15,16,240',
'113,331,114,59,62,68,111,60,54,240,55,44,67,254,113,36,63,112,65,66',
'241,232,67,48,50,52,51,18,230,53,241,261,260,43,270,46,254,49,12,321',
'47,37,40,70,45,38,10,11,114,356,67,17,111,357,39,59,62,15,16,60,113',
'278,279,59,62,68,359,60,54,240,55,44,73,74,75,36,63,112,65,66,318,362',
'317,48,50,52,51,18,317,53,367,368,259,43,311,46,229,49,12,112,47,37',
'40,80,45,38,10,11,114,372,67,17,111,307,39,376,378,15,16,305,113,76',
'78,77,79,68,112,112,80,108,114,44,219,385,111,36,63,304,65,66,218,388',
'113,48,50,52,51,59,62,53,122,60,54,278,55,416,72,114,114,157,154,111',
'111,152,254,392,72,122,395,113,113,18,59,62,278,80,60,43,312,46,398',
'49,12,240,47,37,40,240,45,38,10,11,123,80,67,17,67,80,39,122,67,15,16',
'402,241,378,404,405,241,68,406,136,80,409,133,44,410,411,233,36,63,412',
'65,66,80,278,72,48,50,52,51,59,62,53,68,60,54,420,55,414,81,69,422,423',
'137,63,424,307,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37,40,,45',
'38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,82,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,',
',,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,',
'48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16',
',,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54,,55',
'408,81,,,,,,,,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37,40,,45',
'38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,',
'67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,',
'15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,',
'53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59',
'62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46',
',49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60',
'54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47',
'37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,',
',,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,',
'48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59',
'62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46',
',49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54',
',55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,',
',,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,',
'48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,141,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,143,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53',
',,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,,,68',
',,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54,,55,145,81,,',
',,,,,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,',
',,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,279,,36,63,,65,66,,,,48,50',
'52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15',
'16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54,',
'55,145,81,,,,,,,,,,,,,,102,18,105,,100,101,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,67,17,104,,39,,,15,16,,,,,59,62,68,,60,54,,156,44,,,',
'36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38',
',,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,',
',48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12',
',47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12',
',47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40',
',45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,173,187,179,188,49,180,190,181,37,172',
',175,170,,,,,67,17,191,186,171,,,15,169,,,,,,,68,,,,,189,174,,,,36,63',
',65,66,,,,182,183,185,184,59,62,53,81,60,54,,55,,,,,,,,,,102,,105,,100',
'101,,18,,,,,,43,,46,,49,116,,47,37,40,,45,38,104,,,,67,17,,,39,,,15',
'16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53',
',,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40',
',45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116',
',47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,',
',39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51',
'18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,',
',59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43',
',46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60',
'54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47',
'37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36',
'63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,',
',,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,',
'48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39',
',,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18',
',53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59',
'62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46',
',49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54',
',55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,',
'67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,',
'15,16,,,,,59,62,68,,60,54,,55,44,,,215,36,63,,65,66,,,,48,50,52,51,18',
'217,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,',
'55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37',
'40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63',
',65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,',
'67,17,,,39,,,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59',
'62,53,,60,54,,55,380,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,116,,47,37,40',
',45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67',
'17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50',
'52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15',
'16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53',
',,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62',
'68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49',
'116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55',
'44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40',
',45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17',
',,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52',
'51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16',
',,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,',
'43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68',
',60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116',
',47,37,40,,45,38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,',
',,36,63,,65,66,,,,48,50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45',
'38,,,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66',
',,,48,50,52,51,18,245,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67',
'17,,,39,,,15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62',
'53,,60,54,,55,315,,,,,,,,,,,,,,,,18,59,62,,,60,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,,,,68,,136,,,133,44,,,,36,63',
',65,66,,,,48,50,52,51,59,62,53,68,60,54,,55,325,,,,,137,63,,,,,,,,,',
'18,59,62,,,60,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15',
'16,,,,,,,68,,136,,,133,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,68',
'60,54,,55,327,,,,,137,63,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45',
'38,10,11,,,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65',
'66,,,,48,50,52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67',
'17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50',
'52,51,18,,53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,',
'15,16,,,,,,,68,,,,,,44,,,,36,63,,65,66,,,,48,50,52,51,59,62,53,,60,54',
',55,341,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,67,17,,,39,,,15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48',
'50,52,51,18,,53,,,,43,,46,,49,116,,47,37,40,,45,38,,,,,67,17,,,39,,',
'15,16,,,,,59,62,68,,60,54,,55,44,,,,36,63,,65,66,,,,48,50,52,51,18,',
'53,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,67,17,,,39,,,15,16,,,,',
',,68,,,,,,44,,,,36,63,,65,66,81,,248,48,50,52,51,,,53,,,97,92,102,,105',
',100,101,,93,95,94,96,,59,62,,,60,,,,,,,,,,104,,,,99,98,,,85,86,88,87',
'90,91,,83,84,81,,247,,,82,,,136,,,133,97,92,102,,105,,100,101,,93,95',
'94,96,,89,,,,,68,,,,,,,,,104,137,63,,99,98,,,85,86,88,87,90,91,,83,84',
'81,,246,,,82,,,,,,,97,92,102,,105,,100,101,,93,95,94,96,,89,,,,,,,,',
',,,,,104,,,,99,98,,,85,86,88,87,90,91,81,83,84,,,,,,82,,,,97,92,102',
'308,105,81,100,101,,93,95,94,96,,,,,89,,102,,105,,100,101,,,,104,,,',
'99,98,,81,85,86,88,87,90,91,,83,84,104,,97,92,102,82,105,,100,101,,93',
'95,94,96,83,84,,,,,,82,,,,89,,,,104,,,,99,98,,81,85,86,88,87,90,91,',
'83,84,,,97,92,102,82,105,,100,101,,93,95,94,96,,,,,,,,,,,,89,,,,104',
',,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100,101,,93',
'95,94,96,,,,,,,,,,,,89,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84',
',,97,92,102,82,105,,100,101,,93,95,94,96,,,,,,,,,,,,89,,,,104,,,,99',
'98,,81,85,86,88,87,90,91,,83,84,,,97,92,102,82,105,,100,101,,93,95,94',
'96,,272,273,,,,,,,,,89,,,,104,,,,99,98,,,85,86,88,87,90,91,81,83,84',
',,284,,,82,,,,97,92,102,,105,81,100,101,,93,95,94,96,,,,,89,,102,,105',
',100,101,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,104,,97,92,102',
'82,105,,100,101,,93,95,94,96,83,84,,,,,,82,,,,89,,,,104,,,,,98,,81,85',
'86,88,87,90,91,,83,84,,,97,92,102,82,105,,100,101,,93,95,94,96,81,,',
',,,,,,,,89,,92,102,104,105,,100,101,81,93,,85,86,88,87,90,91,,83,84',
',92,102,,105,82,100,101,104,93,,,,,,,85,86,88,87,90,91,,83,84,,89,,104',
',82,,,,,,85,86,88,87,90,91,81,83,84,,,,,,82,89,,,97,92,102,276,105,81',
'100,101,,93,95,94,96,,,,,89,92,102,,105,,100,101,,93,,104,,,,99,98,',
',85,86,88,87,90,91,,83,84,104,,,,,82,,,85,86,88,87,90,91,,83,84,81,',
',,,82,,,,89,,,97,92,102,,105,81,100,101,,93,95,94,96,,89,,,,92,102,',
'105,,100,101,,93,,104,,,,99,98,,,85,86,88,87,90,91,,83,84,104,,,,,82',
',,85,86,88,87,90,91,81,83,84,,,,,,82,,,,89,,102,,105,81,100,101,,,,',
',,,,,89,,102,,105,,100,101,,,,104,,,,,,,,85,86,88,87,90,91,,83,84,104',
',,,,82,,,85,86,88,87,90,91,,83,84,81,,,,,82,,,,89,,,97,92,102,,105,81',
'100,101,,93,95,94,96,,89,,,,,102,,105,,100,101,,,,104,,,,99,98,,81,85',
'86,88,87,90,91,,83,84,104,,97,92,102,82,105,,100,101,,93,95,94,96,83',
'84,,,,,,82,,,,89,,,,104,,,,99,98,,81,85,86,88,87,90,91,,83,84,,,97,92',
'102,82,105,,100,101,,93,95,94,96,,,,,,,,,,,,89,,,,104,,,,99,98,,81,85',
'86,88,87,90,91,,83,84,,,,,102,82,105,,100,101,,,,81,,,,,,,,,,,,,89,102',
',105,104,100,101,,,,,,85,86,88,87,,,,83,84,,,,,,82,104,,,,,81,,,85,86',
'88,87,,,,83,84,,,102,89,105,82,100,101,,,,81,,,,,,,,,,,,97,92,102,89',
'105,104,100,101,,93,95,94,96,,,88,87,,,,83,84,,,,,,82,104,,,,99,98,',
'81,85,86,88,87,90,91,,83,84,,,,89,102,82,105,,100,101,,,296,187,295',
'188,,293,190,297,,290,,292,294,,89,,,,104,191,186,298,,,,291,,,88,87',
',,,83,84,,,189,299,,82,,,,,,,,,,302,303,301,300,,,,296,187,295,188,89',
'293,190,297,,290,,292,294,,,,,,,191,186,298,,,,291,,,,,,,,,,,,189,299',
',,,,,,,,,,,302,303,301,300,296,187,295,188,,293,190,297,,290,,292,294',
',,,,,,191,186,298,,,,291,,,,,,,,,,,,189,299,,,,,,,,,,,,302,303,301,300',
'296,187,295,188,,293,190,297,,290,,292,294,,,,,,,191,186,298,,,,291',
',,,,,,,,,,,189,299,,,,,,,,,,,,302,303,301,300' ]
        racc_action_table = arr = ::Array.new(6830, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,244,170,0,0,253,0,242,195,185,184,138,328,171,46,244,172,325,255',
'325,178,328,195,0,195,371,195,195,242,0,371,0,252,0,0,183,0,0,0,256',
'0,0,0,0,170,46,0,0,195,46,0,185,184,0,0,171,131,46,172,411,411,0,178',
'411,411,252,411,0,346,346,195,0,0,311,0,0,0,183,129,0,0,0,0,411,372',
'0,372,48,128,411,193,411,269,411,411,193,411,411,411,144,411,411,144',
'274,311,275,411,411,311,250,411,311,277,411,411,154,311,249,48,4,4,411',
'48,4,4,317,4,411,154,140,48,411,411,180,411,411,154,121,317,411,411',
'411,411,4,119,411,317,149,149,4,154,4,142,4,4,243,4,4,4,4,4,4,4,4,180',
'285,4,4,180,287,4,152,152,4,4,152,180,289,291,405,405,4,306,405,405',
'241,405,4,7,7,7,4,4,179,4,4,240,309,234,4,4,4,4,405,313,4,314,316,147',
'405,227,405,109,405,405,182,405,405,405,107,405,405,405,405,179,324',
'405,405,179,224,405,326,327,405,405,223,179,7,7,7,7,405,12,116,106,12',
'182,405,103,332,182,405,405,221,405,405,102,345,182,405,405,405,405',
'404,404,405,217,404,404,347,404,404,71,12,116,69,64,12,116,63,216,355',
'158,357,358,12,116,404,251,251,361,163,251,404,229,404,366,404,404,122',
'404,404,404,229,404,404,404,404,42,164,404,404,122,165,404,41,229,404',
'404,375,122,376,378,379,229,404,382,251,166,387,251,404,390,391,122',
'404,404,397,404,404,8,168,5,404,404,404,404,402,402,404,251,402,402',
'407,402,402,196,1,413,415,251,251,417,421,,,,,,,196,402,196,,196,196',
',402,,402,,402,402,,402,402,402,,402,402,402,402,,,402,402,196,,402',
',,402,402,,,,,175,175,402,,175,175,,175,402,,,196,402,402,,402,402,',
',,402,402,402,402,175,,402,,,,175,,175,,175,175,,175,175,175,,175,175',
',,,,175,175,,,175,,,175,175,,,,,10,10,175,,10,10,,10,175,,,,175,175',
',175,175,,,,175,175,175,175,10,,175,,,,10,,10,,10,10,,10,10,10,,10,10',
'10,10,,,10,10,,,10,,,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10',
',,,10,10,10,10,11,,10,,,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11',
',,11,,,11,11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11,11,11,11,385,385',
'11,,385,385,,385,385,194,,,,,,,,,,,,,,194,385,194,,194,194,,385,,385',
',385,385,,385,385,385,,385,385,385,385,,,385,385,194,,385,,,385,385',
',,,,15,15,385,,15,15,,15,385,,,,385,385,,385,385,,,,385,385,385,385',
'15,,385,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,',
',16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,15,,,,16',
',16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17',
'17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,,16,,,,17,,17,,17,17,,17',
'17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17',
'17,,17,17,,,,17,17,17,17,18,,17,,,,18,,18,,18,18,,18,18,18,,18,18,18',
'18,,,18,18,,,18,,,18,18,,,,,374,374,18,,374,374,,374,18,,,,18,18,,18',
'18,,,,18,18,18,18,374,,18,,,,374,,374,,374,374,,374,374,374,,374,374',
',,,,374,374,,,374,,,374,374,,,,,174,174,374,,174,174,,174,374,,,,374',
'374,,374,374,,,,374,374,374,374,174,,374,,,,174,,174,,174,174,,174,174',
'174,,174,174,,,,,174,174,,,174,,,174,174,,,,,43,43,174,,43,43,,43,174',
',,,174,174,,174,174,,,,174,174,174,174,43,,174,,,,43,,43,,43,43,,43',
'43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43',
'43,,43,43,,,,43,43,43,43,44,,43,,,,44,,44,,44,44,,44,44,44,,44,44,,',
',,44,44,,,44,,,44,44,,,,,45,45,44,,45,45,,45,44,,,,44,44,,44,44,,,,44',
'44,44,44,45,,44,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45,,,45,,,45',
'45,,,,,362,362,45,,362,362,,362,45,,,,45,45,,45,45,,,,45,45,45,45,362',
',45,,,,362,,362,,362,362,,362,362,362,,362,362,362,362,,,362,362,,,362',
',,362,362,,,,,356,356,362,,356,356,,356,362,,,,362,362,,362,362,,,,362',
'362,362,362,356,,362,,,,356,,356,,356,356,,356,356,356,,356,356,,,,',
'356,356,,,356,,,356,356,,,,,173,173,356,,173,173,,173,356,,,,356,356',
',356,356,,,,356,356,356,356,173,,356,,,,173,,173,,173,173,,173,173,173',
',173,173,,,,,173,173,,,173,,,173,173,,,,,53,53,173,,53,53,53,53,173',
',,,173,173,,173,173,,,,173,173,173,173,53,,173,,,,53,,53,,53,53,,53',
'53,53,,53,53,53,53,,,53,53,,,53,,,53,53,,,,,54,54,53,,54,54,54,54,53',
',,,53,53,,53,53,,,,53,53,53,53,54,,53,,,,54,,54,,54,54,,54,54,54,,54',
'54,54,54,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54',
'54,54,54,55,55,54,,55,55,,55,55,117,,,,,,,,,,,,,,117,55,117,,117,117',
',55,,55,,55,55,,55,55,55,,55,55,55,55,,,55,55,117,,55,,,55,55,,,,,61',
'61,55,,61,61,,61,55,,,,55,55,,55,55,,,,55,55,55,55,61,,55,,,,61,,61',
',61,61,,61,61,61,,61,61,61,61,,,61,61,,,61,,,61,61,,,,,169,169,61,,169',
'169,,169,61,,169,,61,61,,61,61,,,,61,61,61,61,169,,61,,,,169,,169,,169',
'169,,169,169,169,,169,169,,,,,169,169,,,169,,,169,169,,,,,,,169,,,,',
',169,,,,169,169,,169,169,,,,169,169,169,169,156,156,169,,156,156,,156',
'156,118,,,,,,,,,,,,,,118,156,118,,118,118,,156,,156,,156,156,,156,156',
'156,,156,156,156,156,,,156,156,118,,156,,,156,156,,,,,66,66,156,,66',
'66,,66,156,,,,156,156,,156,156,,,,156,156,156,156,66,,156,,,,66,,66',
',66,66,,66,66,66,,66,66,,,,,66,66,,,66,,,66,66,,,,,215,215,66,,215,215',
',215,66,,,,66,66,,66,66,,,,66,66,66,66,215,,66,,,,215,,215,,215,215',
',215,215,215,,215,215,,,,,215,215,,,215,,,215,215,,,,,70,70,215,,70',
'70,,70,215,,,,215,215,,215,215,,,,215,215,215,215,70,,215,,,,70,,70',
',70,70,,70,70,70,,70,70,70,70,,,70,70,,,70,,,70,70,,,,,153,153,70,,153',
'153,,153,70,,,,70,70,,70,70,,,,70,70,70,70,153,,70,,,,153,,153,,153',
'153,,153,153,153,,153,153,153,153,,,153,153,,,153,,,153,153,,,,,72,72',
'153,,72,72,,72,153,,,,153,153,,153,153,,,,153,153,153,153,72,,153,,',
',72,,72,,72,72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,73,73',
'72,,73,73,,73,72,,,,72,72,,72,72,,,,72,72,72,72,73,,72,,,,73,,73,,73',
'73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,',
'74,73,,,,73,73,,73,73,,,,73,73,73,73,74,,73,,,,74,,74,,74,74,,74,74',
'74,,74,74,74,74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,,75,74,,,,74',
'74,,74,74,,,,74,74,74,74,75,,74,,,,75,,75,,75,75,,75,75,75,,75,75,75',
'75,,,75,75,,,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75,75,,75,75,',
',,75,75,75,75,76,,75,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76',
',,76,,,76,76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76',
'76,77,,76,,,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77',
'77,,,,,78,78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77,77,77,78,,77',
',,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79',
'79,78,,79,79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79,,78,,,,79,,79',
',79,79,,79,79,79,,79,79,79,79,,,79,79,,,79,,,79,79,,,,,80,80,79,,80',
'80,,80,79,,,,79,79,,79,79,,,,79,79,79,79,80,,79,,,,80,80,80,80,80,80',
'80,80,80,80,,80,80,,,,,80,80,80,80,80,,,80,80,,,,,,,80,,,,,80,80,,,',
'80,80,,80,80,,,,80,80,80,80,81,81,80,115,81,81,,81,,,,,,,,,,115,,115',
',115,115,,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,115,,,,81,81,,,81,',
',81,81,,,,,82,82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82',
',81,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,83',
'83,82,,83,83,,83,82,,,,82,82,,82,82,,,,82,82,82,82,83,,82,,,,83,,83',
',83,83,,83,83,83,,83,83,,,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,',
'84,83,,,,83,83,,83,83,,,,83,83,83,83,84,,83,,,,84,,84,,84,84,,84,84',
'84,,84,84,,,,,84,84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84',
',84,84,,,,84,84,84,84,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85',
'85,,,85,,,85,85,,,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85',
'85,85,86,,85,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86',
',,,,87,87,86,,87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,,86,,,',
'87,,87,,87,87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,',
'88,88,,88,87,,,,87,87,,87,87,,,,87,87,87,87,88,,87,,,,88,,88,,88,88',
',88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,',
',,88,88,,88,88,,,,88,88,88,88,89,,88,,,,89,,89,,89,89,,89,89,89,,89',
'89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89',
',,,89,89,89,89,90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,',
'90,,,90,90,,,,,91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90',
'91,,90,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,',
'92,92,91,,92,92,,92,91,,,,91,91,,91,91,,,,91,91,91,91,92,,91,,,,92,',
'92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93',
',93,92,,,,92,92,,92,92,,,,92,92,92,92,93,,92,,,,93,,93,,93,93,,93,93',
'93,,93,93,,,,,93,93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93',
',93,93,,,,93,93,93,93,94,,93,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94',
'94,,,94,,,94,94,,,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94',
'94,94,95,,94,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95',
',,,,96,96,95,,96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95,96,,95,,,',
'96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,',
'97,97,,97,96,,,,96,96,,96,96,,,,96,96,96,96,97,,96,,,,97,,97,,97,97',
',97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,',
',,97,97,,97,97,,,,97,97,97,97,98,,97,,,,98,,98,,98,98,,98,98,98,,98',
'98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98',
',,,98,98,98,98,99,,98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,',
'99,,,99,99,,,,,100,100,99,,100,100,,100,99,,,,99,99,,99,99,,,,99,99',
'99,99,100,,99,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100',
',,100,,,100,100,,,,,101,101,100,,101,101,,101,100,,,100,100,100,,100',
'100,,,,100,100,100,100,101,101,100,,,,101,,101,,101,101,,101,101,101',
',101,101,101,101,,,101,101,,,101,,,101,101,,,,,337,337,101,,337,337',
',337,101,,,,101,101,,101,101,,,,101,101,101,101,337,,101,,,,337,,337',
',337,337,,337,337,337,,337,337,337,337,,,337,337,,,337,,,337,337,,,',
',331,331,337,,331,331,,331,337,,,,337,337,,337,337,,,,337,337,337,337',
'331,,337,,,,331,,331,,331,331,,331,331,331,,331,331,331,331,,,331,331',
',,331,,,331,331,,,,,104,104,331,,104,104,,104,331,,,,331,331,,331,331',
',,,331,331,331,331,104,,331,,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,105,105,104,,105,105,,105,104,,,,104',
'104,,104,104,,,,104,104,104,104,105,,104,,,,105,,105,,105,105,,105,105',
'105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105',
',105,105,,,,105,105,105,105,329,329,105,,329,329,,329,329,,,,,,,,,,',
',,,,,329,,,,,,329,,329,,329,329,,329,329,329,,329,329,,,,,329,329,,',
'329,,,329,329,,,,,322,322,329,,322,322,,322,329,,,,329,329,,329,329',
',,,329,329,329,329,322,,329,,,,322,,322,,322,322,,322,322,322,,322,322',
'322,322,,,322,322,,,322,,,322,322,,,,,108,108,322,,108,108,,108,322',
',,,322,322,,322,322,,,,322,322,322,322,108,,322,,,,108,,108,,108,108',
',108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,321,321,108,,321',
'321,,321,108,,,,108,108,,108,108,,,,108,108,108,108,321,,108,,,,321',
',321,,321,321,,321,321,321,,321,321,,,,,321,321,,,321,,,321,321,,,,',
'318,318,321,,318,318,,318,321,,,,321,321,,321,321,,,,321,321,321,321',
'318,,321,,,,318,,318,,318,318,,318,318,318,,318,318,,,,,318,318,,,318',
',,318,318,,,,,307,307,318,,307,307,,307,318,,,,318,318,,318,318,,,,318',
'318,318,318,307,,318,,,,307,,307,,307,307,,307,307,307,,307,307,,,,',
'307,307,,,307,,,307,307,,,,,284,284,307,,284,284,,284,307,,,,307,307',
',307,307,,,,307,307,307,307,284,,307,,,,284,,284,,284,284,,284,284,284',
',284,284,,,,,284,284,,,284,,,284,284,,,,,283,283,284,,283,283,,283,284',
',,,284,284,,284,284,,,,284,284,284,284,283,,284,,,,283,,283,,283,283',
',283,283,283,,283,283,,,,,283,283,,,283,,,283,283,,,,,281,281,283,,281',
'281,,281,283,,,,283,283,,283,283,,,,283,283,283,283,281,,283,,,,281',
',281,,281,281,,281,281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,',
'280,280,281,,280,280,,280,281,,,,281,281,,281,281,,,,281,281,281,281',
'280,,281,,,,280,,280,,280,280,,280,280,280,,280,280,,,,,280,280,,,280',
',,280,280,,,,,279,279,280,,279,279,,279,280,,,,280,280,,280,280,,,,280',
'280,280,280,279,,280,,,,279,,279,,279,279,,279,279,279,,279,279,,,,',
'279,279,,,279,,,279,279,,,,,123,123,279,,123,123,,123,279,,,,279,279',
',279,279,,,,279,279,279,279,123,123,279,,,,123,,123,,123,123,,123,123',
'123,,123,123,123,123,,,123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,',
',123,123,,123,123,,,,123,123,123,123,232,232,123,,232,232,,232,232,',
',,,,,,,,,,,,,,232,334,334,,,334,232,,232,,232,232,,232,232,232,,232',
'232,232,232,,,232,232,,,232,,,232,232,,,,,,,232,,334,,,334,232,,,,232',
'232,,232,232,,,,232,232,232,232,246,246,232,334,246,246,,246,246,,,',
',334,334,,,,,,,,,,246,47,47,,,47,246,,246,,246,246,,246,246,246,,246',
'246,246,246,,,246,246,,,246,,,246,246,,,,,,,246,,47,,,47,246,,,,246',
'246,,246,246,,,,246,246,246,246,247,247,246,47,247,247,,247,247,,,,',
'47,47,,,,,,,,,,247,,,,,,247,,247,,247,247,,247,247,247,,247,247,247',
'247,,,247,247,,,247,,,247,247,,,,,264,264,247,,264,264,,264,247,,,,247',
'247,,247,247,,,,247,247,247,247,264,,247,,,,264,,264,,264,264,,264,264',
'264,,264,264,264,264,,,264,264,,,264,,,264,264,,,,,259,259,264,,259',
'259,,259,264,,,,264,264,,264,264,,,,264,264,264,264,259,,264,,,,259',
',259,,259,259,,259,259,259,,259,259,259,259,,,259,259,,,259,,,259,259',
',,,,,,259,,,,,,259,,,,259,259,,259,259,,,,259,259,259,259,258,258,259',
',258,258,,258,258,,,,,,,,,,,,,,,,258,,,,,,258,,258,,258,258,,258,258',
'258,,258,258,258,258,,,258,258,,,258,,,258,258,,,,,248,248,258,,248',
'248,,248,258,,,,258,258,,258,258,,,,258,258,258,258,248,,258,,,,248',
',248,,248,248,,248,248,248,,248,248,,,,,248,248,,,248,,,248,248,,,,',
'254,254,248,,254,254,,254,248,,,,248,248,,248,248,,,,248,248,248,248',
'254,,248,,,,254,,254,,254,254,,254,254,254,,254,254,254,254,,,254,254',
',,254,,,254,254,,,,,,,254,,,,,,254,,,,254,254,,254,254,127,,127,254',
'254,254,254,,,254,,,127,127,127,,127,,127,127,,127,127,127,127,,181',
'181,,,181,,,,,,,,,,127,,,,127,127,,,127,127,127,127,127,127,,127,127',
'126,,126,,,127,,,181,,,181,126,126,126,,126,,126,126,,126,126,126,126',
',127,,,,,181,,,,,,,,,126,181,181,,126,126,,,126,126,126,126,126,126',
',126,126,124,,124,,,126,,,,,,,124,124,124,,124,,124,124,,124,124,124',
'124,,126,,,,,,,,,,,,,,124,,,,124,124,,,124,124,124,124,124,124,225,124',
'124,,,,,,124,,,,225,225,225,225,225,200,225,225,,225,225,225,225,,,',
',124,,200,,200,,200,200,,,,225,,,,225,225,,220,225,225,225,225,225,225',
',225,225,200,,220,220,220,225,220,,220,220,,220,220,220,220,200,200',
',,,,,200,,,,225,,,,220,,,,220,220,,350,220,220,220,220,220,220,,220',
'220,,,350,350,350,220,350,,350,350,,350,350,350,350,,,,,,,,,,,,220,',
',,350,,,,350,350,,351,350,350,350,350,350,350,,350,350,,,351,351,351',
'350,351,,351,351,,351,351,351,351,,,,,,,,,,,,350,,,,351,,,,351,351,',
'155,351,351,351,351,351,351,,351,351,,,155,155,155,351,155,,155,155',
',155,155,155,155,,,,,,,,,,,,351,,,,155,,,,155,155,,352,155,155,155,155',
'155,155,,155,155,,,352,352,352,155,352,,352,352,,352,352,352,352,,155',
'155,,,,,,,,,155,,,,352,,,,352,352,,,352,352,352,352,352,352,212,352',
'352,,,212,,,352,,,,212,212,212,,212,199,212,212,,212,212,212,212,,,',
',352,,199,,199,,199,199,,,,212,,,,212,212,,211,212,212,212,212,212,212',
',212,212,199,,211,211,211,212,211,,211,211,,211,211,211,211,199,199',
',,,,,199,,,,212,,,,211,,,,,211,,210,211,211,211,211,211,211,,211,211',
',,210,210,210,211,210,,210,210,,210,210,210,210,209,,,,,,,,,,,211,,209',
'209,210,209,,209,209,208,209,,210,210,210,210,210,210,,210,210,,208',
'208,,208,210,208,208,209,208,,,,,,,209,209,209,209,209,209,,209,209',
',210,,208,,209,,,,,,208,208,208,208,208,208,167,208,208,,,,,,208,209',
',,167,167,167,167,167,207,167,167,,167,167,167,167,,,,,208,207,207,',
'207,,207,207,,207,,167,,,,167,167,,,167,167,167,167,167,167,,167,167',
'207,,,,,167,,,207,207,207,207,207,207,,207,207,353,,,,,207,,,,167,,',
'353,353,353,,353,206,353,353,,353,353,353,353,,207,,,,206,206,,206,',
'206,206,,206,,353,,,,353,353,,,353,353,353,353,353,353,,353,353,206',
',,,,353,,,206,206,206,206,206,206,205,206,206,,,,,,206,,,,353,,205,',
'205,204,205,205,,,,,,,,,,206,,204,,204,,204,204,,,,205,,,,,,,,205,205',
'205,205,205,205,,205,205,204,,,,,205,,,204,204,204,204,204,204,,204',
'204,354,,,,,204,,,,205,,,354,354,354,,354,201,354,354,,354,354,354,354',
',204,,,,,201,,201,,201,201,,,,354,,,,354,354,,370,354,354,354,354,354',
'354,,354,354,201,,370,370,370,354,370,,370,370,,370,370,370,370,201',
'201,,,,,,201,,,,354,,,,370,,,,370,370,,9,370,370,370,370,370,370,,370',
'370,,,9,9,9,370,9,,9,9,,9,9,9,9,,,,,,,,,,,,370,,,,9,,,,9,9,,203,9,9',
'9,9,9,9,,9,9,,,,,203,9,203,,203,203,,,,202,,,,,,,,,,,,,9,202,,202,203',
'202,202,,,,,,203,203,203,203,,,,203,203,,,,,,203,202,,,,,198,,,202,202',
'202,202,,,,202,202,,,198,203,198,202,198,198,,,,192,,,,,,,,,,,,192,192',
'192,202,192,198,192,192,,192,192,192,192,,,198,198,,,,198,198,,,,,,198',
'192,,,,192,192,,197,192,192,192,192,192,192,,192,192,,,,198,197,192',
'197,,197,197,,,308,308,308,308,,308,308,308,,308,,308,308,,192,,,,197',
'308,308,308,,,,308,,,197,197,,,,197,197,,,308,308,,197,,,,,,,,,,308',
'308,308,308,,,,276,276,276,276,197,276,276,276,,276,,276,276,,,,,,,276',
'276,276,,,,276,,,,,,,,,,,,276,276,,,,,,,,,,,,276,276,276,276,278,278',
'278,278,,278,278,278,,278,,278,278,,,,,,,278,278,278,,,,278,,,,,,,,',
',,,278,278,,,,,,,,,,,,278,278,278,278,219,219,219,219,,219,219,219,',
'219,,219,219,,,,,,,219,219,219,,,,219,,,,,,,,,,,,219,219,,,,,,,,,,,',
'219,219,219,219' ]
        racc_action_check = arr = ::Array.new(6830, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   358,   nil,   nil,   118,   330,   nil,   173,   332,  6397,
   466,   526,   237,   nil,   nil,   670,   730,   790,   850,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   245,   283,  1030,  1090,  1150,     9,  4979,    82,   nil,
   nil,   nil,   nil,  1390,  1450,  1534,   nil,   nil,   nil,   nil,
   nil,  1594,   nil,   204,   206,   nil,  1798,   nil,   nil,   276,
  1918,   260,  2038,  2098,  2158,  2218,  2278,  2338,  2398,  2458,
  2518,  2602,  2662,  2722,  2782,  2842,  2902,  2962,  3022,  3082,
  3142,  3202,  3262,  3322,  3382,  3442,  3502,  3562,  3622,  3682,
  3742,  3802,   216,   240,  3982,  4042,   236,   211,  4246,   187,
   nil,   nil,   nil,   nil,   nil,  2600,   238,  1538,  1742,   118,
   nil,   129,   264,  4786,  5548,   nil,  5491,  5434,    63,    66,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   -14,   nil,
   117,   nil,   140,   nil,    90,   nil,   nil,   197,   nil,   144,
   nil,   nil,   170,  1978,    80,  5790,  1738,   nil,   270,   nil,
   nil,   nil,   nil,   283,   301,   305,   320,  6084,   329,  1654,
    -9,     2,     5,  1330,   970,   406,   nil,   nil,     9,   188,
   128,  5465,   210,    24,    -1,    -2,   nil,   nil,   nil,   nil,
   nil,   nil,  6535,    83,   614,     2,   350,  6582,  6512,  5908,
  5619,  6320,  6467,  6444,  6246,  6229,  6175,  6101,  6030,  6010,
  5985,  5938,  5891,   nil,   nil,  1858,   268,   196,   nil,  6744,
  5649,   206,   nil,   212,   188,  5602,   nil,   173,   nil,   268,
   nil,   nil,  4870,   nil,   186,   nil,   nil,   nil,   nil,   nil,
   181,   150,   -28,   149,   -11,   nil,  4954,  5038,  5302,   109,
    72,   287,    -8,    -3,  5362,    11,    32,   nil,  5242,  5158,
   nil,   nil,   nil,   nil,  5098,   nil,   nil,   nil,   nil,    80,
   nil,   nil,   nil,   nil,    92,    96,  6636,   103,  6690,  4726,
  4666,  4606,   nil,  4546,  4486,   153,   nil,   143,   nil,   165,
   nil,   167,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   173,  4426,  6579,   189,
   nil,    68,   nil,   192,   197,   nil,   137,    90,  4366,   nil,
   nil,  4306,  4186,   nil,   216,   -15,   222,   200,     0,  4126,
   nil,  3922,   241,   nil,  4895,   nil,   nil,  3862,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   187,   -11,   257,   nil,   nil,
  5696,  5743,  5837,  6158,  6303,   272,  1270,   213,   275,   nil,
   nil,   278,  1210,   nil,   nil,   nil,   270,   nil,   nil,   nil,
  6350,    18,    52,   nil,   910,   311,   289,   nil,   314,   315,
   nil,   nil,   317,   nil,   nil,   610,   nil,   320,   nil,   nil,
   323,   292,   nil,   nil,   nil,   nil,   nil,   328,   nil,   nil,
   nil,   nil,   346,   nil,   262,   178,   nil,   344,   nil,   nil,
   nil,    58,   nil,   349,   nil,   350,   nil,   353,   nil,   nil,
   nil,   322,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -244,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -244,  -244,  -244,   -33,   -34,  -244,  -244,  -244,  -244,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -244,  -244,  -244,  -244,  -244,  -244,  -178,
  -179,  -180,  -181,  -244,  -244,  -244,  -192,  -193,  -194,  -195,
  -196,  -244,  -198,  -244,  -211,  -214,  -244,  -219,  -220,  -244,
  -244,    -7,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -127,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,  -244,
  -244,  -244,  -244,  -122,  -243,  -243,   -22,   -23,  -244,  -243,
  -137,  -159,  -160,  -161,  -162,   -46,  -244,   -47,   -54,  -244,
   -88,  -244,  -244,  -244,  -244,   -98,  -244,  -244,  -243,  -221,
  -146,  -148,  -149,  -150,  -151,  -152,  -154,  -155,  -243,   -14,
  -221,  -183,  -221,  -185,  -244,  -188,  -189,  -244,  -197,  -244,
  -202,  -205,  -244,  -209,  -244,  -244,  -244,   426,    -6,    -9,
   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -244,  -221,  -244,
   -80,   -81,   -82,  -232,  -238,  -226,  -128,  -131,  -244,  -229,
  -227,  -235,  -241,  -179,  -180,  -181,  -225,  -230,  -231,  -233,
  -234,  -236,   -59,  -244,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,
   -55,   -56,  -244,   -57,  -116,  -244,  -221,   -84,   -92,  -127,
  -126,  -244,  -125,  -244,  -223,  -244,   -28,  -243,  -163,  -244,
   -58,   -93,  -244,   -96,  -221,  -166,  -168,  -169,  -170,  -171,
  -173,  -244,  -244,  -176,  -244,   -90,  -244,  -244,  -244,  -244,
  -243,  -222,  -244,  -244,  -222,  -244,  -244,  -186,  -244,  -244,
  -199,  -200,  -201,  -203,  -244,  -206,  -207,  -208,  -210,  -221,
  -212,  -215,  -217,  -218,    -8,  -244,  -127,  -244,  -222,  -244,
  -244,  -244,   -35,  -244,  -244,  -221,  -118,  -244,   -86,  -221,
  -130,  -244,  -226,  -227,  -228,  -229,  -232,  -235,  -237,  -238,
  -239,  -240,  -241,  -242,  -123,  -124,  -244,  -224,  -127,  -244,
  -140,  -244,  -164,  -221,  -244,   -95,  -244,  -222,  -244,  -174,
  -175,  -244,  -244,   -89,  -244,  -101,  -244,  -107,  -244,  -244,
  -111,  -243,  -244,  -156,  -244,  -147,  -153,  -243,   -15,  -182,
  -184,  -187,  -190,  -191,  -204,  -244,  -244,  -221,   -26,  -129,
  -134,  -132,  -133,   -60,  -120,  -244,  -222,   -83,  -244,   -25,
   -29,  -221,  -243,  -141,  -142,  -143,  -244,   -94,   -97,  -167,
  -172,  -244,  -101,  -100,  -244,  -244,  -107,  -106,  -244,  -244,
  -110,  -112,  -244,  -138,  -139,  -244,  -157,  -244,  -213,  -216,
  -244,   -30,  -117,  -119,   -85,  -121,   -27,  -244,  -165,  -177,
   -99,  -102,  -244,  -105,  -244,  -243,  -135,  -244,  -145,  -158,
   -24,   -31,  -136,  -244,  -104,  -244,  -109,  -244,  -114,  -115,
  -144,  -223,  -103,  -108,  -113,   -32 ]

racc_goto_table = [
     2,   115,   117,   118,   120,   224,   214,   132,   134,   168,
   193,   128,   148,   138,   377,   243,   222,   222,   271,   306,
   330,   335,   234,   250,   227,   417,    71,   221,   223,   124,
   126,   127,   329,   285,   255,   401,   256,   349,   231,   140,
   142,   373,   213,   249,   360,   309,   363,   243,   332,   390,
   336,   369,   155,   253,   269,   320,   319,   106,   107,   342,
   119,   265,   277,   403,   266,     3,   167,   192,   194,   195,
   196,   197,   198,   199,   200,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   216,   400,   263,
   220,   220,   158,   264,   225,   139,   139,   147,   262,   382,
   151,   381,   153,   150,   386,   387,   267,     1,   nil,   244,
   287,   nil,   nil,   nil,   159,   160,   161,   162,   nil,   nil,
   nil,   286,   243,   163,   164,   165,   166,   nil,   316,   313,
   397,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   310,
   nil,   132,   134,   139,   128,   nil,   nil,   138,   289,   nil,
   nil,   nil,   nil,   268,   nil,   117,   275,   nil,   nil,   124,
   126,   127,   333,   345,   nil,   139,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   355,
   288,   nil,   nil,   358,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   274,   nil,
   nil,   212,   nil,   nil,   nil,   347,   nil,   366,   nil,   389,
   243,   132,   134,   nil,   nil,   344,   425,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   314,   nil,   192,   nil,   nil,   361,   nil,   nil,
   nil,   391,   nil,   384,   nil,   nil,   324,   326,   nil,   384,
   371,   nil,   nil,   nil,   nil,   396,   nil,   nil,   nil,   nil,
   nil,   nil,   393,   nil,   nil,   350,   351,   352,   nil,   353,
   354,   nil,   nil,   nil,   384,   nil,   364,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   225,   132,   134,   338,   nil,   nil,   nil,
   147,   343,   nil,   nil,   370,   nil,   150,   192,   421,   nil,
   nil,   nil,   nil,   nil,   nil,   192,   nil,   418,   nil,   nil,
   394,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   124,   nil,   nil,   nil,   338,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   407,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,
   nil,   nil,   413,   nil,   415,   419 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    13,    51,    36,    35,    11,
    19,    58,    81,    58,    46,    37,    50,    50,    89,    14,
    48,    66,    43,    15,    59,    49,     5,    54,    54,    10,
    10,    10,    47,    52,    15,    44,    15,    55,    42,     8,
     8,    45,    20,    59,    16,    62,    63,    37,    65,    12,
    68,    69,    10,    59,    43,    70,    72,     9,     9,    76,
     6,    77,    15,    46,    78,     3,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,     8,    45,    82,
    10,    10,     5,    83,    10,     6,     6,     6,    85,    60,
    86,    48,    87,     6,    66,    60,    88,     1,   nil,     8,
    15,   nil,   nil,   nil,     6,     6,     6,     6,   nil,   nil,
   nil,    51,    37,     9,     9,     9,     9,   nil,    15,    43,
    60,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,
   nil,    36,    35,     6,    58,   nil,   nil,    58,    11,   nil,
   nil,   nil,   nil,     2,   nil,    10,     2,   nil,   nil,    10,
    10,    10,    50,    15,   nil,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    38,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,    10,   nil,   nil,   nil,    11,   nil,    15,   nil,    89,
    37,    36,    35,   nil,   nil,    81,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,    10,   nil,   nil,    11,   nil,   nil,
   nil,    15,   nil,    50,   nil,   nil,     2,     2,   nil,    50,
    19,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,    51,   nil,   nil,    10,    10,    10,   nil,    10,
    10,   nil,   nil,   nil,    50,   nil,    58,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,    36,    35,     6,   nil,   nil,   nil,
     6,     6,   nil,   nil,    10,   nil,     6,    10,    13,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,    50,   nil,   nil,
    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   107,     0,    65,   nil,    22,    42,   nil,   -14,    47,
   -14,   -71,  -298,  -103,  -205,  -106,  -263,   nil,   nil,   -71,
   -58,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -39,   -40,  -107,   -37,   nil,
   nil,   nil,   -83,  -100,  -339,  -284,  -313,  -216,  -228,  -380,
   -88,   -94,  -182,   nil,   -77,  -241,   nil,   nil,   -35,   -85,
  -232,   nil,  -182,  -265,   nil,  -202,  -230,   nil,  -202,  -266,
  -187,   nil,  -185,   nil,   nil,   nil,  -199,   -91,   -88,   nil,
   nil,   -49,   -60,   -56,   nil,   -51,    37,    38,   -47,  -137 ]

racc_goto_default = [
   nil,   nil,   383,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   226,    13,    14,   328,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   121,   nil,   nil,   125,   nil,   nil,   nil,   nil,   nil,
   228,   nil,   nil,   103,   nil,   176,   178,   177,   110,   nil,
   nil,   109,   nil,   nil,   129,   nil,   130,   131,   135,   235,
   236,   237,   238,   239,   242,   144,   146,    56,    57,    58,
    61,   nil,   nil,   nil,   149,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 92, :_reduce_1,
  1, 92, :_reduce_2,
  0, 92, :_reduce_3,
  1, 93, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  3, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  1, 99, :_reduce_14,
  3, 99, :_reduce_15,
  1, 98, :_reduce_none,
  3, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  1, 100, :_reduce_none,
  2, 100, :_reduce_22,
  2, 100, :_reduce_23,
  7, 100, :_reduce_24,
  5, 100, :_reduce_25,
  5, 100, :_reduce_26,
  4, 107, :_reduce_27,
  1, 104, :_reduce_28,
  3, 104, :_reduce_29,
  1, 103, :_reduce_30,
  2, 103, :_reduce_31,
  4, 103, :_reduce_32,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 101, :_reduce_35,
  3, 101, :_reduce_36,
  3, 101, :_reduce_37,
  3, 101, :_reduce_38,
  3, 101, :_reduce_39,
  3, 101, :_reduce_40,
  3, 101, :_reduce_41,
  3, 101, :_reduce_42,
  3, 101, :_reduce_43,
  3, 101, :_reduce_44,
  3, 101, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  3, 101, :_reduce_48,
  3, 101, :_reduce_49,
  3, 101, :_reduce_50,
  3, 101, :_reduce_51,
  3, 101, :_reduce_52,
  3, 101, :_reduce_53,
  2, 101, :_reduce_54,
  3, 101, :_reduce_55,
  3, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  1, 110, :_reduce_59,
  3, 110, :_reduce_60,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_78,
  1, 108, :_reduce_79,
  1, 108, :_reduce_80,
  1, 108, :_reduce_81,
  1, 108, :_reduce_82,
  5, 109, :_reduce_83,
  3, 109, :_reduce_84,
  6, 109, :_reduce_85,
  4, 109, :_reduce_86,
  1, 113, :_reduce_87,
  2, 113, :_reduce_88,
  4, 130, :_reduce_89,
  3, 130, :_reduce_90,
  1, 130, :_reduce_91,
  3, 131, :_reduce_92,
  2, 129, :_reduce_93,
  3, 133, :_reduce_94,
  2, 133, :_reduce_95,
  2, 132, :_reduce_96,
  4, 132, :_reduce_97,
  2, 116, :_reduce_98,
  5, 135, :_reduce_99,
  4, 135, :_reduce_100,
  0, 136, :_reduce_none,
  2, 136, :_reduce_102,
  4, 136, :_reduce_103,
  3, 136, :_reduce_104,
  6, 117, :_reduce_105,
  5, 117, :_reduce_106,
  0, 137, :_reduce_none,
  4, 137, :_reduce_108,
  3, 137, :_reduce_109,
  5, 115, :_reduce_110,
  1, 138, :_reduce_111,
  2, 138, :_reduce_112,
  5, 139, :_reduce_113,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_117,
  1, 143, :_reduce_118,
  3, 143, :_reduce_119,
  3, 142, :_reduce_120,
  6, 114, :_reduce_121,
  2, 114, :_reduce_122,
  3, 144, :_reduce_123,
  3, 144, :_reduce_124,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  0, 102, :_reduce_127,
  1, 102, :_reduce_128,
  3, 102, :_reduce_129,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  3, 146, :_reduce_132,
  3, 146, :_reduce_133,
  3, 146, :_reduce_134,
  6, 118, :_reduce_135,
  7, 119, :_reduce_136,
  1, 152, :_reduce_137,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 153, :_reduce_none,
  2, 153, :_reduce_141,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  7, 120, :_reduce_144,
  6, 120, :_reduce_145,
  1, 155, :_reduce_146,
  3, 155, :_reduce_147,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_150,
  1, 157, :_reduce_none,
  1, 158, :_reduce_152,
  3, 158, :_reduce_153,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_157,
  6, 122, :_reduce_158,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_162,
  1, 150, :_reduce_163,
  2, 150, :_reduce_164,
  4, 150, :_reduce_165,
  1, 134, :_reduce_166,
  3, 134, :_reduce_167,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  3, 163, :_reduce_172,
  1, 163, :_reduce_173,
  2, 164, :_reduce_174,
  2, 162, :_reduce_175,
  1, 165, :_reduce_176,
  4, 165, :_reduce_177,
  1, 112, :_reduce_178,
  1, 123, :_reduce_179,
  1, 123, :_reduce_180,
  1, 123, :_reduce_181,
  4, 124, :_reduce_182,
  2, 124, :_reduce_183,
  4, 124, :_reduce_184,
  2, 124, :_reduce_185,
  3, 125, :_reduce_186,
  4, 125, :_reduce_187,
  2, 125, :_reduce_188,
  1, 166, :_reduce_189,
  3, 166, :_reduce_190,
  3, 167, :_reduce_191,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 127, :_reduce_none,
  1, 168, :_reduce_195,
  1, 168, :_reduce_196,
  2, 169, :_reduce_197,
  1, 171, :_reduce_198,
  1, 173, :_reduce_199,
  1, 174, :_reduce_200,
  2, 172, :_reduce_201,
  1, 175, :_reduce_202,
  1, 176, :_reduce_203,
  2, 176, :_reduce_204,
  2, 170, :_reduce_205,
  2, 177, :_reduce_206,
  2, 177, :_reduce_207,
  3, 94, :_reduce_208,
  0, 179, :_reduce_none,
  1, 179, :_reduce_none,
  0, 178, :_reduce_211,
  2, 178, :_reduce_212,
  4, 178, :_reduce_213,
  1, 121, :_reduce_214,
  3, 121, :_reduce_215,
  5, 121, :_reduce_216,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 128, :_reduce_219,
  1, 126, :_reduce_220,
  0, 106, :_reduce_none,
  1, 106, :_reduce_222,
  0, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 141, :_reduce_243 ]

racc_reduce_n = 244

racc_shift_n = 426

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 72)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 138)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 176)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 266)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 270)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 343)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 368)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 407)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 428)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 432)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 473)
  def _reduce_134(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 496)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 506)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 532)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 536)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 546)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 547)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 568)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_158(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_162(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_173(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_174(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 615)
  def _reduce_175(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_177(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_178(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_183(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_184(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_185(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_186(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_187(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_188(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_189(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_190(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_191(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_195(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_196(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_197(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_200(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_201(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_202(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_203(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_204(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_205(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_206(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_207(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_208(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 209 omitted

# reduce 210 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_211(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_212(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_213(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_214(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_215(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_216(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 217 omitted

# reduce 218 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_219(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_220(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_222(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_243(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
