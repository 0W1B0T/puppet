#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 709)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'71,-129,208,235,-127,236,235,113,244,90,91,87,82,94,318,98,268,93,245',
'-197,83,85,84,86,-206,296,282,53,55,53,55,53,55,226,117,208,227,205',
'116,97,53,55,-129,89,88,-127,218,75,76,78,77,80,81,234,73,74,53,55,235',
'246,-197,72,298,71,122,-206,122,124,57,124,79,92,90,91,87,82,94,57,98',
'313,93,312,71,83,85,84,86,62,71,62,117,62,218,122,116,94,124,98,221',
'93,62,94,97,98,225,93,89,88,300,224,75,76,78,77,80,81,62,73,74,53,55',
'97,223,285,72,117,71,97,313,116,312,284,327,79,92,90,91,87,82,94,117',
'98,281,93,116,71,83,85,84,86,230,229,244,117,53,55,122,116,94,124,98',
'130,93,117,195,97,305,116,306,89,88,307,208,75,76,78,77,80,81,62,73',
'74,171,310,97,53,55,72,242,71,314,57,290,316,228,267,79,92,90,91,87',
'82,94,242,98,244,93,323,324,83,85,84,86,67,69,68,70,266,266,66,66,136',
'57,106,260,334,259,204,97,118,258,337,89,88,106,107,75,76,78,77,80,81',
'244,73,74,106,341,316,343,344,72,345,71,346,103,348,349,350,242,79,92',
'90,91,87,82,94,240,98,66,93,63,357,83,85,84,86,358,359,360,,,,,,,,,',
',,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,95,,,,,79,92',
'90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75',
'76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93',
',,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74',
',,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,',
',,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79',
'92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,',
',75,76,78,77,80,81,,73,74,,,,,,72,,71,,214,,,,,79,92,90,91,87,82,94',
',98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81',
',73,74,,,,,,72,,71,,213,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84',
'86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71',
',,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,',
',,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,212,,,,,79,92,90,91',
'87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78',
'77,80,81,,73,74,,,,,,72,,71,,211,,,,,79,92,90,91,87,82,94,,98,,93,,',
'83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,',
',,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,200,83,85,84,86,,,,,,',
',,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79',
'92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,',
',75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98',
',93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73',
'74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,',
',,,,,,,,,,,97,,,,89,88,,,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,',
'79,92,90,91,87,82,94,,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,,,89,88',
',,75,76,78,77,80,81,,73,74,,,,,,72,,71,,,,,,,79,92,90,91,87,82,94,71',
'98,,93,,71,83,85,84,86,,,,94,,98,,93,94,,98,,93,,,97,,,,89,88,,,75,76',
'78,77,80,81,97,73,74,53,55,97,,49,72,50,,,,,,73,74,79,92,,73,74,72,',
',13,,72,,,,173,190,184,191,48,185,193,186,182,180,,175,188,,,,,58,12',
'194,189,187,53,55,11,,49,,50,,,,62,,,,,192,174,,,,56,,13,,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,71,49,11,50,,,,,,,62,,,94',
',98,40,93,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,97,,,58,12,53',
'55,59,,49,11,50,,,,73,74,,62,,,,72,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,',
',,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,333',
',,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47',
'61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45',
',,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43',
',47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49',
'11,50,319,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60',
',,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,',
',,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39',
',46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,',
',,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59',
',49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41',
'60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,',
'40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,,,59,53,55,11,,49,,50,,,,62,,,,,,40,,,170,56,,13,,,,,,39,,46,',
'48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40',
',,13,56,,,,,173,190,184,191,48,185,193,186,182,180,,175,188,,,,,58,12',
'194,189,187,53,55,11,,49,,50,,,,62,,,,,192,174,,,,56,,13,,,,,,39,,46',
',48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,',
'40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49',
'11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,',
',,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48',
'100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,',
',13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,',
'58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94,39,98,46,93',
'48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,97,49,,50,,,,62,,,78',
'77,,40,,73,74,56,,13,202,,72,,,39,,46,,48,100,79,47,61,57,,41,60,,,',
',58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13',
'56,,,,94,39,98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11',
'97,49,,50,,,,62,,,78,77,,40,,73,74,56,,13,210,,72,,,39,,46,,48,100,79',
'47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56',
',,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,',
',,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12',
'53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,',
'39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,',
',,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53',
'55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57',
',41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,,,94',
'39,98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,97,49,289',
'50,,,,62,75,76,78,77,,40,,73,74,56,,13,,,72,,,39,,46,,48,100,79,47,61',
'57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,71,,,,,40,,,13,56,,',
',94,39,98,46,93,48,100,,47,61,57,,41,60,,,,,58,12,,,59,53,55,11,97,49',
'128,50,,,,62,75,76,78,77,,40,,73,74,56,,13,,,72,,,39,,46,,48,100,79',
'47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56',
',,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,272',
',,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,270,,,,,,62,,,,,,40,,,13,56',
',,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50',
'264,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45',
',,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100',
',47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13',
'56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58,12,53,55,59,,49,11,50',
',,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,,41,60,,,,,58',
'12,53,55,59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47',
'61,57,,41,60,,,,,58,12,53,55,59,,49,11,50,352,,,,,,62,,,,,,40,,,13,56',
',,,,39,,46,,48,43,,47,61,57,71,41,60,44,45,,,58,12,,,59,,94,11,98,,93',
',,,,62,,,71,,,40,,,,56,,,,,,94,97,98,,93,,,,,75,76,78,77,80,81,,73,74',
',,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74,71,,,,,72,,,,,,,82,94',
'79,98,,93,,,83,,,,,71,,,,,,,,,,,,82,94,97,98,,93,,,83,,75,76,78,77,80',
'81,,73,74,,,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74,71,,,,,72,',
',,,,,82,94,79,98,,93,,,83,,,,,71,,,,,,,,,,,,82,94,97,98,,93,,,83,,75',
'76,78,77,80,81,,73,74,,,,,,72,,,97,,,,,,79,,75,76,78,77,80,81,,73,74',
'71,,,,,72,,,,,,87,82,94,79,98,,93,,,83,85,84,86,,,,,,,,,,,,,,,,97,,',
',,,71,,75,76,78,77,80,81,,73,74,87,82,94,,98,72,93,,,83,85,84,86,,79',
',,,,,,,,,,53,55,,97,49,,50,354,88,,,75,76,78,77,80,81,,73,74,,,13,,',
'72,,,39,,46,,48,43,79,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11',
'50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,64,41,60,44',
'45,,,58,12,53,55,59,,49,11,50,356,,,,,,62,,,,,,40,,,13,56,,,,,39,,46',
',48,43,,47,61,57,,41,60,44,45,,,58,12,53,55,59,,49,11,50,,,,,,,62,,',
',,,40,,,13,56,,,,,39,,46,,48,43,,47,61,57,,41,60,44,45,,,58,12,53,55',
'59,,49,11,50,,,,,,,62,,,,,,40,,,13,56,,,,,39,,46,,48,100,,47,61,57,',
'41,60,,,,,58,12,,,59,,,11,,,,254,190,253,191,62,251,193,255,249,248',
'40,250,252,,56,,,,,194,189,256,254,190,253,191,,251,193,255,249,248',
',250,252,,,192,257,,,194,189,256,254,190,253,191,,251,193,255,249,248',
',250,252,,,192,257,,,194,189,256,,,,,,,,,,,,,,,,192,257' ]
        racc_action_table = arr = ::Array.new(5065, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'167,182,106,209,180,167,273,43,297,167,167,167,167,167,273,167,209,167',
'183,188,167,167,167,167,187,237,218,221,221,223,223,74,74,129,43,218',
'129,106,43,167,73,73,182,167,167,180,114,167,167,167,167,167,167,143',
'167,167,186,186,143,183,188,167,241,166,221,187,223,221,74,223,167,167',
'166,166,166,166,166,73,166,270,166,270,144,166,166,166,166,221,101,223',
'100,74,119,186,100,144,186,144,120,144,73,101,166,101,127,101,166,166',
'243,127,166,166,166,166,166,166,186,166,166,47,47,144,120,220,166,281',
'165,101,310,281,310,219,281,166,166,165,165,165,165,165,185,165,216',
'165,185,99,165,165,165,165,135,135,247,46,50,50,47,46,99,47,99,50,99',
'184,96,165,261,184,263,165,165,265,266,165,165,165,165,165,165,47,165',
'165,94,269,99,227,227,165,215,164,271,50,227,272,132,208,165,165,164',
'164,164,164,164,276,164,277,164,278,279,164,164,164,164,7,7,7,7,206',
'283,137,65,63,227,202,201,295,199,105,164,44,197,304,164,164,305,38',
'164,164,164,164,164,164,177,164,164,37,313,314,316,317,164,321,172,322',
'36,328,329,332,176,164,164,172,172,172,172,172,172,172,5,172,1,347,172',
'172,172,172,351,353,355,,,,,,,,,,,,,172,,,,172,172,,,172,172,172,172',
'172,172,,172,172,,,,,,172,,10,,10,,,,,172,172,10,10,10,10,10,,10,,10',
',,10,10,10,10,,,,,,,,,,,,,,,,10,,,,10,10,,,10,10,10,10,10,10,,10,10',
',,,,,10,,196,,,,,,,10,10,196,196,196,196,196,,196,,196,,,196,196,196',
'196,,,,,,,,,,,,,,,,196,,,,196,196,,,196,196,196,196,196,196,,196,196',
',,,,,196,,133,,,,,,,196,196,133,133,133,133,133,,133,,133,,,133,133',
'133,133,,,,,,,,,,,,,,,,133,,,,133,133,,,133,133,133,133,133,133,,133',
'133,,,,,,133,,126,,,,,,,133,133,126,126,126,126,126,,126,,126,,,126',
'126,126,126,,,,,,,,,,,,,,,,126,,,,126,126,,,126,126,126,126,126,126',
',126,126,,,,,,126,,112,,112,,,,,126,126,112,112,112,112,112,,112,,112',
',,112,112,112,112,,,,,,,,,,,,,,,,112,,,,112,112,,,112,112,112,112,112',
'112,,112,112,,,,,,112,,111,,111,,,,,112,112,111,111,111,111,111,,111',
',111,,,111,111,111,111,,,,,,,,,,,,,,,,111,,,,111,111,,,111,111,111,111',
'111,111,,111,111,,,,,,111,,309,,,,,,,111,111,309,309,309,309,309,,309',
',309,,,309,309,309,309,,,,,,,,,,,,,,,,309,,,,309,309,,,309,309,309,309',
'309,309,,309,309,,,,,,309,,110,,110,,,,,309,309,110,110,110,110,110',
',110,,110,,,110,110,110,110,,,,,,,,,,,,,,,,110,,,,110,110,,,110,110',
'110,110,110,110,,110,110,,,,,,110,,108,,108,,,,,110,110,108,108,108',
'108,108,,108,,108,,,108,108,108,108,,,,,,,,,,,,,,,,108,,,,108,108,,',
'108,108,108,108,108,108,,108,108,,,,,,108,,102,,,,,,,108,108,102,102',
'102,102,102,,102,,102,,102,102,102,102,102,,,,,,,,,,,,,,,,102,,,,102',
'102,,,102,102,102,102,102,102,,102,102,,,,,,102,,288,,,,,,,102,102,288',
'288,288,288,288,,288,,288,,,288,288,288,288,,,,,,,,,,,,,,,,288,,,,288',
'288,,,288,288,288,288,288,288,,288,288,,,,,,288,,303,,,,,,,288,288,303',
'303,303,303,303,,303,,303,,,303,303,303,303,,,,,,,,,,,,,,,,303,,,,303',
'303,,,303,303,303,303,303,303,,303,303,,,,,,303,,302,,,,,,,303,303,302',
'302,302,302,302,,302,,302,,,302,302,302,302,,,,,,,,,,,,,,,,302,,,,302',
'302,,,302,302,302,302,302,302,,302,302,,,,,,302,,292,,,,,,,302,302,292',
'292,292,292,292,,292,,292,,,292,292,292,292,,,,,,,,,,,,,,,,292,,,,292',
'292,,,292,292,292,292,292,292,,292,292,,,,,,292,,294,,,,,,,292,292,294',
'294,294,294,294,153,294,,294,,152,294,294,294,294,,,,153,,153,,153,152',
',152,,152,,,294,,,,294,294,,,294,294,294,294,294,294,153,294,294,214',
'214,152,,214,294,214,,,,,,153,153,294,294,,152,152,153,,,214,,152,,',
',214,214,214,214,214,214,214,214,214,214,,214,214,,,,,214,214,214,214',
'214,296,296,214,,296,,296,,,,214,,,,,214,214,,,,214,,296,,,,,,296,,296',
',296,296,,296,296,296,,296,296,,,,,296,296,54,54,296,151,54,296,54,',
',,,,,296,,,151,,151,296,151,,54,296,,,,,54,,54,,54,54,,54,54,54,,54',
'54,,151,,,54,54,42,42,54,,42,54,42,,,,151,151,,54,,,,151,,54,,,42,54',
',,,,42,,42,,42,42,,42,42,42,,42,42,,,,,42,42,64,64,42,,64,42,64,,,,',
',,42,,,,,,42,,,64,42,,,,,64,,64,,64,64,,64,64,64,,64,64,64,64,,,64,64',
'285,285,64,,285,64,285,285,,,,,,64,,,,,,64,,,285,64,,,,,285,,285,,285',
'285,,285,285,285,,285,285,285,285,,,285,285,66,66,285,,66,285,66,,,',
',,,285,,,,,,285,,,66,285,,,,,66,,66,,66,66,,66,66,66,,66,66,66,66,,',
'66,66,67,67,66,,67,66,67,,,,,,,66,,,,,,66,,,67,66,,,,,67,,67,,67,67',
',67,67,67,,67,67,67,67,,,67,67,68,68,67,,68,67,68,,,,,,,67,,,,,,67,',
',68,67,,,,,68,,68,,68,68,,68,68,68,,68,68,68,68,,,68,68,69,69,68,,69',
'68,69,,,,,,,68,,,,,,68,,,69,68,,,,,69,,69,,69,69,,69,69,69,,69,69,69',
'69,,,69,69,70,70,69,,70,69,70,,,,,,,69,,,,,,69,,,70,69,,,,,70,,70,,70',
'70,,70,70,70,,70,70,70,70,,,70,70,71,71,70,,71,70,71,,,,,,,70,,,,,,70',
',,71,70,,,,,71,,71,,71,71,,71,71,71,,71,71,,,,,71,71,72,72,71,,72,71',
'72,,,,,,,71,,,,,,71,,,72,71,,,,,72,,72,,72,72,,72,72,72,,72,72,,,,,72',
'72,284,284,72,,284,72,284,,,,,,,72,,,,,,72,,,284,72,,,,,284,,284,,284',
'284,,284,284,284,,284,284,284,284,,,284,284,274,274,284,,274,284,274',
'274,,,,,,284,,,,,,284,,,274,284,,,,,274,,274,,274,274,,274,274,274,',
'274,274,,,,,274,274,75,75,274,,75,274,75,,,,,,,274,,,,,,274,,,75,274',
',,,,75,,75,,75,75,,75,75,75,,75,75,,,,,75,75,76,76,75,,76,75,76,,,,',
',,75,,,,,,75,,,76,75,,,,,76,,76,,76,76,,76,76,76,,76,76,,,,,76,76,77',
'77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,76,,,,,77,,77,,77,77,,77,77,77',
',77,77,,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77,,,78,77,,,,,78',
',78,,78,78,,78,78,78,,78,78,,,,,78,78,79,79,78,,79,78,79,,,,,,,78,,',
',,,78,,,79,78,,,,,79,,79,,79,79,,79,79,79,,79,79,,,,,79,79,80,80,79',
',80,79,80,,,,,,,79,,,,,,79,,,80,79,,,,,80,,80,,80,80,,80,80,80,,80,80',
',,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,80,,,,,81,,81,,81',
'81,,81,81,81,,81,81,,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81,,',
'82,81,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,83,83,82,,83,82,83',
',,,,,,82,,,,,,82,,,83,82,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83',
'84,84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,83,,,,,84,,84,,84,84,,84,84',
'84,,84,84,,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,84,,,,',
'85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,86,86,85,,86,85,86,,,,,,,85',
',,,,,85,,,86,85,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,87,87,86',
',87,86,87,,,,,,,86,,,,,,86,,,87,86,,,,,87,,87,,87,87,,87,87,87,,87,87',
',,,,87,87,88,88,87,,88,87,88,,,,,,,87,,,,,,87,,,88,87,,,,,88,,88,,88',
'88,,88,88,88,,88,88,,,,,88,88,89,89,88,,89,88,89,,,,,,,88,,,,,,88,,',
'89,88,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,170,170,89,,170,89',
'170,,,,,,,89,,,,,,89,,,170,89,,,,,170,,170,,170,170,,170,170,170,,170',
'170,,,,,170,170,91,91,170,,91,170,91,,,,,,,170,,,,,,170,,,91,170,,,',
',91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,92,92,91,,92,91,92,,,,,,,91',
',,,,,91,,,92,91,,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,93,93,92',
',93,92,93,,,,,,,92,,,,,,92,,,93,92,,,,,93,,93,,93,93,,93,93,93,,93,93',
',,,,93,93,,,93,267,267,93,,267,,267,,,,93,,,,,,93,,,93,93,,267,,,,,',
'267,,267,,267,267,,267,267,267,,267,267,,,,,267,267,95,95,267,,95,267',
'95,,,,,,,267,,,,,,267,,,95,267,,,,,95,95,95,95,95,95,95,95,95,95,,95',
'95,,,,,95,95,95,95,95,260,260,95,,260,,260,,,,95,,,,,95,95,,,,95,,260',
',,,,,260,,260,,260,260,,260,260,260,,260,260,,,,,260,260,97,97,260,',
'97,260,97,,,,,,,260,,,,,,260,,,97,260,,,,,97,,97,,97,97,,97,97,97,,97',
'97,,,,,97,97,98,98,97,,98,97,98,,,,,,,97,,,,,,97,,,98,97,,,,,98,,98',
',98,98,,98,98,98,,98,98,,,,,98,98,246,246,98,,246,98,246,,,,,,,98,,',
',,,98,,,246,98,,,,,246,,246,,246,246,,246,246,246,,246,246,,,,,246,246',
'245,245,246,,245,246,245,,,,,,,246,,,,,,246,,,245,246,,,,,245,,245,',
'245,245,,245,245,245,,245,245,,,,,245,245,242,242,245,,242,245,242,',
',,,,,245,,,,,,245,,,242,245,,,,,242,,242,,242,242,,242,242,242,,242',
'242,,,,,242,242,41,41,242,,41,242,41,,,,,,,242,149,,,,,242,,,41,242',
',,,149,41,149,41,149,41,41,,41,41,41,,41,41,,,,,41,41,,,41,103,103,41',
'149,103,,103,,,,41,,,149,149,,41,,149,149,41,,103,103,,149,,,103,,103',
',103,103,149,103,103,103,,103,103,,,,,103,103,236,236,103,,236,103,236',
',,,,,,103,,,,,,103,,,236,103,,,,,236,,236,,236,236,,236,236,236,,236',
'236,,,,,236,236,235,235,236,,235,236,235,,,,,,,236,150,,,,,236,,,235',
'236,,,,150,235,150,235,150,235,235,,235,235,235,,235,235,,,,,235,235',
',,235,107,107,235,150,107,,107,,,,235,,,150,150,,235,,150,150,235,,107',
'107,,150,,,107,,107,,107,107,150,107,107,107,,107,107,,,,,107,107,40',
'40,107,,40,107,40,,,,,,,107,,,,,,107,,,40,107,,,,,40,,40,,40,40,,40',
'40,40,,40,40,,,,,40,40,39,39,40,,39,40,39,,,,,,,40,,,,,,40,,,39,40,',
',,,39,,39,,39,39,,39,39,39,,39,39,,,,,39,39,312,312,39,,312,39,312,',
',,,,,39,,,,,,39,,,312,39,,,,,312,,312,,312,312,,312,312,312,,312,312',
',,,,312,312,324,324,312,,324,312,324,,,,,,,312,,,,,,312,,,324,312,,',
',,324,,324,,324,324,,324,324,324,,324,324,324,324,,,324,324,113,113',
'324,,113,324,113,,,,,,,324,,,,,,324,,,113,324,,,,,113,,113,,113,113',
',113,113,113,,113,113,,,,,113,113,233,233,113,,233,113,233,,,,,,,113',
',,,,,113,,,233,113,,,,,233,,233,,233,233,,233,233,233,,233,233,,,,,233',
'233,228,228,233,,228,233,228,,,,,,,233,154,,,,,233,,,228,233,,,,154',
'228,154,228,154,228,228,,228,228,228,,228,228,,,,,228,228,,,228,224',
'224,228,154,224,224,224,,,,228,154,154,154,154,,228,,154,154,228,,224',
',,154,,,224,,224,,224,224,154,224,224,224,,224,224,,,,,224,224,13,13',
'224,,13,224,13,,,,,,,224,155,,,,,224,,,13,224,,,,155,13,155,13,155,13',
'13,,13,13,13,,13,13,,,,,13,13,,,13,49,49,13,155,49,49,49,,,,13,155,155',
'155,155,,13,,155,155,13,,49,,,155,,,49,,49,,49,49,155,49,49,49,,49,49',
',,,,49,49,213,213,49,,213,49,213,,,,,,,49,,,,,,49,,,213,49,,,,,213,',
'213,,213,213,,213,213,213,,213,213,,,,,213,213,212,212,213,,212,213',
'212,212,,,,,,213,,,,,,213,,,212,213,,,,,212,,212,,212,212,,212,212,212',
',212,212,212,212,,,212,212,12,12,212,,12,212,12,,,,,,,212,,,,,,212,',
',12,212,,,,,12,,12,,12,12,,12,12,12,,12,12,,,,,12,12,211,211,12,,211',
'12,211,211,,,,,,12,,,,,,12,,,211,12,,,,,211,,211,,211,211,,211,211,211',
',211,211,211,211,,,211,211,204,204,211,,204,211,204,204,,,,,,211,,,',
',,211,,,204,211,,,,,204,,204,,204,204,,204,204,204,,204,204,204,204',
',,204,204,11,11,204,,11,204,11,,,,,,,204,,,,,,204,,,11,204,,,,,11,,11',
',11,11,,11,11,11,,11,11,,,,,11,11,175,175,11,,175,11,175,,,,,,,11,,',
',,,11,,,175,11,,,,,175,,175,,175,175,,175,175,175,,175,175,,,,,175,175',
'174,174,175,,174,175,174,,,,,,,175,,,,,,175,,,174,175,,,,,174,,174,',
'174,174,,174,174,174,,174,174,,,,,174,174,173,173,174,,173,174,173,',
',,,,,174,,,,,,174,,,173,174,,,,,173,,173,,173,173,,173,173,173,,173',
'173,,,,,173,173,341,341,173,,341,173,341,341,,,,,,173,,,,,,173,,,341',
'173,,,,,341,,341,,341,341,,341,341,341,156,341,341,341,341,,,341,341',
',,341,,156,341,156,,156,,,,,341,,,157,,,341,,,,341,,,,,,157,156,157',
',157,,,,,156,156,156,156,156,156,,156,156,,,,,,156,,,157,,,,,,156,,157',
'157,157,157,157,157,,157,157,158,,,,,157,,,,,,,158,158,157,158,,158',
',,158,,,,,159,,,,,,,,,,,,159,159,158,159,,159,,,159,,158,158,158,158',
'158,158,,158,158,,,,,,158,,,159,,,,,,158,,159,159,159,159,159,159,,159',
'159,160,,,,,159,,,,,,,160,160,159,160,,160,,,160,,,,,161,,,,,,,,,,,',
'161,161,160,161,,161,,,161,,160,160,160,160,160,160,,160,160,,,,,,160',
',,161,,,,,,160,,161,161,161,161,161,161,,161,161,162,,,,,161,,,,,,162',
'162,162,161,162,,162,,,162,162,162,162,,,,,,,,,,,,,,,,162,,,,,,163,',
'162,162,162,162,162,162,,162,162,163,163,163,,163,162,163,,,163,163',
'163,163,,162,,,,,,,,,,,343,343,,163,343,,343,343,163,,,163,163,163,163',
'163,163,,163,163,,,343,,,163,,,343,,343,,343,343,163,343,343,343,,343',
'343,343,343,,,343,343,4,4,343,,4,343,4,,,,,,,343,,,,,,343,,,4,343,,',
',,4,,4,,4,4,,4,4,4,4,4,4,4,4,,,4,4,344,344,4,,344,4,344,344,,,,,,4,',
',,,,4,,,344,4,,,,,344,,344,,344,344,,344,344,344,,344,344,344,344,,',
'344,344,0,0,344,,0,344,0,,,,,,,344,,,,,,344,,,0,344,,,,,0,,0,,0,0,,0',
'0,0,,0,0,0,0,,,0,0,90,90,0,,90,0,90,,,,,,,0,,,,,,0,,,90,0,,,,,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,,,,244,244,244,244,90,244',
'244,244,244,244,90,244,244,,90,,,,,244,244,244,239,239,239,239,,239',
'239,239,239,239,,239,239,,,244,244,,,239,239,239,195,195,195,195,,195',
'195,195,195,195,,195,195,,,239,239,,,195,195,195,,,,,,,,,,,,,,,,195',
'195' ]
        racc_action_check = arr = ::Array.new(5065, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4877,   270,   nil,   nil,  4783,   256,   nil,   150,   nil,   nil,
   309,  4186,  4045,  3854,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   230,   176,   211,  3522,
  3475,  3234,  1395,    -1,   186,   nil,   118,   117,   nil,  3904,
   152,   nil,   nil,   nil,  1348,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   221,  1442,   208,  1536,  1583,  1630,  1677,
  1724,  1771,  1818,    38,    29,  1959,  2006,  2053,  2100,  2147,
  2194,  2241,  2288,  2335,  2382,  2429,  2476,  2523,  2570,  2617,
  4924,  2711,  2758,  2805,   143,  2902,   156,  2999,  3046,   139,
    55,    82,   876,  3284,   nil,   219,   -32,  3428,   813,   nil,
   750,   624,   561,  3663,    22,   nil,   nil,   nil,   nil,    68,
    86,   nil,   nil,   nil,   nil,   nil,   498,    97,   nil,    24,
   nil,   nil,   183,   435,   nil,   146,   nil,   207,   nil,   nil,
   nil,   nil,   nil,    46,    76,   nil,   nil,   nil,   nil,  3244,
  3388,  1347,  1210,  1205,  3767,  3864,  4408,  4433,  4489,  4514,
  4570,  4595,  4651,  4696,   183,   120,    57,    -6,   nil,   nil,
  2664,   nil,   246,  4327,  4280,  4233,   218,   230,   nil,   nil,
    -7,   nil,   -10,     7,   128,   105,    54,    13,     8,   nil,
   nil,   nil,   nil,   nil,   nil,  4996,   372,   184,   nil,   204,
   nil,   212,   154,   nil,  4139,   nil,   205,   nil,   180,    -9,
   nil,  4092,  3998,  3951,  1251,   148,   106,   nil,     1,   123,
   115,    25,   nil,    27,  3807,   nil,   nil,   183,  3757,   nil,
   nil,   nil,   nil,  3710,   nil,  3378,  3331,    13,   nil,  4974,
   nil,    53,  3187,    99,  4952,  3140,  3093,   140,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  2952,   141,   nil,   159,   nil,   102,   138,  2855,   nil,   174,
    48,   181,   162,    -6,  1912,   nil,   163,   193,   198,   200,
   nil,    90,   nil,   206,  1865,  1489,   nil,   nil,   939,   nil,
   nil,   nil,  1128,   nil,  1191,   216,  1301,    -4,   nil,   nil,
   nil,   nil,  1065,  1002,   222,   165,   nil,   nil,   nil,   687,
    97,   nil,  3569,   238,   216,   nil,   240,   241,   nil,   nil,
   nil,   242,   244,   nil,  3616,   nil,   nil,   nil,   230,   247,
   nil,   nil,   248,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,  4374,   nil,  4736,  4830,   nil,   nil,   262,   nil,   nil,
   nil,   267,   nil,   268,   nil,   269,   nil,   nil,   nil,   nil,
   nil ]

racc_action_default = [
  -208,  -209,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -105,  -209,  -209,  -209,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -65,   -70,   -71,   -75,  -209,
  -209,  -209,  -209,  -209,  -115,  -117,  -209,  -209,  -162,  -209,
  -209,  -172,  -173,  -174,  -209,  -176,  -183,  -184,  -185,  -186,
  -187,  -188,  -189,  -209,  -209,    -6,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,  -209,
  -209,  -209,  -209,  -209,  -209,  -124,  -119,  -208,  -208,   -27,
  -209,   -34,  -209,  -209,   -72,  -209,  -209,  -209,  -209,   -82,
  -209,  -209,  -209,  -209,  -208,  -134,  -151,  -152,  -116,  -208,
  -208,  -143,  -145,  -146,  -147,  -148,   -42,  -209,  -165,  -209,
  -168,  -169,  -209,  -180,  -175,  -209,   361,    -5,    -8,   -11,
   -12,   -13,   -14,  -209,   -17,   -18,  -160,  -161,   -19,   -20,
   -21,   -22,   -23,   -24,   -25,   -26,   -28,   -29,   -30,   -31,
   -32,   -33,   -35,   -36,   -37,   -38,   -39,  -209,   -40,  -100,
  -209,   -76,  -209,  -201,  -207,  -195,  -192,  -190,  -113,  -125,
  -184,  -128,  -188,  -209,  -198,  -196,  -204,  -186,  -187,  -194,
  -199,  -200,  -202,  -203,  -205,  -124,  -123,  -209,  -122,  -209,
   -41,  -190,   -67,   -77,  -209,   -80,  -190,  -156,  -159,  -209,
   -74,  -209,  -209,  -209,  -124,  -192,  -208,  -153,  -209,  -209,
  -209,  -209,  -149,  -209,  -209,  -163,  -166,  -209,  -209,  -177,
  -178,  -179,  -181,  -209,   -16,  -209,  -209,  -190,  -102,  -124,
  -112,  -209,  -193,  -209,  -191,  -209,  -209,  -190,  -127,  -129,
  -195,  -196,  -197,  -198,  -201,  -204,  -206,  -207,  -120,  -121,
  -191,  -209,   -69,  -209,   -79,  -209,  -191,  -209,   -73,  -209,
   -85,  -209,   -91,  -209,  -209,   -95,  -192,  -190,  -209,  -209,
  -137,  -209,  -154,  -190,  -208,  -209,  -144,  -150,   -43,  -164,
  -167,  -170,  -171,  -182,  -104,  -209,  -191,  -190,  -108,  -114,
  -109,  -126,  -130,  -131,  -209,   -66,   -78,   -81,  -157,  -158,
   -85,   -84,  -209,  -209,   -91,   -90,  -209,  -209,   -99,   -94,
   -96,  -209,  -209,  -110,  -208,  -138,  -139,  -140,  -209,  -209,
  -135,  -136,  -209,  -142,  -101,  -103,  -111,  -118,   -68,   -83,
   -86,  -209,   -89,  -209,  -209,  -106,  -107,  -209,  -155,  -132,
  -141,  -209,   -88,  -209,   -93,  -209,   -98,  -133,   -87,   -92,
   -97 ]

racc_goto_table = [
     2,   119,     3,    99,   101,   102,   104,   134,   131,   177,
   176,   169,   132,   206,   241,   315,   125,   123,   311,   329,
   216,   139,   140,   141,   142,   219,   243,   286,   215,   287,
   275,   108,   110,   111,   112,   147,   147,    65,   197,   199,
   127,   126,   146,   146,   145,   148,   133,     1,   299,   239,
   261,   237,   301,   278,   317,   265,   274,   342,   339,   347,
   340,   279,   143,   126,   144,   325,   220,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   295,   172,   238,   196,
   196,   320,   203,   308,   201,   126,   304,   137,   209,   126,
   129,   168,   138,   232,   233,   172,   231,   nil,   nil,   247,
   nil,   nil,   nil,   nil,   321,   nil,   217,   nil,   nil,   nil,
   nil,   217,   222,   nil,   nil,   283,   322,   nil,   277,   276,
   nil,   nil,   328,   nil,   nil,   nil,   nil,   nil,   nil,   119,
   nil,   nil,   nil,   nil,   nil,   nil,   336,   nil,   nil,   nil,
   nil,   nil,   nil,   297,   nil,   125,   123,   nil,   nil,   nil,
   nil,   nil,   167,   nil,   nil,   108,   110,   111,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   291,   293,   nil,   nil,   132,
   125,   123,   125,   123,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   263,   126,   172,   nil,   nil,   nil,
   nil,   269,   271,   nil,   335,   nil,   288,   nil,   280,   nil,
   292,   nil,   nil,   nil,   nil,   133,   nil,   288,   294,   nil,
   nil,   nil,   nil,   nil,   172,   nil,   326,   302,   303,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   288,   nil,   nil,   nil,   nil,   nil,   nil,   309,
   nil,   nil,   nil,   nil,   nil,   nil,   126,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   338,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   332,   331,   nil,   167,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   108,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   331,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   351,   nil,   353,   355 ]

racc_goto_check = [
     2,    63,     3,     9,     9,     9,    38,    78,    74,    55,
    53,    50,    31,    43,    54,    46,    30,    36,    45,    65,
    64,     7,     7,     7,     7,    64,    37,    71,    53,    71,
    48,     9,     9,     9,     9,    31,    31,     5,    59,    59,
    11,     9,    30,    30,    12,    12,     9,     1,    56,    57,
    37,    51,    60,    54,    49,    37,    47,    46,    45,    65,
    44,    67,    11,     9,     9,    68,    70,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,    37,     9,    50,     9,
     9,    48,    42,    72,    11,     9,    37,     5,    11,     9,
    73,    13,     6,    79,    80,     9,    82,   nil,   nil,    55,
   nil,   nil,   nil,   nil,    54,   nil,     3,   nil,   nil,   nil,
   nil,     3,     3,   nil,   nil,    43,    37,   nil,    55,    53,
   nil,   nil,    37,   nil,   nil,   nil,   nil,   nil,   nil,    63,
   nil,   nil,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,    55,   nil,    30,    36,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,     9,     9,     9,   nil,   nil,
   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    74,    78,   nil,   nil,    31,
    30,    36,    30,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     9,     9,   nil,   nil,   nil,
   nil,     2,     2,   nil,    50,   nil,     9,   nil,     3,   nil,
     9,   nil,   nil,   nil,   nil,     9,   nil,     9,     9,   nil,
   nil,   nil,   nil,   nil,     9,   nil,    63,     9,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     3,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    47,     0,     2,   nil,    33,    36,   -46,   nil,    -8,
   nil,    -9,   -29,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -31,   -38,   nil,   nil,   nil,   nil,   -30,  -151,   -31,   nil,
   nil,   nil,   -13,   -93,  -252,  -252,  -257,  -157,  -183,  -219,
   -82,  -119,   nil,   -85,  -162,   -86,  -194,  -123,   nil,   -59,
  -192,   nil,   nil,   -45,   -94,  -265,   nil,  -155,  -216,   nil,
   -54,  -194,  -173,    50,   -42,   nil,   nil,   nil,   -47,   -32,
   -31,   nil,   -29 ]

racc_goto_default = [
   nil,   nil,   330,   198,     4,     5,     6,     7,     8,    10,
     9,   273,   nil,   nil,    14,    36,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,   nil,   nil,    37,
    38,   105,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    42,   nil,   nil,   nil,   178,   nil,    96,   nil,
   179,   183,   181,   115,   nil,   nil,   114,   nil,   nil,   120,
   nil,   121,   207,   nil,   nil,    51,    52,    54,   nil,   nil,
   nil,   135,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 81, :_reduce_1,
  1, 81, :_reduce_none,
  1, 82, :_reduce_3,
  1, 84, :_reduce_4,
  3, 84, :_reduce_5,
  2, 84, :_reduce_6,
  1, 85, :_reduce_7,
  3, 85, :_reduce_8,
  1, 86, :_reduce_none,
  1, 87, :_reduce_10,
  3, 87, :_reduce_11,
  3, 87, :_reduce_12,
  3, 87, :_reduce_13,
  3, 87, :_reduce_14,
  1, 89, :_reduce_none,
  4, 89, :_reduce_16,
  3, 89, :_reduce_17,
  3, 89, :_reduce_18,
  3, 89, :_reduce_19,
  3, 89, :_reduce_20,
  3, 89, :_reduce_21,
  3, 89, :_reduce_22,
  3, 89, :_reduce_23,
  3, 89, :_reduce_24,
  3, 89, :_reduce_25,
  3, 89, :_reduce_26,
  2, 89, :_reduce_27,
  3, 89, :_reduce_28,
  3, 89, :_reduce_29,
  3, 89, :_reduce_30,
  3, 89, :_reduce_31,
  3, 89, :_reduce_32,
  3, 89, :_reduce_33,
  2, 89, :_reduce_34,
  3, 89, :_reduce_35,
  3, 89, :_reduce_36,
  3, 89, :_reduce_37,
  3, 89, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  1, 91, :_reduce_42,
  3, 91, :_reduce_43,
  1, 90, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 111, :_reduce_64,
  1, 111, :_reduce_65,
  5, 94, :_reduce_66,
  3, 94, :_reduce_67,
  6, 94, :_reduce_68,
  4, 94, :_reduce_69,
  1, 94, :_reduce_70,
  1, 98, :_reduce_71,
  2, 98, :_reduce_72,
  4, 119, :_reduce_73,
  3, 119, :_reduce_74,
  1, 119, :_reduce_75,
  3, 120, :_reduce_76,
  2, 118, :_reduce_77,
  3, 122, :_reduce_78,
  2, 122, :_reduce_79,
  2, 121, :_reduce_80,
  4, 121, :_reduce_81,
  2, 101, :_reduce_82,
  5, 124, :_reduce_83,
  4, 124, :_reduce_84,
  0, 125, :_reduce_none,
  2, 125, :_reduce_86,
  4, 125, :_reduce_87,
  3, 125, :_reduce_88,
  6, 102, :_reduce_89,
  5, 102, :_reduce_90,
  0, 126, :_reduce_none,
  4, 126, :_reduce_92,
  3, 126, :_reduce_93,
  5, 100, :_reduce_94,
  1, 127, :_reduce_95,
  2, 127, :_reduce_96,
  5, 128, :_reduce_97,
  4, 128, :_reduce_98,
  1, 129, :_reduce_99,
  1, 93, :_reduce_none,
  4, 93, :_reduce_101,
  1, 131, :_reduce_102,
  3, 131, :_reduce_103,
  3, 130, :_reduce_104,
  1, 88, :_reduce_105,
  6, 88, :_reduce_106,
  6, 88, :_reduce_107,
  5, 88, :_reduce_108,
  5, 88, :_reduce_109,
  5, 88, :_reduce_110,
  4, 136, :_reduce_111,
  1, 137, :_reduce_112,
  1, 133, :_reduce_113,
  3, 133, :_reduce_114,
  1, 132, :_reduce_115,
  2, 132, :_reduce_116,
  1, 132, :_reduce_117,
  6, 99, :_reduce_118,
  2, 99, :_reduce_119,
  3, 138, :_reduce_120,
  3, 138, :_reduce_121,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 135, :_reduce_124,
  1, 135, :_reduce_125,
  3, 135, :_reduce_126,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  3, 140, :_reduce_130,
  3, 140, :_reduce_131,
  6, 103, :_reduce_132,
  7, 104, :_reduce_133,
  1, 146, :_reduce_134,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_138,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  6, 105, :_reduce_141,
  5, 105, :_reduce_142,
  1, 149, :_reduce_143,
  3, 149, :_reduce_144,
  1, 151, :_reduce_145,
  1, 151, :_reduce_146,
  1, 151, :_reduce_147,
  1, 151, :_reduce_none,
  1, 150, :_reduce_none,
  2, 150, :_reduce_150,
  1, 143, :_reduce_151,
  1, 143, :_reduce_152,
  1, 144, :_reduce_153,
  2, 144, :_reduce_154,
  4, 144, :_reduce_155,
  1, 123, :_reduce_156,
  3, 123, :_reduce_157,
  3, 152, :_reduce_158,
  1, 152, :_reduce_159,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 97, :_reduce_162,
  3, 106, :_reduce_163,
  4, 106, :_reduce_164,
  2, 106, :_reduce_165,
  3, 109, :_reduce_166,
  4, 109, :_reduce_167,
  2, 109, :_reduce_168,
  1, 153, :_reduce_169,
  3, 153, :_reduce_170,
  3, 154, :_reduce_171,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 155, :_reduce_174,
  2, 156, :_reduce_175,
  1, 157, :_reduce_176,
  1, 159, :_reduce_177,
  1, 160, :_reduce_178,
  2, 158, :_reduce_179,
  1, 161, :_reduce_180,
  1, 162, :_reduce_181,
  2, 162, :_reduce_182,
  1, 112, :_reduce_183,
  1, 115, :_reduce_184,
  1, 113, :_reduce_185,
  1, 114, :_reduce_186,
  1, 108, :_reduce_187,
  1, 107, :_reduce_188,
  1, 110, :_reduce_189,
  0, 117, :_reduce_none,
  1, 117, :_reduce_191,
  0, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  0, 83, :_reduce_208 ]

racc_reduce_n = 209

racc_shift_n = 361

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :ATAT => 44,
  :LCOLLECT => 45,
  :RCOLLECT => 46,
  :CLASSREF => 47,
  :NOT => 48,
  :OR => 49,
  :AND => 50,
  :UNDEF => 51,
  :PARROW => 52,
  :PLUS => 53,
  :MINUS => 54,
  :TIMES => 55,
  :DIV => 56,
  :LSHIFT => 57,
  :RSHIFT => 58,
  :UMINUS => 59,
  :MATCH => 60,
  :NOMATCH => 61,
  :REGEX => 62,
  :IN_EDGE => 63,
  :OUT_EDGE => 64,
  :IN_EDGE_SUB => 65,
  :OUT_EDGE_SUB => 66,
  :IN => 67,
  :UNLESS => 68,
  :PIPE => 69,
  :LAMBDA => 70,
  :SELBRACE => 71,
  :NUMBER => 72,
  :LOW => 73,
  :HIGH => 74,
  :CALL => 75,
  :MODULO => 76,
  :DELETES => 77,
  :TITLE_COLON => 78,
  :CASE_COLON => 79 }

racc_nt_base = 80

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "DELETES",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "number",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 58)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 63)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 76)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 86)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 127)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

module_eval(<<'.,.,', 'egrammar.ra', 158)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 159)
  def _reduce_65(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 167)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 171)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_69(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 184)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_71(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_72(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_75(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_76(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_77(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_78(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_79(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_80(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_81(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_82(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 244)
  def _reduce_84(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_86(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_87(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_88(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 269)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_90(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 283)
  def _reduce_92(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_93(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_94(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_95(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_96(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 311)
  def _reduce_98(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 315)
  def _reduce_99(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_101(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_102(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_103(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_104(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_105(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error val[1], "A resource default can not be virtual or exported"
      when :override
        error val[1], "A resource override can not be virtual or exported"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 371)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class, :defaults, :override
        error val[1], "Defaults are not virtualizable"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error val[1], "A resource default can not specify a resource name"
      when :override
        error val[1], "A resource override does not allow override of name of resource"
      else
        error val[1], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_109(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error val[1], "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 407)
  def _reduce_110(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 412)
  def _reduce_111(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_114(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_115(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_116(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_117(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 437)
  def _reduce_118(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 441)
  def _reduce_119(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_120(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_121(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 122 omitted

# reduce 123 omitted

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_125(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_126(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_130(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 492)
  def _reduce_132(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 515)
  def _reduce_133(val, _values, result)
          namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_134(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_138(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_141(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_142(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_143(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_144(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_145(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 572)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_147(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 579)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_151(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 585)
  def _reduce_152(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_153(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_154(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_155(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_156(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_157(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 600)
  def _reduce_158(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 601)
  def _reduce_159(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_162(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_163(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_164(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_165(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_166(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_167(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_168(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_169(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_170(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_171(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_175(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_176(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_177(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_179(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_180(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_181(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_182(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_183(val, _values, result)
     result = Factory.NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_184(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_185(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_186(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_187(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_188(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_189(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 190 omitted

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_191(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

# reduce 205 omitted

# reduce 206 omitted

# reduce 207 omitted

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_208(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
