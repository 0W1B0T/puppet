#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 909)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'65,77,282,-141,63,71,392,72,71,294,72,-279,334,335,87,88,89,342,-282',
'-284,166,393,297,504,21,20,299,-270,446,261,295,53,283,56,142,67,12',
'294,61,45,48,462,55,46,10,11,-141,294,64,19,297,297,47,167,-279,17,18',
'145,295,86,343,-282,-284,82,90,92,91,93,295,54,-270,262,332,44,78,319',
'80,81,320,-181,-181,62,50,68,69,57,65,77,60,59,63,71,70,72,446,70,129',
'129,114,198,126,126,195,463,142,168,77,-269,510,169,21,20,116,446,119',
'193,113,53,115,56,142,67,12,472,61,45,48,145,55,46,10,11,128,128,64',
'19,125,125,47,118,171,17,18,145,127,127,413,129,72,82,-269,126,459,129',
'458,54,459,126,458,44,78,95,80,81,274,273,474,62,50,68,69,57,65,77,60',
'59,63,71,70,72,502,-183,-183,128,114,476,129,125,340,128,126,323,322',
'125,447,127,21,20,116,446,119,127,113,53,115,56,158,67,12,480,61,45',
'48,482,55,46,10,11,274,273,64,19,128,340,47,118,125,17,18,168,77,294',
'485,169,127,82,-182,-182,129,274,273,54,126,486,297,44,78,95,80,81,-181',
'-181,295,62,50,68,69,57,65,77,60,59,63,71,70,72,287,274,273,166,131',
'132,163,340,128,129,-185,-185,125,126,129,149,21,20,126,489,127,122',
'148,53,493,56,82,67,134,462,61,45,48,495,55,46,167,78,274,273,64,19',
'376,496,47,128,497,17,18,125,128,294,441,498,125,82,129,127,340,129',
'126,54,127,126,297,44,78,500,80,81,131,132,295,62,50,68,69,57,65,77',
'60,59,63,71,70,72,505,506,507,129,508,509,128,126,94,128,125,86,518',
'125,519,520,21,20,127,83,94,127,129,53,374,56,126,67,12,340,61,45,48',
'294,55,46,10,11,94,128,64,19,158,125,47,94,297,17,18,168,77,127,522',
'169,295,82,523,94,128,129,129,54,125,126,126,44,78,86,80,81,127,524',
'369,62,50,68,69,57,65,77,60,59,63,71,70,72,321,317,317,166,158,311,163',
'310,348,128,128,366,367,125,125,369,21,20,373,378,380,127,127,53,383',
'56,82,67,134,385,61,45,48,297,55,46,167,78,388,389,64,19,294,285,47',
'281,401,17,18,168,77,402,403,169,404,82,405,408,129,148,285,54,126,414',
'278,44,78,416,80,81,277,276,388,62,50,68,69,57,65,77,60,59,63,71,70',
'72,-224,422,424,166,431,432,163,340,128,341,435,94,125,438,388,388,21',
'20,148,448,127,449,94,53,452,56,82,67,134,453,61,45,48,263,55,46,167',
'78,456,460,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,308,,,,114,,,,,,,,,,,,21,20,116',
',119,,113,53,115,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,118,',
'17,18,168,77,,,169,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65',
'77,60,59,63,71,70,72,,,,166,114,,163,,,,,,,,,,21,20,116,,119,,113,53',
'115,56,82,67,134,,61,45,48,,55,46,167,78,,,64,19,,,47,118,,17,18,,,',
',,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,,,,,114,,,,,,,,,,,,21,20,116,,119,,113,53,115,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,118,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,',
',62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,114,,,,,,,,,,,,21,20,116',
',119,,113,53,115,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,118,',
'17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59',
'63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,',
',,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,',
',,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,141,,,,,53,,56,,67,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,12,,61,45,48,84,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,186,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,175,172',
'68,69,173,182,181,174,59,65,77,70,,63,71,,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,',
'82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,79,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,514,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,341,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65',
'77,60,59,63,71,70,72,512,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61',
'45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,114,,64,19,,,47,,,17,18,,,,116,,119,82,113',
',115,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,,118,60,59,65,77,70,,63',
'71,177,72,,,,,96,97,,,,,,95,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,',
'55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,',
',175,172,68,69,173,182,181,174,59,65,77,70,,63,71,184,72,,,,,,,,,,,',
',,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,',
'17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,175,172,68,69,173,182,181',
'174,59,65,77,70,,63,71,,72,186,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,175,172,68,69,173,182,181,174,59,65,77,70,,63,71,,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,197,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,',
',47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,464',
',,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,',
',,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,',
'53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,',
',,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,',
',,,,,,,,,,,,,21,20,,,,,,215,230,221,231,67,223,233,225,45,213,,217,211',
',,,,64,19,234,229,212,,,17,210,,,,,,,82,,,,,232,216,,,,44,78,,80,81',
',,,226,214,227,228,222,236,235,224,59,65,77,70,114,63,71,,72,,,,,,,',
',,116,,119,,113,,115,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,118',
',,,64,19,,,47,,,17,18,,,96,97,,,82,,,95,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65',
'77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,',
',62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63',
'71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46',
',,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68',
'69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67',
'134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78',
',80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,',
',64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,',
',47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,258,44,78,,80,81,,',
',62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54',
',,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,',
',17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59',
'63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50',
'68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,',
'67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44',
'78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70',
'72,451,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80',
'81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82',
',,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,',
',,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,',
',47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62',
'50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,',
'44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71',
'70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,',
',64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69',
'57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12',
',61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78',
',80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,82,,,,,,54,,,,44,78,,80,81,,,,175,172,68,69,173,182,181,174,59,65',
'77,70,,63,71,,72,417,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45',
'48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81',
',,,175,172,68,69,173,182,181,174,59,65,77,70,,63,71,,72,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,175,172,68,69,173,182,181,174',
'59,65,77,70,114,63,71,,72,,,,,,,,,,116,,119,,113,,115,21,20,,,,,,53',
',56,,67,134,,61,45,48,,55,46,118,,,,64,19,,,47,,,17,18,,,96,97,,,82',
',,95,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,134,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77',
'60,59,63,71,70,72,397,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45',
'48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81',
',,,62,50,68,69,57,65,77,60,59,63,71,70,72,395,,,,,,,,,,,,,,,,21,20,',
',,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,',
'82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65,77,60,59,63,71,70,72',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,,,,,,82,,,,,,54,,,,44,78,,80,81,,,,62,50,68,69,57,65',
'77,60,59,63,71,70,72,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,67,12,,61,45',
'48,,55,46,10,11,114,,64,19,,,47,,,17,18,,,105,116,,119,82,113,,115,',
'106,54,,,,44,78,,80,81,,,,62,50,68,69,57,,118,60,59,,,70,,,98,99,101',
'100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108',
'107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114',
'96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,',
',102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95',
',,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118',
',,,112,111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116',
',119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98',
'99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,',
'106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103',
'104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109',
',,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,',
',,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,',
',,,,118,,,,112,111,,,98,99,101,100,103,104,,96,97,114,,300,,,95,,,,',
',,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,102,,,,,,,,,,118',
',,,112,111,,,98,99,101,100,103,104,,96,97,114,,301,,,95,,,,,,,110,105',
'116,,119,,113,,115,,106,108,107,109,,,,,,102,,,,,,,,,,118,,,,112,111',
',,98,99,101,100,103,104,,96,97,114,,302,,,95,,,,,,,110,105,116,,119',
',113,,115,,106,108,107,109,,,,,,102,,,,,,,,,,118,,,,112,111,,,98,99',
'101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,370,119,,113,,115,',
'106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103',
'104,114,96,97,,,,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109',
',,,,,,,,102,,,,,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,',
',,,,95,,,,110,105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,',
',,,,118,,,,112,111,,,98,99,101,100,103,104,114,96,97,,,344,,,95,,,,110',
'105,116,,119,,113,,115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,,112',
'111,,,98,99,101,100,103,104,114,96,97,,,,,,95,,,,110,105,116,,119,,113',
',115,,106,108,107,109,,,,,,,,,102,,,,,,,118,,,,,111,,,98,99,101,100',
'103,104,114,96,97,,,,,,95,,,,110,105,116,,119,114,113,,115,,106,108',
'107,109,,,,,105,116,,119,102,113,,115,,106,,118,,,,,,,,98,99,101,100',
'103,104,,96,97,118,,,,,95,,,98,99,101,100,103,104,114,96,97,,,,,,95',
',,,,105,116,,119,102,113,,115,,106,,114,,,,,,,,,,102,,,105,116,,119',
'118,113,,115,,106,,,98,99,101,100,103,104,,96,97,,,,,,95,,118,,,114',
',,,,98,99,101,100,103,104,,96,97,116,,119,114,113,95,115,102,,,,,,,',
',,116,,119,,113,,115,,,,118,,,,102,,,,98,99,101,100,103,104,,96,97,118',
',,114,,95,,,98,99,101,100,103,104,,96,97,116,,119,114,113,95,115,,,',
',,,,102,,,116,,119,,113,,115,,,,118,,,,102,,,,98,99,101,100,,,,96,97',
'118,,,,,95,,,98,99,101,100,114,,,96,97,,,,,,95,,110,105,116,,119,,113',
'102,115,,106,108,107,109,,,,,,,,,,,102,,,,,118,,,114,112,111,,,98,99',
'101,100,103,104,,96,97,116,,119,,113,95,115,,,,114,,,,,,334,335,,,,',
',,116,,119,118,113,,115,102,,,,,,101,100,,,,96,97,,,,,,95,,118,,,,,114',
',,,,101,100,,,,96,97,110,105,116,338,119,95,113,102,115,,106,108,107',
'109,,,,,,,,,,,,,,,,118,,102,,112,111,,,98,99,101,100,103,104,,96,97',
',356,230,355,231,95,353,233,357,,350,,352,354,,,,,,,234,229,358,,,,351',
',,,,102,,,,,,,232,359,,,,,,,,,,,,362,360,363,361,364,236,235,365,356',
'230,355,231,,353,233,357,,350,,352,354,,,,,,,234,229,358,,,,351,,,,',
',,,,,,,232,359,,,,,,,,,,,,362,360,363,361,364,236,235,365,356,230,355',
'231,,353,233,357,,350,,352,354,,,,,,,234,229,358,,,,351,,,,,,,,,,,,232',
'359,,,,,,,,,,,,362,360,363,361,364,236,235,365,356,230,355,231,,353',
'233,357,,350,,352,354,,,,,,,234,229,358,,,,351,,,,,,,,,,,,232,359,,',
',,,,,,,,,362,360,363,361,364,236,235,365,356,230,355,231,,353,233,357',
',350,,352,354,,,,,,,234,229,358,,,,351,,,,,,,,,,,,232,359,,,,,,,,,,',
',362,360,363,361,364,236,235,365,356,230,355,231,,353,233,357,,350,',
'352,354,,,,,,,234,229,358,,,,351,,,,,,,,,,,,232,359,,,,,,,,,,,,362,360',
'363,361,364,236,235,365' ]
        racc_action_table = arr = ::Array.new(9933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'149,149,145,213,149,149,298,149,171,388,171,212,422,422,7,7,7,220,228',
'227,311,298,388,475,149,149,149,211,475,116,388,149,145,149,172,149',
'149,195,149,149,149,397,149,149,149,149,213,296,149,149,195,171,149',
'311,212,149,149,172,195,85,220,228,227,149,7,7,7,7,296,149,211,116,195',
'149,149,185,149,149,185,213,213,149,149,149,149,149,474,474,149,149',
'474,474,149,474,398,171,56,223,238,83,56,223,79,398,50,193,193,223,490',
'193,474,474,238,490,238,78,238,474,238,474,214,474,474,406,474,474,474',
'50,474,474,474,474,56,223,474,474,56,223,474,238,66,474,474,214,56,223',
'313,222,313,474,223,222,395,156,395,474,456,156,456,474,474,238,474',
'474,154,154,411,474,474,474,474,474,472,472,474,474,472,472,474,472',
'472,64,64,222,239,421,226,222,423,156,226,190,190,156,381,222,472,472',
'239,381,239,156,239,472,239,472,60,472,472,430,472,472,472,434,472,472',
'472,472,157,157,472,472,226,437,472,239,226,472,472,225,225,148,442',
'225,226,472,63,63,221,123,123,472,221,443,148,472,472,239,472,472,48',
'48,148,472,472,472,472,472,281,281,472,472,281,281,472,281,148,170,170',
'225,58,58,225,444,221,373,65,65,221,373,12,52,281,281,12,450,221,12',
'51,281,459,281,225,281,281,460,281,281,281,462,281,281,225,225,155,155',
'281,281,274,463,281,373,466,281,281,373,12,274,373,469,12,281,173,373',
'470,62,173,281,12,62,274,281,281,471,281,281,16,16,274,281,281,281,281',
'281,278,278,281,281,278,278,281,278,478,479,484,59,487,488,173,59,8',
'62,173,5,499,62,501,503,278,278,173,1,207,62,175,278,273,278,175,278',
'278,209,278,278,278,273,278,278,278,278,206,59,278,278,224,59,278,205',
'273,278,278,310,310,59,511,310,273,278,513,204,175,57,134,278,175,57',
'134,278,278,199,278,278,175,515,521,278,278,278,278,278,17,17,278,278',
'17,17,278,17,188,183,176,310,174,161,310,159,260,57,134,265,267,57,134',
'268,17,17,271,275,279,57,134,17,283,17,310,17,17,284,17,17,17,285,17',
'17,310,310,288,294,17,17,295,147,17,143,303,17,17,61,61,304,305,61,306',
'17,307,309,130,141,312,17,130,316,140,17,17,318,17,17,138,137,331,17',
'17,17,17,17,18,18,17,17,18,18,17,18,336,337,339,61,345,347,61,349,130',
'351,368,121,130,371,375,377,18,18,380,382,130,383,120,18,386,18,61,18',
'18,387,18,18,18,117,18,18,61,61,394,396,18,18,,,18,,,18,18,,,,,,,18',
',,,,,18,,,,18,18,,18,18,,,,18,18,18,18,18,158,158,18,18,158,158,18,158',
'158,,,,136,,,,,,,,,,,,158,158,136,,136,,136,158,136,158,,158,158,,158',
'158,158,,158,158,158,158,,,158,158,,,158,136,,158,158,408,408,,,408',
',158,,,,,,158,,,,158,158,,158,158,,,,158,158,158,158,158,19,19,158,158',
'19,19,158,19,,,,408,237,,408,,,,,,,,,,19,19,237,,237,,237,19,237,19',
'408,19,19,,19,19,19,,19,19,408,408,,,19,19,,,19,237,,19,19,,,,,,,19',
',,,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,258,258,19,19,258,258,19,258',
',,,,133,,,,,,,,,,,,258,258,133,,133,,133,258,133,258,,258,258,,258,258',
'258,,258,258,,,,,258,258,,,258,133,,258,258,,,,,,,258,,,,,,258,,,,258',
'258,,258,258,,,,258,258,258,258,258,20,20,258,258,20,20,258,20,,,,,135',
',,,,,,,,,,,20,20,135,,135,,135,20,135,20,,20,20,,20,20,20,,20,20,20',
'20,,,20,20,,,20,135,,20,20,,,,,,,20,,,,,,20,,,,20,20,,20,20,,,,20,20',
'20,20,20,217,217,20,20,217,217,20,217,,,,,,,,,,,,,,,,,217,217,,,,,,217',
',217,,217,217,,217,217,217,,217,217,,,,,217,217,,,217,,,217,217,,,,',
',,217,,,,,,217,,,,217,217,,217,217,,,,217,217,217,217,217,21,21,217',
'217,21,21,217,21,,,,,,,,,,,,,,,,,21,21,,,,,,21,,21,,21,21,,21,21,21',
',21,21,21,21,,,21,21,,,21,,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,',
',,21,21,21,21,21,458,458,21,21,458,458,21,458,,,,,,,,,,,,,,,,,458,458',
',,,,,458,,458,,458,458,,458,458,458,,458,458,,,,,458,458,,,458,,,458',
'458,,,,,,,458,,,,,,458,,,,458,458,,458,458,,,,458,458,458,458,458,49',
'49,458,458,49,49,458,49,,,,,,,,,,,,,,,,,49,49,49,,,,,49,,49,,49,49,',
'49,49,49,,49,49,49,49,,,49,49,,,49,,,49,49,,,,,,,49,,,,,,49,,,,49,49',
',49,49,,,,49,49,49,49,49,4,4,49,49,4,4,49,4,,,,,,,,,,,,,,,,,4,4,,,,',
',4,,4,,4,4,,4,4,4,4,4,4,4,4,,,4,4,,,4,,,4,4,,,,,,,4,,,,,,4,,,,4,4,,4',
'4,,,,4,4,4,4,4,452,452,4,4,452,452,4,452,,,,,,,,,,,,,,,,,452,452,,,',
',,452,,452,,452,452,,452,452,452,,452,452,,,,,452,452,,,452,,,452,452',
',,,,,,452,,,,,,452,,,,452,452,,452,452,,,,452,452,452,452,452,197,197',
'452,452,197,197,452,197,197,,,,,,,,,,,,,,,,197,197,,,,,,197,,197,,197',
'197,,197,197,197,,197,197,197,197,,,197,197,,,197,,,197,197,,,,,,,197',
',,,,,197,,,,197,197,,197,197,,,,197,197,197,197,197,197,197,197,197',
'449,449,197,,449,449,,449,,,,,,,,,,,,,,,,,449,449,,,,,,449,,449,,449',
'449,,449,449,449,,449,449,449,449,,,449,449,,,449,,,449,449,,,,,,,449',
',,,,,449,,,,449,449,,449,449,,,,449,449,449,449,449,53,53,449,449,53',
'53,449,53,,,,,,,,,,,,,,,,,53,53,,,,,,53,,53,,53,53,,53,53,53,,53,53',
',,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,,,53,53,53',
'53,53,54,54,53,53,54,54,53,54,,,,,,,,,,,,,,,,,54,54,,,,,,54,,54,,54',
'54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54,54',
',54,54,,,,54,54,54,54,54,55,55,54,54,55,55,54,55,,,,,,,,,,,,,,,,,55',
'55,,,,,,55,,55,,55,55,,55,55,55,,55,55,,,,,55,55,,,55,,,55,55,,,,,,',
'55,,,,,,55,,,,55,55,,55,55,,,,55,55,55,55,55,194,194,55,55,194,194,55',
'194,,,,,,,,,,,,,,,,,194,194,,,,,,194,,194,,194,194,,194,194,194,,194',
'194,194,194,,,194,194,,,194,,,194,194,,,,,,,194,,,,,,194,,,,194,194',
',194,194,,,,194,194,194,194,194,0,0,194,194,0,0,194,0,,,,,,,,,,,,,,',
',,0,0,,,,,,0,,0,,0,0,,0,0,0,,0,0,0,0,,,0,0,,,0,,,0,0,,,,,,,0,,,,,,0',
',,,0,0,,0,0,0,,,0,0,0,0,0,446,446,0,0,446,446,0,446,,,,,,,,,,,,,,,,',
'446,446,,,,,,446,,446,,446,446,,446,446,446,,446,446,,,,,446,446,,,446',
',,446,446,,,,,,,446,,,,,,446,,,,446,446,,446,446,,,,446,446,446,446',
'446,438,438,446,446,438,438,446,438,,,,,,,,,,,,,,,,,438,438,,,,,,438',
',438,,438,438,,438,438,438,,438,438,438,438,,,438,438,,,438,,,438,438',
',,,,,,438,,,,,,438,,,,438,438,,438,438,,,,438,438,438,438,438,496,496',
'438,438,496,496,438,496,,,,,,,,,,,,,,,,,496,496,,,,,,496,,496,,496,496',
',496,496,496,,496,496,496,496,,,496,496,,,496,,,496,496,,,,,,,496,,',
',,,496,,,,496,496,,496,496,,,,496,496,496,496,496,431,431,496,496,431',
'431,496,431,,,,,,,,,,,,,,,,,431,431,,,,,,431,,431,,431,431,,431,431',
'431,,431,431,,,,,431,431,,,431,,,431,431,,,,,,,431,,,,,,431,,,,431,431',
',431,431,,,,431,431,431,431,431,495,495,431,431,495,495,431,495,495',
',,,,,,,,,,,,,,,495,495,,,,,,495,,495,,495,495,,495,495,495,,495,495',
'495,495,,,495,495,,,495,,,495,495,,,,,,,495,,,,,,495,,,,495,495,,495',
'495,,,,495,495,495,495,495,210,210,495,495,210,210,495,210,,,210,,,',
',,,,,,,,,,210,210,,,,,,210,,210,,210,210,,210,210,210,,210,210,,,,,210',
'210,,,210,,,210,210,,,,,,,210,,,,,,210,,,,210,210,,210,210,,,,210,210',
'210,210,210,493,493,210,210,493,493,210,493,493,,,,,,,,,,,,,,,,493,493',
',,,,,493,,493,,493,493,,493,493,493,,493,493,493,493,,,493,493,,,493',
',,493,493,,,,,,,493,,,,,,493,,,,493,493,,493,493,,,,493,493,493,493',
'493,506,506,493,493,506,506,493,506,,,,,,,,,,,,,,,,,506,506,,,,,,506',
',506,,506,506,,506,506,506,,506,506,,,,,506,506,,,506,,,506,506,,,,',
',,506,,,,,,506,,,,506,506,,506,506,,,,506,506,506,506,506,10,10,506',
'506,10,10,506,10,,,,,,,,,,,,,,,,,10,10,,,,,,10,,10,,10,10,,10,10,10',
',10,10,10,10,,,10,10,,,10,,,10,10,,,,,,,10,,,,,,10,,,,10,10,,10,10,',
',,10,10,10,10,10,413,413,10,10,413,413,10,413,,,,,,,,,,,,,,,,,413,413',
',,,,,413,,413,,413,413,,413,413,413,,413,413,,,,,413,413,,,413,,,413',
'413,,,,,,,413,,,,,,413,,,,413,413,,413,413,,,,413,413,413,413,413,215',
'215,413,413,215,215,413,215,,,,,,,,,,,,,,,,,215,215,,,,,,215,,215,,215',
'215,,215,215,215,,215,215,,,244,,215,215,,,215,,,215,215,,,,244,,244',
'215,244,,244,,,215,,,,215,215,,215,215,,,,215,215,215,215,215,,244,215',
'215,70,70,215,,70,70,70,70,,,,,244,244,,,,,,244,,,,,70,70,,,,,,70,,70',
',70,70,,70,70,70,,70,70,70,70,,,70,70,,,70,,,70,70,,,,,,,70,,,,,,70',
',,,70,70,,70,70,,,,70,70,70,70,70,70,70,70,70,71,71,70,,71,71,71,71',
',,,,,,,,,,,,,,,,71,71,,,,,,71,,71,,71,71,,71,71,71,,71,71,71,71,,,71',
'71,,,71,,,71,71,,,,,,,71,,,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71',
'71,71,71,72,72,71,,72,72,,72,72,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72',
'72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72',
'72,,72,72,,,,72,72,72,72,72,72,72,72,72,76,76,72,,76,76,,76,,,,,,,,',
',,,,,,,,76,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76',
',,76,76,,,,,,,76,,,,,,76,,,,76,76,,76,76,,,,76,76,76,76,76,404,404,76',
'76,404,404,76,404,,,,,,,,,,,,,,,,,404,404,,,,,,404,,404,,404,404,,404',
'404,404,,404,404,404,404,,,404,404,,,404,,,404,404,,,,,,,404,,,,,,404',
',,,404,404,,404,404,,,,404,404,404,404,404,402,402,404,404,402,402,404',
'402,,,,,,,,,,,,,,,,,402,402,,,,,,402,,402,,402,402,,402,402,402,,402',
'402,402,402,,,402,402,,,402,,,402,402,,,,,,,402,,,,,,402,,,,402,402',
',402,402,,,,402,402,402,402,402,81,81,402,402,81,81,402,81,,,,,,,,,',
',,,,,,,81,81,,,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81,,,81',
'81,,,,,,,81,,,,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,401,401,81,81',
'401,401,81,401,,,,,,,,,,,,,,,,,401,401,,,,,,401,,401,,401,401,,401,401',
'401,,401,401,401,401,,,401,401,,,401,,,401,401,,,,,,,401,,,,,,401,,',
',401,401,,401,401,,,,401,401,401,401,401,84,84,401,401,84,84,401,84',
',,,,,,,,,,,,,,,,84,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84,,,84',
'84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,399',
'399,84,84,399,399,84,399,399,,,,,,,,,,,,,,,,399,399,,,,,,399,,399,,399',
'399,,399,399,399,,399,399,,,,,399,399,,,399,,,399,399,,,,,,,399,,,,',
',399,,,,399,399,,399,399,,,,399,399,399,399,399,86,86,399,399,86,86',
'399,86,,,,,,,,,,,,,,,,,86,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86',
'86,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86',
'86,86,87,87,86,86,87,87,86,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87',
'87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87',
'87,,87,87,,,,87,87,87,87,87,88,88,87,87,88,88,87,88,,,,,,,,,,,,,,,,',
'88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88',
',,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,89,89,88,88,89,89',
'88,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,89,89',
',,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89',
'89,90,90,89,89,90,90,89,90,,,,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90',
',90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90',
',90,90,,,,90,90,90,90,90,91,91,90,90,91,91,90,91,,,,,,,,,,,,,,,,,91',
'91,,,,,,91,,91,,91,91,,91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,',
',,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,92,92,91,91,92,92,91',
'92,,,,,,,,,,,,,,,,,92,92,,,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,',
',92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92',
'92,93,93,92,92,93,93,92,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93',
',93,93,93,,93,93,93,93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93',
',93,93,,,,93,93,93,93,93,94,94,93,93,94,94,93,94,,,,,,,,,,,,,,,,,94',
'94,,,,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,,,94,94,94,94,94,,,94',
'94,,,,,,,94,,,,,94,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,94,94',
'95,95,94,242,95,95,,95,,,,,,,,,,242,,242,,242,,242,95,95,,,,,,95,,95',
',95,95,,95,95,95,,95,95,242,,,,95,95,,,95,,,95,95,,,242,242,,,95,,,242',
',,95,,,,95,95,,95,95,,,,95,95,95,95,95,96,96,95,95,96,96,95,96,,,,,',
',,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96',
',,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,97,97,96',
'96,97,97,96,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97,97,,97,97,97,,97',
'97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97',
'97,97,97,98,98,97,97,98,98,97,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,',
'98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98',
'98,,98,98,,,,98,98,98,98,98,99,99,98,98,99,99,98,99,,,,,,,,,,,,,,,,',
'99,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,',
',,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,100,100,99,99,100,100',
'99,100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100,100,',
'100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100',
'100,,,,100,100,100,100,100,101,101,100,100,101,101,100,101,,,,,,,,,',
',,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101',
'101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101',
'101,101,101,102,102,101,101,102,102,101,102,,,,,,,,,,,,,,,,,102,102',
',,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102',
'102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,103',
'103,102,102,103,103,102,103,,,,,,,,,,,,,,,,,103,103,,,,,,103,,103,,103',
'103,,103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,',
',103,,,,103,103,,103,103,,,,103,103,103,103,103,104,104,103,103,104',
'104,103,104,,,,,,,,,,,,,,,,,104,104,,,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104',
',104,104,,,,104,104,104,104,104,105,105,104,104,105,105,104,105,,,,',
',,,,,,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,',
',105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105',
'105,105,105,105,106,106,105,105,106,106,105,106,,,,,,,,,,,,,,,,,106',
'106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,',
',106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106',
'107,107,106,106,107,107,106,107,,,,,,,,,,,,,,,,,107,107,,,,,,107,,107',
',107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107',
',,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107,108,108,107,107',
'108,108,107,108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108,108,,108',
'108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108',
'108,,108,108,,,,108,108,108,108,108,109,109,108,108,109,109,108,109',
',,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109',
',,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,',
',,109,109,109,109,109,110,110,109,109,110,110,109,110,,,,,,,,,,,,,,',
',,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,,110,110,',
',110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110',
'110,110,111,111,110,110,111,111,110,111,,,,,,,,,,,,,,,,,111,111,,,,',
',111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,,,111,111',
',,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111,111,111,112,112',
'111,111,112,112,111,112,,,,,,,,,,,,,,,,,112,112,,,,,,112,,112,,112,112',
',112,112,112,,112,112,,,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112',
',,,112,112,,112,112,,,,112,112,112,112,112,113,113,112,112,113,113,112',
'113,,,,,,,,,,,,,,,,,113,113,,,,,,113,,113,,113,113,,113,113,113,,113',
'113,,,,,113,113,,,113,,,113,113,,,,,,,113,,,,,,113,,,113,113,113,,113',
'113,,,,113,113,113,113,113,114,114,113,113,114,114,113,114,,,,,,,,,',
',,,,,,,114,114,,,,,,114,,114,,114,114,,114,114,114,,114,114,,,,,114',
'114,,,114,,,114,114,,,,,,,114,,,,,,114,,,,114,114,,114,114,,,,114,114',
'114,114,114,392,392,114,114,392,392,114,392,,,,,,,,,,,,,,,,,392,392',
',,,,,392,,392,,392,392,,392,392,392,,392,392,392,392,,,392,392,,,392',
',,392,392,,,,,,,392,,,,,,392,,,,392,392,,392,392,,,,392,392,392,392',
'392,389,389,392,392,389,389,392,389,,,,,,,,,,,,,,,,,389,389,,,,,,389',
',389,,389,389,,389,389,389,,389,389,,,,,389,389,,,389,,,389,389,,,,',
',,389,,,,,,389,,,,389,389,,389,389,,,,389,389,389,389,389,118,118,389',
'389,118,118,389,118,,,,,,,,,,,,,,,,,118,118,,,,,,118,,118,,118,118,',
'118,118,118,,118,118,,,,,118,118,,,118,,,118,118,,,,,,,118,,,,,,118',
',,,118,118,,118,118,,,,118,118,118,118,118,119,119,118,118,119,119,118',
'119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119,119,,119',
'119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119,,119,119',
',,,119,119,119,119,119,385,385,119,119,385,385,119,385,385,,,,,,,,,',
',,,,,,385,385,,,,,,385,,385,,385,385,,385,385,385,,385,385,385,385,',
',385,385,,,385,,,385,385,,,,,,,385,,,,,,385,,,,385,385,,385,385,,,,385',
'385,385,385,385,369,369,385,385,369,369,385,369,,,,,,,,,,,,,,,,,369',
'369,,,,,,369,,369,,369,369,,369,369,369,,369,369,,,,,369,369,,,369,',
',369,369,,,,,,,369,,,,,,369,,,,369,369,,369,369,,,,369,369,369,369,369',
'122,122,369,369,122,122,369,122,,,,,,,,,,,,,,,,,122,122,,,,,,122,,122',
',122,122,,122,122,122,,122,122,,,,,122,122,,,122,,,122,122,,,,,,,122',
',,,,,122,,,,122,122,,122,122,,,,122,122,122,122,122,348,348,122,122',
'348,348,122,348,,,,,,,,,,,,,,,,,348,348,,,,,,348,,348,,348,348,,348',
'348,348,,348,348,,,,,348,348,,,348,,,348,348,,,,,,,348,,,,,,348,,,,348',
'348,,348,348,,,,348,348,348,348,348,344,344,348,348,344,344,348,344',
',,,,,,,,,,,,,,,,344,344,,,,,,344,,344,,344,344,,344,344,344,,344,344',
',,,,344,344,,,344,,,344,344,,,,,,,344,,,,,,344,,,,344,344,,344,344,',
',,344,344,344,344,344,343,343,344,344,343,343,344,343,,,,,,,,,,,,,,',
',,343,343,,,,,,343,,343,,343,343,,343,343,343,,343,343,,,,,343,343,',
',343,,,343,343,,,,,,,343,,,,,,343,,,,343,343,,343,343,,,,343,343,343',
'343,343,342,342,343,343,342,342,343,342,,,,,,,,,,,,,,,,,342,342,,,,',
',342,,342,,342,342,,342,342,342,,342,342,,,,,342,342,,,342,,,342,342',
',,,,,,342,,,,,,342,,,,342,342,,342,342,,,,342,342,342,342,342,341,341',
'342,342,341,341,342,341,,,,,,,,,,,,,,,,,341,341,,,,,,341,,341,,341,341',
',341,341,341,,341,341,,,,,341,341,,,341,,,341,341,,,,,,,341,,,,,,341',
',,,341,341,,341,341,,,,341,341,341,341,341,326,326,341,341,326,326,341',
'326,,,,,,,,,,,,,,,,,326,326,,,,,,326,,326,,326,326,,326,326,326,,326',
'326,326,326,,,326,326,,,326,,,326,326,,,,,,,326,,,,,,326,,,,326,326',
',326,326,,,,326,326,326,326,326,321,321,326,326,321,321,326,321,,,,',
',,,,,,,,,,,,321,321,,,,,,321,,321,,321,321,,321,321,321,,321,321,321',
'321,,,321,321,,,321,,,321,321,,,,,,,321,,,,,,321,,,,321,321,,321,321',
',,,321,321,321,321,321,321,321,321,321,320,320,321,,320,320,,320,320',
',,,,,,,,,,,,,,,320,320,,,,,,320,,320,,320,320,,320,320,320,,320,320',
'320,320,,,320,320,,,320,,,320,320,,,,,,,320,,,,,,320,,,,320,320,,320',
'320,,,,320,320,320,320,320,320,320,320,320,317,317,320,,317,317,,317',
',,,,,,,,,,,,,,,,317,317,,,,,,317,,317,,317,317,,317,317,317,,317,317',
'317,317,,,317,317,,,317,,,317,317,,,,,,,317,,,,,,317,,,,317,317,,317',
'317,,,,317,317,317,317,317,317,317,317,317,216,216,317,243,216,216,',
'216,,,,,,,,,,243,,243,,243,,243,216,216,,,,,,216,,216,,216,216,,216',
'216,216,,216,216,243,,,,216,216,,,216,,,216,216,,,243,243,,,216,,,243',
',,216,,,,216,216,,216,216,,,,216,216,216,216,216,302,302,216,216,302',
'302,216,302,,,,,,,,,,,,,,,,,302,302,,,,,,302,,302,,302,302,,302,302',
'302,,302,302,,,,,302,302,,,302,,,302,302,,,,,,,302,,,,,,302,,,,302,302',
',302,302,,,,302,302,302,302,302,301,301,302,302,301,301,302,301,301',
',,,,,,,,,,,,,,,301,301,,,,,,301,,301,,301,301,,301,301,301,,301,301',
'301,301,,,301,301,,,301,,,301,301,,,,,,,301,,,,,,301,,,,301,301,,301',
'301,,,,301,301,301,301,301,300,300,301,301,300,300,301,300,300,,,,,',
',,,,,,,,,,300,300,,,,,,300,,300,,300,300,,300,300,300,,300,300,300,300',
',,300,300,,,300,,,300,300,,,,,,,300,,,,,,300,,,,300,300,,300,300,,,',
'300,300,300,300,300,282,282,300,300,282,282,300,282,,,,,,,,,,,,,,,,',
'282,282,,,,,,282,,282,,282,282,,282,282,282,,282,282,282,282,,,282,282',
',,282,,,282,282,,,,,,,282,,,,,,282,,,,282,282,,282,282,,,,282,282,282',
'282,282,11,11,282,282,11,11,282,11,,,,,,,,,,,,,,,,,11,11,,,,,,11,,11',
',11,11,,11,11,11,,11,11,11,11,249,,11,11,,,11,,,11,11,,,249,249,,249',
'11,249,,249,,249,11,,,,11,11,,11,11,,,,11,11,11,11,11,,249,11,11,,,11',
',,249,249,249,249,249,249,9,249,249,,,,,,249,,,,9,9,9,,9,,9,,9,,9,9',
'9,9,,,,,,,,,249,,,,,,,9,,,,9,9,,,9,9,9,9,9,9,455,9,9,,,,,,9,,,,455,455',
'455,,455,,455,,455,,455,455,455,455,,,,,,,,,9,,,,,,,455,,,,455,455,',
',455,455,455,455,455,455,433,455,455,,,,,,455,,,,433,433,433,,433,,433',
',433,,433,433,433,433,,,,,,,,,455,,,,,,,433,,,,433,433,,,433,433,433',
'433,433,433,429,433,433,,,,,,433,,,,429,429,429,,429,,429,,429,,429',
'429,429,429,,,,,,,,,433,,,,,,,429,,,,429,429,,,429,429,429,429,429,429',
'428,429,429,,,,,,429,,,,428,428,428,,428,,428,,428,,428,428,428,428',
',,,,,,,,429,,,,,,,428,,,,428,428,,,428,428,428,428,428,428,427,428,428',
',,,,,428,,,,427,427,427,,427,,427,,427,,427,427,427,427,,,,,,,,,428',
',,,,,,427,,,,427,427,,,427,427,427,427,427,427,426,427,427,,,,,,427',
',,,426,426,426,,426,,426,,426,,426,426,426,426,,,,,,,,,427,,,,,,,426',
',,,426,426,,,426,426,426,426,426,426,,426,426,150,,150,,,426,,,,,,,150',
'150,150,,150,,150,,150,,150,150,150,150,,,,,,426,,,,,,,,,,150,,,,150',
'150,,,150,150,150,150,150,150,,150,150,152,,152,,,150,,,,,,,152,152',
'152,,152,,152,,152,,152,152,152,152,,,,,,150,,,,,,,,,,152,,,,152,152',
',,152,152,152,152,152,152,,152,152,153,,153,,,152,,,,,,,153,153,153',
',153,,153,,153,,153,153,153,153,,,,,,152,,,,,,,,,,153,,,,153,153,,,153',
'153,153,153,153,153,269,153,153,,,,,,153,,,,269,269,269,269,269,,269',
',269,,269,269,269,269,,,,,,,,,153,,,,,,,269,,,,269,269,,,269,269,269',
'269,269,269,264,269,269,,,,,,269,,,,264,264,264,,264,,264,,264,,264',
'264,264,264,,,,,,,,,269,,,,,,,264,,,,264,264,,,264,264,264,264,264,264',
'259,264,264,,,,,,264,,,,259,259,259,,259,,259,,259,,259,259,259,259',
',,,,,,,,264,,,,,,,259,,,,259,259,,,259,259,259,259,259,259,255,259,259',
',,255,,,259,,,,255,255,255,,255,,255,,255,,255,255,255,255,,,,,,,,,259',
',,,,,,255,,,,255,255,,,255,255,255,255,255,255,254,255,255,,,,,,255',
',,,254,254,254,,254,,254,,254,,254,254,254,254,,,,,,,,,255,,,,,,,254',
',,,,254,,,254,254,254,254,254,254,253,254,254,,,,,,254,,,,253,253,253',
',253,252,253,,253,,253,253,253,253,,,,,252,252,,252,254,252,,252,,252',
',253,,,,,,,,253,253,253,253,253,253,,253,253,252,,,,,253,,,252,252,252',
'252,252,252,251,252,252,,,,,,252,,,,,251,251,,251,253,251,,251,,251',
',250,,,,,,,,,,252,,,250,250,,250,251,250,,250,,250,,,251,251,251,251',
'251,251,,251,251,,,,,,251,,250,,,248,,,,,250,250,250,250,250,250,,250',
'250,248,,248,247,248,250,248,251,,,,,,,,,,247,,247,,247,,247,,,,248',
',,,250,,,,248,248,248,248,248,248,,248,248,247,,,246,,248,,,247,247',
'247,247,247,247,,247,247,246,,246,245,246,247,246,,,,,,,,248,,,245,',
'245,,245,,245,,,,246,,,,247,,,,246,246,246,246,,,,246,246,245,,,,,246',
',,245,245,245,245,196,,,245,245,,,,,,245,,196,196,196,,196,,196,246',
'196,,196,196,196,196,,,,,,,,,,,245,,,,,196,,,241,196,196,,,196,196,196',
'196,196,196,,196,196,241,,241,,241,196,241,,,,240,,,,,,196,196,,,,,',
',240,,240,241,240,,240,196,,,,,,241,241,,,,241,241,,,,,,241,,240,,,',
',208,,,,,240,240,,,,240,240,208,208,208,208,208,240,208,241,208,,208',
'208,208,208,,,,,,,,,,,,,,,,208,,240,,208,208,,,208,208,208,208,208,208',
',208,208,,338,338,338,338,208,338,338,338,,338,,338,338,,,,,,,338,338',
'338,,,,338,,,,,208,,,,,,,338,338,,,,,,,,,,,,338,338,338,338,338,338',
'338,338,403,403,403,403,,403,403,403,,403,,403,403,,,,,,,403,403,403',
',,,403,,,,,,,,,,,,403,403,,,,,,,,,,,,403,403,403,403,403,403,403,403',
'340,340,340,340,,340,340,340,,340,,340,340,,,,,,,340,340,340,,,,340',
',,,,,,,,,,,340,340,,,,,,,,,,,,340,340,340,340,340,340,340,340,370,370',
'370,370,,370,370,370,,370,,370,370,,,,,,,370,370,370,,,,370,,,,,,,,',
',,,370,370,,,,,,,,,,,,370,370,370,370,370,370,370,370,378,378,378,378',
',378,378,378,,378,,378,378,,,,,,,378,378,378,,,,378,,,,,,,,,,,,378,378',
',,,,,,,,,,,378,378,378,378,378,378,378,378,263,263,263,263,,263,263',
'263,,263,,263,263,,,,,,,263,263,263,,,,263,,,,,,,,,,,,263,263,,,,,,',
',,,,,263,263,263,263,263,263,263,263' ]
        racc_action_check = arr = ::Array.new(9933, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1980,   371,   nil,   nil,  1288,   350,   nil,    -2,   351,  8300,
  2754,  8204,   278,   nil,   nil,   nil,   248,   428,   514,   686,
   858,  1030,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   162,  1202,
    77,   216,   254,  1636,  1722,  1808,    94,   409,   182,   353,
   197,   485,   323,   148,    93,   188,   124,   nil,   nil,   nil,
  3016,  3106,  3196,   nil,   nil,   nil,  3286,   nil,    38,    30,
   nil,  3544,   nil,    99,  3716,    46,  3888,  3974,  4060,  4146,
  4232,  4318,  4404,  4490,  4576,  4666,  4752,  4838,  4924,  5010,
  5096,  5182,  5268,  5354,  5440,  5526,  5612,  5698,  5784,  5870,
  5956,  6042,  6128,  6214,  6300,   nil,   -13,   548,  6558,  6644,
   537,   526,  6902,   213,   nil,   nil,   nil,   nil,   nil,   nil,
   494,   nil,   nil,   779,   410,   865,   607,   481,   480,   nil,
   489,   425,   nil,   476,   nil,    -7,   nil,   420,   194,    -2,
  8688,   nil,  8746,  8804,   138,   278,   151,   192,   600,   432,
   nil,   422,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   241,     1,     7,   320,   433,   372,   427,   nil,   nil,   nil,
   nil,   nil,   nil,   426,   nil,    65,   nil,   nil,   426,   nil,
   187,   nil,   nil,   103,  1894,     0,  9405,  1460,   nil,   406,
   nil,   nil,   nil,   nil,   400,   388,   381,   363,  9519,   368,
  2496,    15,    -1,    -9,    93,  2926,  7774,   944,   nil,   nil,
     5,   236,   145,    95,   385,   227,   184,     7,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   693,    91,   177,
  9473,  9449,  4664,  7772,  2967,  9352,  9335,  9291,  9274,  8245,
  9230,  9206,  9151,  9134,  9079,  9024,   nil,   nil,   772,  8969,
   433,   nil,   nil,  9842,  8914,   400,   nil,   426,   410,  8859,
   nil,   417,   nil,   348,   280,   448,   nil,   nil,   342,   430,
   nil,   256,  8118,   412,   458,   421,   nil,   nil,   463,   nil,
   nil,   nil,   nil,   nil,   461,   443,    10,   nil,    -7,   nil,
  8032,  7946,  7860,   475,   480,   481,   483,   484,   nil,   456,
   399,   -22,   437,   139,   nil,   nil,   493,  7684,   497,   nil,
  7594,  7504,   nil,   nil,   nil,   nil,  7418,   nil,   nil,   nil,
   nil,   497,   nil,   nil,   nil,   nil,   512,   515,  9552,   516,
  9668,  7332,  7246,  7160,  7074,   515,   nil,   521,  6988,   518,
   nil,   521,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   524,  6816,
  9726,   528,   nil,   273,   nil,   525,   nil,   526,  9784,   nil,
   470,   186,   533,   536,   nil,  6730,   541,   481,   -28,  6472,
   nil,   nil,  6386,   nil,   552,   118,   553,     7,    81,  3802,
   nil,  3630,  3458,  9610,  3372,   nil,   114,   nil,   657,   nil,
   nil,   157,   nil,  2840,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   113,   -69,   175,   nil,   nil,  8630,  8575,  8520,  8465,
   199,  2324,   nil,  8410,   203,   nil,   nil,   210,  2152,   nil,
   nil,   nil,   204,   215,   260,   nil,  2066,   nil,   nil,  1550,
   275,   nil,  1374,   nil,   nil,  8355,   122,   nil,  1116,   281,
   261,   nil,   290,   300,   nil,   nil,   302,   nil,   nil,   309,
   311,   323,   170,   nil,    84,    15,   nil,   nil,   342,   310,
   nil,   nil,   nil,   nil,   344,   nil,   nil,   346,   347,   nil,
   100,   nil,   nil,  2582,   nil,  2410,  2238,   nil,   nil,   354,
   nil,   356,   nil,   357,   nil,   nil,  2668,   nil,   nil,   nil,
   nil,   394,   nil,   398,   nil,   413,   nil,   nil,   nil,   nil,
   nil,   381,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -290,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -290,  -290,  -184,   -33,   -34,   -35,   -36,  -290,  -290,  -290,
  -290,  -290,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,   -90,  -290,
  -290,   -97,  -101,  -290,  -290,  -290,  -290,  -290,  -290,  -290,
  -290,  -290,  -290,  -238,  -261,  -237,  -290,  -211,  -212,  -213,
  -290,  -290,  -290,  -234,  -235,  -236,  -290,  -240,  -290,  -253,
  -256,  -290,  -262,  -290,  -290,    -7,  -290,  -290,  -290,  -290,
  -290,  -290,  -290,  -290,  -138,  -290,  -290,  -290,  -290,  -290,
  -290,  -290,  -290,  -290,  -290,  -290,  -290,  -290,  -290,  -290,
  -290,  -290,  -290,  -290,  -290,   -95,  -290,  -133,  -289,  -289,
   -22,   -23,  -290,  -289,  -154,  -181,  -182,  -183,  -184,  -185,
  -290,  -150,  -151,   -47,  -184,   -48,   -55,  -290,  -290,   -14,
  -263,   -92,   -96,  -201,  -208,  -261,   -98,  -289,  -290,  -290,
  -290,  -109,  -290,  -290,  -289,  -289,  -290,  -289,  -290,  -263,
  -165,  -167,  -168,  -169,  -170,  -171,  -173,  -174,  -237,  -238,
  -289,  -290,  -228,  -230,  -233,  -229,  -263,  -215,  -224,  -225,
  -226,  -231,  -232,  -263,  -217,  -290,  -220,  -221,  -290,  -239,
  -290,  -244,  -247,  -290,  -251,  -290,  -290,  -290,   526,    -6,
    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,  -290,  -263,
  -290,   -88,   -89,   -90,  -281,  -274,  -280,  -268,  -139,  -142,
  -290,  -271,  -285,  -184,  -288,  -277,  -283,  -212,  -213,  -267,
  -272,  -273,  -275,  -276,  -278,  -286,  -287,   -37,   -38,   -39,
   -40,   -41,   -42,   -43,   -44,   -45,   -46,   -49,   -50,   -51,
   -52,   -53,   -54,   -56,   -57,  -290,   -58,  -127,  -290,   -62,
  -263,  -102,  -103,  -138,  -137,  -290,  -136,  -290,  -265,  -290,
   -28,  -289,  -186,  -290,  -290,  -290,   -59,   -60,  -264,  -290,
   -94,  -290,  -251,  -290,  -290,  -290,  -180,  -107,  -263,  -191,
  -193,  -194,  -195,  -196,  -198,  -290,  -290,  -261,  -290,  -100,
  -290,  -290,  -290,  -290,  -290,  -290,  -290,  -290,  -162,  -289,
  -264,  -290,  -289,  -205,  -206,  -207,  -290,  -264,  -290,  -218,
  -290,  -290,  -241,  -242,  -243,  -245,  -290,  -248,  -249,  -250,
  -252,  -263,  -254,  -257,  -259,  -260,    -8,  -290,  -138,  -290,
  -264,  -290,  -290,  -290,  -290,  -263,  -129,  -290,  -264,  -263,
  -141,  -290,  -268,  -269,  -270,  -271,  -274,  -277,  -279,  -280,
  -281,  -282,  -283,  -284,  -285,  -288,  -134,  -135,  -290,  -266,
  -138,  -290,  -157,  -290,  -187,  -263,  -188,  -263,  -138,   -15,
   -91,  -290,  -290,  -290,  -104,  -290,  -178,  -290,  -264,  -290,
  -199,  -200,  -290,   -99,  -290,  -112,  -290,  -118,  -290,  -290,
  -122,  -289,  -289,  -138,  -289,  -161,  -290,  -175,  -290,  -166,
  -172,  -290,  -203,  -290,  -214,  -227,  -216,  -219,  -222,  -223,
  -246,  -290,  -290,  -263,   -26,  -140,  -145,  -143,  -144,  -131,
  -290,  -264,   -61,   -63,  -290,   -25,   -29,  -263,  -289,  -158,
  -159,  -160,  -290,  -290,  -263,   -93,  -290,  -202,  -209,  -251,
  -290,  -106,  -290,  -108,  -192,  -197,  -112,  -111,  -290,  -290,
  -118,  -117,  -290,  -290,  -121,  -123,  -290,  -155,  -156,  -290,
  -263,  -290,  -290,  -176,  -289,  -290,  -255,  -258,  -290,   -30,
  -128,  -130,  -132,   -27,  -290,  -189,  -190,  -290,  -290,  -105,
  -290,  -110,  -113,  -290,  -116,  -290,  -289,  -146,  -147,  -290,
  -152,  -290,  -164,  -290,  -204,   -24,   -31,  -153,  -149,  -210,
  -179,  -290,  -115,  -290,  -120,  -290,  -125,  -126,  -148,  -163,
  -177,  -265,  -114,  -119,  -124,   -32 ]

racc_goto_table = [
     2,   124,   133,   135,   136,   268,   137,   138,   164,   162,
   143,   260,   266,   266,   368,   146,   257,   284,   180,   180,
   333,   329,   189,   288,   144,   314,   140,   409,   328,   209,
   400,   120,   121,   279,     3,   139,    85,   461,   150,   152,
   153,   286,   265,   267,   478,   154,   155,   436,   124,   457,
   256,   170,   309,   176,   183,   315,   178,   178,   178,   384,
   492,   399,   191,   515,   466,   469,   196,   471,   345,   316,
   331,   425,   200,   201,   202,   203,   318,   157,   130,   208,
   237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   259,
   494,   484,   339,   264,   264,   280,   371,   269,   143,   382,
   491,   204,   205,   206,   207,   439,   199,   406,   410,   275,
   156,   454,   391,   124,   390,   473,   298,   465,   418,   327,
     1,   313,   143,   325,   326,   139,   324,   503,   192,   194,
   nil,   nil,   nil,   nil,   nil,   305,   144,   nil,   375,   377,
   nil,   nil,   nil,   347,   nil,   143,   nil,   nil,   307,   nil,
   nil,   346,   155,   nil,   170,   372,   nil,   412,   nil,   nil,
   nil,   nil,   164,   162,   143,   nil,   nil,   nil,   381,   nil,
   nil,   387,   411,   336,   nil,   271,   nil,   nil,   144,   nil,
   nil,   nil,   nil,   nil,   330,   135,   nil,   337,   349,   nil,
   150,   152,   153,   407,   nil,   nil,   286,   nil,   nil,   nil,
   154,   155,   124,   nil,   nil,   170,   303,   304,   nil,   306,
   nil,   nil,   nil,   nil,   421,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   312,   143,   143,   nil,   nil,   nil,   430,   nil,
   nil,   nil,   434,   255,   nil,   386,   477,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   164,   162,   nil,
   nil,   nil,   nil,   nil,   379,   415,   259,   525,   442,   419,
   443,   nil,   420,   423,   nil,   nil,   488,   nil,   nil,   nil,
   nil,   nil,   330,   nil,   nil,   nil,   nil,   259,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   468,   468,   nil,   468,   nil,
   394,   396,   nil,   178,   nil,   437,   178,   178,   nil,   nil,
   475,   nil,   191,   444,   nil,   nil,   479,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   426,   427,   428,   429,
   483,   nil,   468,   433,   481,   nil,   nil,   487,   470,   nil,
   nil,   nil,   nil,   nil,   445,   nil,   nil,   nil,   143,   490,
   nil,   nil,   nil,   nil,   269,   164,   162,   nil,   nil,   nil,
   nil,   nil,   440,   499,   nil,   nil,   nil,   nil,   468,   nil,
   nil,   nil,   nil,   nil,   455,   nil,   nil,   nil,   379,   nil,
   nil,   nil,   nil,   nil,   259,   450,   nil,   nil,   nil,   521,
   516,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   259,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   255,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   433,   nil,   nil,   nil,   nil,   nil,   259,   nil,   nil,
   nil,   nil,   nil,   150,   nil,   nil,   nil,   nil,   nil,   330,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   501,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   269,   nil,   511,   nil,   513,   517 ]

racc_goto_check = [
     2,    67,    10,    10,    10,    13,     6,     6,    42,    43,
    44,    22,    59,    59,    14,    46,    60,    50,    90,    90,
   103,    86,    96,    52,    84,    41,     8,    76,    93,    11,
    57,     9,     9,    15,     3,     6,     5,    55,    10,    10,
    10,    59,    63,    63,    12,    67,    67,    16,    67,    54,
    21,    67,    15,    87,    87,    40,     6,     6,     6,    51,
    53,    56,     6,    58,    69,    69,    10,    69,    61,    15,
    52,    64,     6,     6,     6,     6,    15,    71,    70,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    55,    69,    15,    10,    10,    46,    72,    10,    44,    86,
    54,     9,     9,     9,     9,    73,     5,    75,    78,    67,
    70,    79,    80,    67,    82,    76,     8,    57,    89,    92,
     1,    44,    44,    97,    98,     6,   100,    69,   101,   102,
   nil,   nil,   nil,   nil,   nil,    67,    84,   nil,    52,    52,
   nil,   nil,   nil,    15,   nil,    44,   nil,   nil,     2,   nil,
   nil,    60,    67,   nil,    67,    59,   nil,    41,   nil,   nil,
   nil,   nil,    42,    43,    44,   nil,   nil,   nil,    22,   nil,
   nil,    15,    50,     6,   nil,    68,   nil,   nil,    84,   nil,
   nil,   nil,   nil,   nil,     2,    10,   nil,     2,    11,   nil,
    10,    10,    10,    59,   nil,   nil,    59,   nil,   nil,   nil,
    67,    67,    67,   nil,   nil,    67,    68,    68,   nil,    68,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    68,    44,    44,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    15,    10,   nil,    44,   103,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    42,    43,   nil,
   nil,   nil,   nil,   nil,     6,    90,    10,    14,    15,    90,
    15,   nil,    96,    11,   nil,   nil,    86,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    59,    59,   nil,    59,   nil,
     2,     2,   nil,     6,   nil,    11,     6,     6,   nil,   nil,
    22,   nil,     6,    11,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,    10,    10,
    15,   nil,    59,    10,    60,   nil,   nil,    15,    11,   nil,
   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,    44,    22,
   nil,   nil,   nil,   nil,    10,    42,    43,   nil,   nil,   nil,
   nil,   nil,    67,    15,   nil,   nil,   nil,   nil,    59,   nil,
   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,    10,     2,   nil,   nil,   nil,    13,
    59,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   130,     0,    34,   nil,    32,   -14,   nil,   -23,    21,
   -15,   -65,  -379,  -117,  -254,  -107,  -322,   nil,   nil,   nil,
   nil,   -63,  -103,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -116,  -146,   -53,   -52,   -40,   nil,   -36,   nil,   nil,   nil,
  -130,  -225,  -125,  -398,  -346,  -360,  -241,  -272,  -433,  -106,
   -97,  -190,   nil,   -76,  -269,   nil,   nil,   -11,    62,  -337,
    62,    18,  -165,  -258,   nil,  -192,  -283,   nil,  -193,  -267,
  -174,   nil,  -171,   nil,   -26,   nil,  -173,   -17,   nil,  -192,
   -52,   nil,   -64,  -165,   nil,   nil,   -54,   -57,   -56,   nil,
   -54,    60,    60,  -176 ]

racc_goto_default = [
   nil,   nil,   467,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   270,    13,    14,    15,
    16,   nil,   398,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    49,   nil,    51,    52,   147,
   nil,   nil,   nil,   151,   nil,   nil,   nil,   nil,   nil,   272,
   nil,   nil,   117,   nil,   218,   220,   219,    58,   nil,   nil,
   nil,   123,   nil,   nil,   159,   nil,   160,   161,   165,   289,
   290,   291,   292,   293,   296,    66,   nil,   nil,   185,   187,
   188,   179,    73,    74,    75,    76,   nil,   nil,   nil,   190,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 98, :_reduce_1,
  1, 98, :_reduce_2,
  0, 98, :_reduce_3,
  1, 99, :_reduce_4,
  1, 101, :_reduce_5,
  3, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  3, 102, :_reduce_9,
  1, 103, :_reduce_none,
  3, 103, :_reduce_11,
  3, 103, :_reduce_12,
  3, 103, :_reduce_13,
  1, 105, :_reduce_14,
  3, 105, :_reduce_15,
  1, 104, :_reduce_none,
  3, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  1, 106, :_reduce_none,
  2, 106, :_reduce_22,
  2, 106, :_reduce_23,
  7, 106, :_reduce_24,
  5, 106, :_reduce_25,
  5, 106, :_reduce_26,
  4, 113, :_reduce_27,
  1, 110, :_reduce_28,
  3, 110, :_reduce_29,
  1, 109, :_reduce_30,
  2, 109, :_reduce_31,
  4, 109, :_reduce_32,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  3, 107, :_reduce_37,
  3, 107, :_reduce_38,
  3, 107, :_reduce_39,
  3, 107, :_reduce_40,
  3, 107, :_reduce_41,
  3, 107, :_reduce_42,
  3, 107, :_reduce_43,
  3, 107, :_reduce_44,
  3, 107, :_reduce_45,
  3, 107, :_reduce_46,
  2, 107, :_reduce_47,
  2, 107, :_reduce_48,
  3, 107, :_reduce_49,
  3, 107, :_reduce_50,
  3, 107, :_reduce_51,
  3, 107, :_reduce_52,
  3, 107, :_reduce_53,
  3, 107, :_reduce_54,
  2, 107, :_reduce_55,
  3, 107, :_reduce_56,
  3, 107, :_reduce_57,
  3, 107, :_reduce_58,
  3, 107, :_reduce_59,
  3, 107, :_reduce_60,
  5, 117, :_reduce_61,
  1, 119, :_reduce_62,
  3, 119, :_reduce_63,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_86,
  1, 114, :_reduce_87,
  1, 114, :_reduce_88,
  1, 114, :_reduce_89,
  1, 114, :_reduce_90,
  4, 116, :_reduce_91,
  2, 116, :_reduce_92,
  5, 116, :_reduce_93,
  3, 116, :_reduce_94,
  2, 142, :_reduce_95,
  2, 142, :_reduce_96,
  1, 121, :_reduce_97,
  2, 121, :_reduce_98,
  4, 144, :_reduce_99,
  3, 144, :_reduce_100,
  1, 144, :_reduce_101,
  3, 145, :_reduce_102,
  3, 145, :_reduce_103,
  3, 143, :_reduce_104,
  3, 148, :_reduce_105,
  2, 148, :_reduce_106,
  2, 146, :_reduce_107,
  4, 146, :_reduce_108,
  2, 124, :_reduce_109,
  5, 150, :_reduce_110,
  4, 150, :_reduce_111,
  0, 151, :_reduce_none,
  2, 151, :_reduce_113,
  4, 151, :_reduce_114,
  3, 151, :_reduce_115,
  6, 125, :_reduce_116,
  5, 125, :_reduce_117,
  0, 152, :_reduce_none,
  4, 152, :_reduce_119,
  3, 152, :_reduce_120,
  5, 123, :_reduce_121,
  1, 153, :_reduce_122,
  2, 153, :_reduce_123,
  5, 154, :_reduce_124,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 118, :_reduce_none,
  4, 118, :_reduce_128,
  1, 158, :_reduce_129,
  3, 158, :_reduce_130,
  3, 157, :_reduce_131,
  6, 122, :_reduce_132,
  2, 122, :_reduce_133,
  3, 159, :_reduce_134,
  3, 159, :_reduce_135,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  0, 108, :_reduce_138,
  1, 108, :_reduce_139,
  3, 108, :_reduce_140,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 161, :_reduce_143,
  3, 161, :_reduce_144,
  3, 161, :_reduce_145,
  6, 126, :_reduce_146,
  6, 127, :_reduce_147,
  7, 115, :_reduce_148,
  7, 115, :_reduce_149,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  6, 129, :_reduce_152,
  7, 128, :_reduce_153,
  1, 168, :_reduce_154,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 169, :_reduce_none,
  2, 169, :_reduce_158,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  4, 131, :_reduce_161,
  3, 131, :_reduce_162,
  7, 130, :_reduce_163,
  6, 130, :_reduce_164,
  1, 171, :_reduce_165,
  3, 171, :_reduce_166,
  1, 173, :_reduce_none,
  1, 173, :_reduce_none,
  1, 173, :_reduce_169,
  1, 173, :_reduce_none,
  1, 174, :_reduce_171,
  3, 174, :_reduce_172,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 172, :_reduce_none,
  2, 172, :_reduce_176,
  7, 133, :_reduce_177,
  2, 147, :_reduce_178,
  5, 147, :_reduce_179,
  1, 147, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_184,
  1, 164, :_reduce_185,
  1, 165, :_reduce_186,
  2, 165, :_reduce_187,
  2, 165, :_reduce_188,
  4, 165, :_reduce_189,
  4, 165, :_reduce_190,
  1, 149, :_reduce_191,
  3, 149, :_reduce_192,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  3, 179, :_reduce_197,
  1, 179, :_reduce_198,
  2, 180, :_reduce_199,
  2, 178, :_reduce_200,
  1, 181, :_reduce_201,
  4, 181, :_reduce_202,
  4, 134, :_reduce_203,
  6, 134, :_reduce_204,
  3, 134, :_reduce_205,
  3, 134, :_reduce_206,
  3, 134, :_reduce_207,
  2, 182, :_reduce_208,
  5, 135, :_reduce_209,
  7, 135, :_reduce_210,
  1, 120, :_reduce_211,
  1, 136, :_reduce_212,
  1, 136, :_reduce_213,
  4, 137, :_reduce_214,
  2, 137, :_reduce_215,
  4, 137, :_reduce_216,
  2, 137, :_reduce_217,
  3, 138, :_reduce_218,
  4, 138, :_reduce_219,
  2, 138, :_reduce_220,
  1, 185, :_reduce_221,
  3, 185, :_reduce_222,
  3, 186, :_reduce_223,
  1, 187, :_reduce_none,
  1, 187, :_reduce_225,
  1, 184, :_reduce_226,
  3, 184, :_reduce_227,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 189, :_reduce_237,
  1, 189, :_reduce_238,
  2, 190, :_reduce_239,
  1, 192, :_reduce_240,
  1, 194, :_reduce_241,
  1, 195, :_reduce_242,
  2, 193, :_reduce_243,
  1, 196, :_reduce_244,
  1, 197, :_reduce_245,
  2, 197, :_reduce_246,
  2, 191, :_reduce_247,
  2, 198, :_reduce_248,
  2, 198, :_reduce_249,
  3, 100, :_reduce_250,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 199, :_reduce_253,
  2, 199, :_reduce_254,
  4, 199, :_reduce_255,
  1, 132, :_reduce_256,
  3, 132, :_reduce_257,
  5, 132, :_reduce_258,
  1, 200, :_reduce_none,
  1, 200, :_reduce_none,
  1, 141, :_reduce_261,
  1, 139, :_reduce_262,
  0, 112, :_reduce_none,
  1, 112, :_reduce_264,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  0, 156, :_reduce_289 ]

racc_reduce_n = 290

racc_shift_n = 526

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :LOW => 92,
  :HIGH => 93,
  :LISTSTART => 94,
  :SPLAT => 95,
  :MODULO => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_59(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_60(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_61(val, _values, result)
     result = val[0].access(val[2])         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_86(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_87(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_89(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_90(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_94(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_96(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 298)
  def _reduce_97(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_98(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_101(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_103(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 320)
  def _reduce_104(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_105(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_106(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_108(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_109(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 350)
  def _reduce_111(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'egrammar.ra', 358)
  def _reduce_113(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 362)
  def _reduce_114(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_115(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_117(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_119(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_120(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 396)
  def _reduce_121(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 402)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 403)
  def _reduce_123(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_124(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_128(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_130(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_131(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_133(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_134(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_135(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_138(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_139(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_140(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_143(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 485)
  def _reduce_144(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 489)
  def _reduce_145(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_146(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 510)
  def _reduce_147(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 517)
  def _reduce_148(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_149(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 150 omitted

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_152(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 551)
  def _reduce_153(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 562)
  def _reduce_154(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_161(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_162(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_163(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_164(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_165(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_166(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_169(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_171(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_172(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 173 omitted

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_176(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_177(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_178(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_179(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_184(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_185(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_186(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_187(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_188(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_189(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_190(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_191(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_192(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_197(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 692)
  def _reduce_198(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_199(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_200(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_201(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_202(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_203(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_204(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_205(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 722)
  def _reduce_206(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 727)
  def _reduce_207(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 733)
  def _reduce_208(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 739)
  def _reduce_209(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_210(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 753)
  def _reduce_211(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 764)
  def _reduce_212(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 765)
  def _reduce_213(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 771)
  def _reduce_214(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 772)
  def _reduce_215(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 773)
  def _reduce_216(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 774)
  def _reduce_217(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_218(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_219(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_220(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_221(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_222(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_223(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_225(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_226(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 794)
  def _reduce_227(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

module_eval(<<'.,.,', 'egrammar.ra', 811)
  def _reduce_237(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 812)
  def _reduce_238(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 814)
  def _reduce_239(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 815)
  def _reduce_240(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 817)
  def _reduce_242(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 818)
  def _reduce_243(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 819)
  def _reduce_244(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 822)
  def _reduce_245(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 823)
  def _reduce_246(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 826)
  def _reduce_247(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 829)
  def _reduce_248(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 830)
  def _reduce_249(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 833)
  def _reduce_250(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 251 omitted

# reduce 252 omitted

module_eval(<<'.,.,', 'egrammar.ra', 840)
  def _reduce_253(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 841)
  def _reduce_254(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_255(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 845)
  def _reduce_256(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_257(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 847)
  def _reduce_258(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 259 omitted

# reduce 260 omitted

module_eval(<<'.,.,', 'egrammar.ra', 853)
  def _reduce_261(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 856)
  def _reduce_262(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 263 omitted

module_eval(<<'.,.,', 'egrammar.ra', 862)
  def _reduce_264(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 265 omitted

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

module_eval(<<'.,.,', 'egrammar.ra', 893)
  def _reduce_289(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
