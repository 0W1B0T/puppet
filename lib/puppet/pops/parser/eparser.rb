#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 791)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'68,70,76,-243,53,63,349,64,-252,88,303,-257,260,150,-254,79,-255,68',
'70,87,350,152,306,109,18,112,119,107,108,115,45,408,48,261,58,12,-132',
'51,39,42,132,47,40,10,11,-243,151,54,17,111,-252,41,304,-257,15,16,-254',
'124,-255,95,94,118,75,133,90,91,119,167,46,120,-134,89,38,71,260,73',
'74,72,-132,169,52,59,61,60,55,56,57,264,49,68,70,172,62,53,63,261,64',
'124,96,305,430,118,-168,-168,306,306,121,122,123,120,119,79,-134,18',
'-135,-168,-168,-136,404,45,403,48,280,58,12,281,51,39,42,77,47,40,10',
'11,238,440,54,17,439,239,41,124,87,15,16,118,121,122,123,-171,-171,75',
'404,120,403,87,-135,46,339,-136,249,38,71,260,73,74,250,260,252,52,59',
'61,60,55,56,57,264,49,68,70,264,62,53,63,261,64,249,88,261,249,121,122',
'123,-172,-172,274,-173,-173,253,141,142,109,18,112,119,107,108,275,45',
'249,48,277,58,12,277,51,39,42,282,47,40,10,11,-169,-169,54,17,111,79',
'41,-170,-170,15,16,87,124,87,95,94,118,75,87,90,91,119,87,46,120,301',
'89,38,71,277,73,74,-171,-171,132,52,59,61,60,55,56,57,331,49,68,70,332',
'62,53,63,334,64,124,96,260,338,118,-172,-172,-173,-173,121,122,123,120',
'119,344,264,18,284,283,295,296,345,45,261,48,260,58,12,348,51,39,42',
'358,47,40,10,11,293,359,54,17,360,363,41,124,366,15,16,118,121,122,123',
'368,369,75,344,120,282,375,377,46,385,386,301,38,71,302,73,74,388,391',
'344,52,59,61,60,55,56,57,396,49,68,70,397,62,53,63,401,64,405,88,407',
'416,121,122,123,419,301,423,132,426,301,429,433,109,18,112,407,107,108',
'435,45,436,48,437,58,126,438,51,39,42,443,47,40,444,445,446,454,54,17',
'111,456,41,457,458,15,16,334,92,93,95,94,,75,,90,91,119,,46,,,89,38',
'71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,124,96,,,118',
',,,,,,,120,119,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,',
',41,124,,15,16,118,121,122,123,,,75,,120,,,,46,,,,38,71,,73,74,,,,52',
'59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,88,,,121,122,123,,,,,,,,',
'109,18,112,,107,108,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,111,',
'41,,,15,16,,92,93,95,94,,75,,90,91,119,,46,,,89,38,71,,73,74,,,,52,59',
'61,60,55,56,57,,49,68,70,,62,53,63,,64,124,96,,,118,,,,,,,,120,119,',
',18,,,-242,,,45,,48,,58,12,119,51,39,42,,47,40,10,11,,,54,17,,,41,124',
',15,16,118,121,122,123,,,75,,120,,,124,46,-242,,118,38,71,394,73,74',
',,120,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,121,122,123,',
',,,,,,,,18,,,121,122,123,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,',
',41,,,15,16,80,81,82,,68,70,75,,152,,,,46,,,,38,71,,73,74,,,,52,59,61',
'60,55,56,57,,49,68,70,,62,53,63,,64,,,150,,,147,,,83,85,84,86,,,,,18',
'68,70,,,152,45,,48,75,58,126,,51,39,42,,47,40,151,71,,,54,17,,,41,,',
'15,16,,,,,,,75,,150,,,147,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57',
'75,49,68,70,,62,53,63,,64,151,71,,,,,,,,,,,,,,,18,68,70,,,152,45,,48',
',58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,150,,,147',
'46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,75,49,68,70,,62,53,63,156',
'64,151,71,,,,,,,,,,,,,,,18,68,70,,,152,45,,48,,58,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,,,75,,150,,,147,46,,,,38,71,,73,74,,',
',52,59,61,60,55,56,57,75,49,68,70,,62,53,63,158,64,151,71,,,,,,,,,,',
',,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,',
'62,53,63,,64,160,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,58,12',
',51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,89',
'38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,88,,,',
',,,,,,,,,,109,18,112,,107,108,,45,,48,,58,12,,51,39,42,,47,40,10,11',
',,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,89,38,71,,73,74,,,,52,59',
'61,60,55,56,57,,49,68,70,,62,53,63,,171,,88,,,,,,,,,,,,,,109,18,112',
',107,108,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,111,,41,,,15,16',
',,,,,,75,,90,91,,,46,,,89,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68',
'70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,58,12',
',51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,90,91,,,46',
',,89,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,88',
',,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,58,12,,51,39,42,,47,40,10',
'11,,,54,17,111,,41,,,15,16,,,,,,,75,,90,91,,,46,,,89,38,71,,73,74,,',
',52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18',
'112,,107,108,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,111,,41,',
',15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49',
'68,70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107,108,,45,,48,,58',
'12,,51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,',
',,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,88,',
',,,,,,,,,,,,109,18,112,,107,108,,45,,48,,58,12,,51,39,42,,47,40,10,11',
',,54,17,111,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61',
'60,55,56,57,,49,68,70,,62,53,63,,64,,88,,,,,,,,,,,,,,109,18,112,,107',
'108,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,111,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10',
'11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61',
'60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,',
',,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,',
',,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49',
'68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,188,206,197,207,58,199,209',
'200,39,187,,190,185,,,,,54,17,210,205,186,,,15,184,,,,,,,75,,,,,208',
'189,,,,38,71,,73,74,,,,201,202,204,203,193,194,195,,198,211,68,70,62',
',53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,',
',,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,',
',,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62',
'53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,235,38',
'71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,237,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,',
',15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49',
'68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42',
',47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52',
'59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45',
',48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46',
',,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,',
',,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,',
',15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49',
'68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,266,,,,,45,,48,,58,12,,51,39',
'42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74',
',,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,',
',,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,',
'75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53',
'63,,64,160,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10',
'11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61',
'60,55,56,57,,49,68,70,,62,53,63,,64,,,302,,,,,,,,,,,,,,18,,,,,,45,,48',
',58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,',
'38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,',
',,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15',
'16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70',
',62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40',
',,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61',
'60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,',
'58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,',
'62,53,63,,64,342,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52',
'59,61,60,55,56,57,,49,68,70,,62,53,63,,64,352,,,,,,,,,,,,,,,,18,,,,',
',45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75',
',,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63',
',64,354,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,',
',,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,',
'62,53,63,,64,370,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47',
'40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52',
'59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45',
',48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,',
',46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64',
',,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17',
',,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57',
',49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,',
',52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,',
',,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,',
',,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64',
',,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,',
'41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57',
',49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,',
',52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,',
',,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,',
',,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64',
',,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,',
'41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57',
',49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51,39',
'42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,',
',52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,',
',,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,',
',,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64',
',,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17',
',,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57',
',49,68,70,,62,53,63,,64,409,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,126,,51',
'39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74',
',,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,',
',,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,',
'75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53',
'63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38',
'71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,',
',,,,,,18,,,,,,45,,48,,58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16',
',,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,',
'62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40',
'10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59',
'61,60,55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48',
',58,126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,',
'38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,442,,,',
',,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41',
',,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49',
'68,70,,62,53,63,,64,448,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39',
'42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74',
',,,52,59,61,60,55,56,57,,49,68,70,,62,53,63,,64,450,,,,,,,,,,,,,,,,18',
',,,,,45,,48,,58,12,,51,39,42,,47,40,10,11,,,54,17,,,41,,,15,16,,,,,',
',75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60,55,56,57,,49,68,70,,62,53',
'63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58,12,,51,39,42,,47,40,10,11',
',,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71,,73,74,,,,52,59,61,60',
'55,56,57,,49,68,70,,62,53,63,,64,,,,,,,,,,,,,,,,,18,,,,,,45,,48,,58',
'126,,51,39,42,,47,40,,,,,54,17,,,41,,,15,16,,,,,,,75,,,,,,46,,,,38,71',
',73,74,88,,,52,59,61,60,55,56,57,,49,104,99,109,62,112,,107,108,,100',
'102,101,103,,,,,,,,,,,,,,,,111,,,,106,105,,,92,93,95,94,97,98,,90,91',
'88,,267,,,89,,,,,,,104,99,109,,112,,107,108,,100,102,101,103,,,,,,,',
'96,,,,,,,,111,,,,106,105,,,92,93,95,94,97,98,,90,91,88,,268,,,89,,,',
',,,104,99,109,,112,,107,108,,100,102,101,103,,,,,,,,96,,,,,,,,111,,',
',106,105,,,92,93,95,94,97,98,,90,91,88,,269,,,89,,,,,,,104,99,109,,112',
',107,108,,100,102,101,103,,,,,,,,96,,,,,,,,111,,,,106,105,,88,92,93',
'95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101,103,,,',
',,,,,,,,,,,,111,,96,,106,105,,,92,93,95,94,97,98,,90,91,,,,,,89,88,',
',,,,,,,,295,296,104,99,109,299,112,,107,108,,100,102,101,103,,96,,,',
',,,,,,,,,,111,,,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89',
'112,88,107,108,,100,102,101,103,,,,,,,109,,112,,107,108,,,,111,,96,',
'106,105,,,92,93,95,94,97,98,,90,91,111,,,,,89,,88,92,93,95,94,97,98',
',90,91,,,,,109,89,112,88,107,108,,,,,,96,,,,,99,109,,112,,107,108,,100',
',111,,96,,,,,,92,93,95,94,97,98,,90,91,111,,,,,89,,88,92,93,95,94,97',
'98,,90,91,,,,99,109,89,112,88,107,108,,100,,,,96,,,,,99,109,,112,,107',
'108,,100,,111,,96,,,,,,92,93,95,94,97,98,,90,91,111,,,,,89,,88,92,93',
'95,94,97,98,,90,91,,,,99,109,89,112,,107,108,,100,,,,96,,,,,,,,,,,,',
',,111,,96,,,88,,,92,93,95,94,97,98,,90,91,104,99,109,,112,89,107,108',
',100,102,101,103,,,,,,,,,,,,,,,,111,,,,96,88,,,92,93,95,94,97,98,,90',
'91,104,99,109,,112,89,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,',
',96,105,,,92,93,95,94,97,98,88,90,91,,,307,,,89,,,,104,99,109,,112,',
'107,108,,100,102,101,103,,,,,,,,,,,96,,,,,111,,,,106,105,,88,92,93,95',
'94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101,103,,,,,,',
',,,,,,,,,111,,96,,106,105,,,92,93,95,94,97,98,88,90,91,,,,,,89,,,,104',
'99,109,335,112,,107,108,,100,102,101,103,,,,,,,,,,,96,,,,,111,,,,106',
'105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102',
'101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,88,92,93,95,94,97,98,,90,91',
',,104,99,109,89,112,,107,108,,100,102,101,103,,,,,,,,,,,,,,,,111,,96',
',106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107,108,',
'100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,88,92,93,95,94,97,98',
',90,91,,,104,99,109,89,112,,107,108,,100,102,101,103,,,,,,,,,,,,,,,',
'111,,96,,106,105,,88,92,93,95,94,97,98,,90,91,,,104,99,109,89,112,,107',
'108,,100,102,101,103,,,,,,,,,,,,,,,,111,,96,,106,105,,88,92,93,95,94',
'97,98,,90,91,,,104,99,109,89,112,,107,108,,100,102,101,103,,,,,,,,,',
',,,,,,111,,96,,106,105,,,92,93,95,94,97,98,,90,91,,322,206,321,207,89',
'319,209,323,,313,,318,320,,,,,,,210,205,324,,,,317,,,,,,96,,,,,,208',
'325,,,,,,,,,,,,328,329,327,326,314,315,316,,330,211,322,206,321,207',
',319,209,323,,313,,318,320,,,,,,,210,205,324,,,,317,,,,,,,,,,,,208,325',
',,,,,,,,,,,328,329,327,326,314,315,316,,330,211,322,206,321,207,,319',
'209,323,,313,,318,320,,,,,,,210,205,324,,,,317,,,,,,,,,,,,208,325,,',
',,,,,,,,,328,329,327,326,314,315,316,,330,211,322,206,321,207,,319,209',
'323,,313,,318,320,,,,,,,210,205,324,,,,317,,,,,,,,,,,,208,325,,,,,,',
',,,,,328,329,327,326,314,315,316,,330,211,322,206,321,207,,319,209,323',
',313,,318,320,,,,,,,210,205,324,,,,317,,,,,,,,,,,,208,325,,,,,,,,,,',
',328,329,327,326,314,315,316,,330,211,322,206,321,207,,319,209,323,',
'313,,318,320,,,,,,,210,205,324,,,,317,,,,,,,,,,,,208,325,,,,,,,,,,,',
'328,329,327,326,314,315,316,,330,211' ]
        racc_action_table = arr = ::Array.new(9197, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,1,185,0,0,265,0,186,217,196,202,262,275,203,5,204,167,167,8,265',
'167,355,217,0,217,12,217,217,12,0,355,0,262,0,0,187,0,0,0,43,0,0,0,0',
'185,275,0,0,217,186,0,196,202,0,0,203,12,204,217,217,12,0,44,217,217',
'48,71,0,12,193,217,0,0,344,0,0,0,187,72,0,0,0,0,0,0,0,344,0,4,4,76,0',
'4,4,344,4,48,217,213,400,48,42,42,213,400,12,12,12,48,49,78,193,4,194',
'187,187,195,352,4,352,4,159,4,4,159,4,4,4,4,4,4,4,4,109,415,4,4,415',
'110,4,49,113,4,4,49,48,48,48,193,193,4,401,49,401,114,194,4,249,195',
'116,4,4,132,4,4,129,249,131,4,4,4,4,4,4,4,132,4,10,10,249,4,10,10,132',
'10,138,218,249,139,49,49,49,194,194,143,195,195,132,50,50,218,10,218',
'52,218,218,145,10,153,10,155,10,10,157,10,10,10,162,10,10,10,10,53,53',
'10,10,218,173,10,54,54,10,10,178,52,179,218,218,52,10,180,218,218,126',
'181,10,52,183,218,10,10,236,10,10,55,55,237,10,10,10,10,10,10,10,241',
'10,11,11,243,10,11,11,244,11,126,218,169,247,126,56,56,57,57,52,52,52',
'126,140,254,169,11,164,164,375,375,260,11,169,11,261,11,11,263,11,11',
'11,270,11,11,11,11,169,271,11,11,272,273,11,140,276,11,11,140,126,126',
'126,278,279,11,292,140,297,298,300,11,308,310,312,11,11,317,11,11,333',
'336,340,11,11,11,11,11,11,11,341,11,15,15,343,11,15,15,351,15,353,222',
'354,361,140,140,140,374,376,384,386,387,390,395,404,222,15,222,405,222',
'222,407,15,408,15,411,15,15,414,15,15,15,418,15,15,421,422,428,441,15',
'15,222,447,15,449,451,15,15,455,222,222,222,222,,15,,222,222,197,,15',
',,222,15,15,,15,15,,,,15,15,15,15,15,15,15,,15,16,16,,15,16,16,,16,197',
'222,,,197,,,,,,,,197,198,,,16,,,,,,16,,16,,16,16,,16,16,16,,16,16,,',
',,16,16,,,16,198,,16,16,198,197,197,197,,,16,,198,,,,16,,,,16,16,,16',
'16,,,,16,16,16,16,16,16,16,,16,17,17,,16,17,17,,17,,223,,,198,198,198',
',,,,,,,,223,17,223,,223,223,,17,,17,,17,17,,17,17,17,,17,17,,,,,17,17',
'223,,17,,,17,17,,223,223,223,223,,17,,223,223,201,,17,,,223,17,17,,17',
'17,,,,17,17,17,17,17,17,17,,17,18,18,,17,18,18,,18,201,223,,,201,,,',
',,,,201,199,,,18,,,199,,,18,,18,,18,18,338,18,18,18,,18,18,18,18,,,18',
'18,,,18,199,,18,18,199,201,201,201,,,18,,199,,,338,18,199,,338,18,18',
'338,18,18,,,338,18,18,18,18,18,18,18,,18,45,45,,18,45,45,,45,,,,,199',
'199,199,,,,,,,,,,45,,,338,338,338,45,,45,,45,45,,45,45,45,,45,45,,,',
',45,45,,,45,,,45,45,7,7,7,,51,51,45,,51,,,,45,,,,45,45,,45,45,,,,45',
'45,45,45,45,45,45,,45,46,46,,45,46,46,,46,,,51,,,51,,,7,7,7,7,,,,,46',
'200,200,,,200,46,,46,51,46,46,,46,46,46,,46,46,51,51,,,46,46,,,46,,',
'46,46,,,,,,,46,,200,,,200,46,,,,46,46,,46,46,,,,46,46,46,46,46,46,46',
'200,46,47,47,,46,47,47,,47,200,200,,,,,,,,,,,,,,,47,274,274,,,274,47',
',47,,47,47,,47,47,47,,47,47,,,,,47,47,,,47,,,47,47,,,,,,,47,,274,,,274',
'47,,,,47,47,,47,47,,,,47,47,47,47,47,47,47,274,47,62,62,,47,62,62,62',
'62,274,274,,,,,,,,,,,,,,,62,363,363,,,363,62,,62,,62,62,,62,62,62,,62',
'62,62,62,,,62,62,,,62,,,62,62,,,,,,,62,,363,,,363,62,,,,62,62,,62,62',
',,,62,62,62,62,62,62,62,363,62,63,63,,62,63,63,63,63,363,363,,,,,,,',
',,,,,,,63,,,,,,63,,63,,63,63,,63,63,63,,63,63,63,63,,,63,63,,,63,,,63',
'63,,,,,,,63,,,,,,63,,,,63,63,,63,63,,,,63,63,63,63,63,63,63,,63,64,64',
',63,64,64,,64,64,215,,,,,,,,,,,,,,215,64,215,,215,215,,64,,64,,64,64',
',64,64,64,,64,64,64,64,,,64,64,215,,64,,,64,64,,,,,,,64,,,,,,64,,,215',
'64,64,,64,64,,,,64,64,64,64,64,64,64,,64,69,69,,64,69,69,,69,,216,,',
',,,,,,,,,,,216,69,216,,216,216,,69,,69,,69,69,,69,69,69,,69,69,69,69',
',,69,69,216,,69,,,69,69,,,,,,,69,,,,,,69,,,216,69,69,,69,69,,,,69,69',
'69,69,69,69,69,,69,74,74,,69,74,74,,74,,219,,,,,,,,,,,,,,219,74,219',
',219,219,,74,,74,,74,74,,74,74,74,,74,74,,,,,74,74,219,,74,,,74,74,',
',,,,,74,,219,219,,,74,,,219,74,74,,74,74,,,,74,74,74,74,74,74,74,,74',
'77,77,,74,77,77,,77,,220,,,,,,,,,,,,,,220,77,220,,220,220,,77,,77,,77',
'77,,77,77,77,,77,77,77,77,,,77,77,220,,77,,,77,77,,,,,,,77,,220,220',
',,77,,,220,77,77,,77,77,,,,77,77,77,77,77,77,77,,77,79,79,,77,79,79',
',79,,221,,,,,,,,,,,,,,221,79,221,,221,221,,79,,79,,79,79,,79,79,79,',
'79,79,79,79,,,79,79,221,,79,,,79,79,,,,,,,79,,221,221,,,79,,,221,79',
'79,,79,79,,,,79,79,79,79,79,79,79,,79,80,80,,79,80,80,,80,,125,,,,,',
',,,,,,,,125,80,125,,125,125,,80,,80,,80,80,,80,80,80,,80,80,80,80,,',
'80,80,125,,80,,,80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80,,,,80,80,80,80',
'80,80,80,,80,81,81,,80,81,81,,81,,127,,,,,,,,,,,,,,127,81,127,,127,127',
',81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,127,,81,,,81,81,,,,,,',
'81,,,,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,81,81,,81,82,82,,81,82',
'82,,82,,128,,,,,,,,,,,,,,128,82,128,,128,128,,82,,82,,82,82,,82,82,82',
',82,82,82,82,,,82,82,128,,82,,,82,82,,,,,,,82,,,,,,82,,,,82,82,,82,82',
',,,82,82,82,82,82,82,82,,82,83,83,,82,83,83,,83,,214,,,,,,,,,,,,,,214',
'83,214,,214,214,,83,,83,,83,83,,83,83,83,,83,83,83,83,,,83,83,214,,83',
',,83,83,,,,,,,83,,,,,,83,,,,83,83,,83,83,,,,83,83,83,83,83,83,83,,83',
'84,84,,83,84,84,,84,,,,,,,,,,,,,,,,,84,,,,,,84,,84,,84,84,,84,84,84',
',84,84,84,84,,,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,',
',,84,84,84,84,84,84,84,,84,85,85,,84,85,85,,85,,,,,,,,,,,,,,,,,85,,',
',,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,,,85',
',,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85,,85,86,86,,85,86,86',
',86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86,86,,,86',
'86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,86',
'86,,86,87,87,,86,87,87,,87,,,,,,,,,,,,,,,,,87,,,,,,87,87,87,87,87,87',
'87,87,87,87,,87,87,,,,,87,87,87,87,87,,,87,87,,,,,,,87,,,,,87,87,,,',
'87,87,,87,87,,,,87,87,87,87,87,87,87,,87,87,88,88,87,,88,88,,88,,,,',
',,,,,,,,,,,,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,',
'88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,,88,89',
'89,,88,89,89,,89,,,,,,,,,,,,,,,,,89,,,,,,89,,89,,89,89,,89,89,89,,89',
'89,,,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89',
'89,89,89,89,89,,89,90,90,,89,90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,,90',
',90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90',
'90,,90,90,,,,90,90,90,90,90,90,90,,90,91,91,,90,91,91,,91,,,,,,,,,,',
',,,,,,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91',
',,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91,91,91,91,91,,91,92,92,',
'91,92,92,,92,,,,,,,,,,,,,,,,,92,,,,,,92,,92,,92,92,,92,92,92,,92,92',
',,,,92,92,,,92,,,92,92,,,,,,,92,,,,,,92,,,,92,92,,92,92,,,,92,92,92',
'92,92,92,92,,92,93,93,,92,93,93,,93,,,,,,,,,,,,,,,,,93,,,,,,93,,93,',
'93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93',
'93,,93,93,,,,93,93,93,93,93,93,93,,93,94,94,,93,94,94,,94,,,,,,,,,,',
',,,,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94',
',,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94,94,94,94,94,94,,94,95,95,',
'94,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
',,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95',
'95,95,95,95,,95,96,96,,95,96,96,,96,,,,,,,,,,,,,,,,,96,,,,,,96,,96,',
'96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96',
'96,,96,96,,,,96,96,96,96,96,96,96,,96,97,97,,96,97,97,,97,,,,,,,,,,',
',,,,,,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,97,97,,97,98,98,',
'97,98,98,,98,,,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98,98',
',,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98,98',
'98,98,98,98,,98,99,99,,98,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,',
'99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99',
'99,,99,99,,,,99,99,99,99,99,99,99,,99,100,100,,99,100,100,,100,,,,,',
',,,,,,,,,,,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100',
'100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100',
'100,100,100,100,100,,100,101,101,,100,101,101,,101,,,,,,,,,,,,,,,,,101',
',,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101',
'101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101,101',
'101,,101,102,102,,101,102,102,,102,,,,,,,,,,,,,,,,,102,,,,,,102,,102',
',102,102,,102,102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102',
',,,,,102,,,,102,102,,102,102,,,,102,102,102,102,102,102,102,,102,103',
'103,,102,103,103,,103,,,,,,,,,,,,,,,,,103,,,,,,103,,103,,103,103,,103',
'103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,,103',
'103,,103,103,,,,103,103,103,103,103,103,103,,103,104,104,,103,104,104',
',104,,,,,,,,,,,,,,,,,104,,,,,,104,,104,,104,104,,104,104,104,,104,104',
',,,,104,104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,',
',,104,104,104,104,104,104,104,,104,105,105,,104,105,105,,105,,,,,,,',
',,,,,,,,,105,,,,,,105,,105,,105,105,,105,105,105,,105,105,,,,,105,105',
',,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105,,105,105,,,,105,105,105',
'105,105,105,105,,105,106,106,,105,106,106,,106,,,,,,,,,,,,,,,,,106,',
',,,,106,,106,,106,106,,106,106,106,,106,106,,,,,106,106,,,106,,,106',
'106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106,106,106,106,106,106',
'106,,106,107,107,,106,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107',
',107,107,,107,107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107',
',,,,,107,,,107,107,107,,107,107,,,,107,107,107,107,107,107,107,,107',
'108,108,,107,108,108,,108,,,,,,,,,,,,,,,,,108,108,,,,,108,,108,,108',
'108,,108,108,108,,108,108,108,108,,,108,108,,,108,,,108,108,,,,,,,108',
',,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108,108,108,,108,111',
'111,,108,111,111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111,111,,111',
'111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111,,,,111',
'111,,111,111,,,,111,111,111,111,111,111,111,,111,112,112,,111,112,112',
',112,,,,,,,,,,,,,,,,,112,,,,,,112,,112,,112,112,,112,112,112,,112,112',
',,,,112,112,,,112,,,112,112,,,,,,,112,,,,,,112,,,,112,112,,112,112,',
',,112,112,112,112,112,112,112,,112,115,115,,112,115,115,,115,,,,,,,',
',,,,,,,,,115,,,,,,115,,115,,115,115,,115,115,115,,115,115,,,,,115,115',
',,115,,,115,115,,,,,,,115,,,,,,115,,,,115,115,,115,115,,,,115,115,115',
'115,115,115,115,,115,133,133,,115,133,133,,133,,,,,,,,,,,,,,,,,133,133',
',,,,133,,133,,133,133,,133,133,133,,133,133,133,133,,,133,133,,,133',
',,133,133,,,,,,,133,,,,,,133,,,,133,133,,133,133,,,,133,133,133,133',
'133,133,133,,133,168,168,,133,168,168,,168,,,,,,,,,,,,,,,,,168,,,,,',
'168,,168,,168,168,,168,168,168,,168,168,168,168,,,168,168,,,168,,,168',
'168,,,,,,,168,,,,,,168,,,,168,168,,168,168,,,,168,168,168,168,168,168',
'168,,168,171,171,,168,171,171,,171,171,,,,,,,,,,,,,,,,171,,,,,,171,',
'171,,171,171,,171,171,171,,171,171,171,171,,,171,171,,,171,,,171,171',
',,,,,,171,,,,,,171,,,,171,171,,171,171,,,,171,171,171,171,171,171,171',
',171,184,184,,171,184,184,,184,,,184,,,,,,,,,,,,,,184,,,,,,184,,184',
',184,184,,184,184,184,,184,184,,,,,184,184,,,184,,,184,184,,,,,,,184',
',,,,,184,,,,184,184,,184,184,,,,184,184,184,184,184,184,184,,184,188',
'188,,184,188,188,,188,,,,,,,,,,,,,,,,,188,,,,,,188,,188,,188,188,,188',
'188,188,,188,188,,,,,188,188,,,188,,,188,188,,,,,,,188,,,,,,188,,,,188',
'188,,188,188,,,,188,188,188,188,188,188,188,,188,189,189,,188,189,189',
',189,,,,,,,,,,,,,,,,,189,,,,,,189,,189,,189,189,,189,189,189,,189,189',
',,,,189,189,,,189,,,189,189,,,,,,,189,,,,,,189,,,,189,189,,189,189,',
',,189,189,189,189,189,189,189,,189,190,190,,189,190,190,,190,,,,,,,',
',,,,,,,,,190,,,,,,190,,190,,190,190,,190,190,190,,190,190,,,,,190,190',
',,190,,,190,190,,,,,,,190,,,,,,190,,,,190,190,,190,190,,,,190,190,190',
'190,190,190,190,,190,235,235,,190,235,235,,235,,,,,,,,,,,,,,,,,235,',
',,,,235,,235,,235,235,,235,235,235,,235,235,,,,,235,235,,,235,,,235',
'235,,,,,,,235,,,,,,235,,,,235,235,,235,235,,,,235,235,235,235,235,235',
'235,,235,252,252,,235,252,252,,252,252,,,,,,,,,,,,,,,,252,,,,,,252,',
'252,,252,252,,252,252,252,,252,252,252,252,,,252,252,,,252,,,252,252',
',,,,,,252,,,,,,252,,,,252,252,,252,252,,,,252,252,252,252,252,252,252',
',252,267,267,,252,267,267,,267,267,,,,,,,,,,,,,,,,267,,,,,,267,,267',
',267,267,,267,267,267,,267,267,267,267,,,267,267,,,267,,,267,267,,,',
',,,267,,,,,,267,,,,267,267,,267,267,,,,267,267,267,267,267,267,267,',
'267,268,268,,267,268,268,,268,268,,,,,,,,,,,,,,,,268,,,,,,268,,268,',
'268,268,,268,268,268,,268,268,268,268,,,268,268,,,268,,,268,268,,,,',
',,268,,,,,,268,,,,268,268,,268,268,,,,268,268,268,268,268,268,268,,268',
'269,269,,268,269,269,,269,,,,,,,,,,,,,,,,,269,,,,,,269,,269,,269,269',
',269,269,269,,269,269,,,,,269,269,,,269,,,269,269,,,,,,,269,,,,,,269',
',,,269,269,,269,269,,,,269,269,269,269,269,269,269,,269,277,277,,269',
'277,277,,277,,,,,,,,,,,,,,,,,277,,,,,,277,,277,,277,277,,277,277,277',
',277,277,277,277,,,277,277,,,277,,,277,277,,,,,,,277,,,,,,277,,,,277',
'277,,277,277,,,,277,277,277,277,277,277,277,,277,281,281,,277,281,281',
',281,281,,,,,,,,,,,,,,,,281,,,,,,281,,281,,281,281,,281,281,281,,281',
'281,281,281,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281,281',
',281,281,,,,281,281,281,281,281,281,281,,281,282,282,,281,282,282,,282',
',,,,,,,,,,,,,,,,282,,,,,,282,,282,,282,282,,282,282,282,,282,282,282',
'282,,,282,282,,,282,,,282,282,,,,,,,282,,,,,,282,,,,282,282,,282,282',
',,,282,282,282,282,282,282,282,,282,287,287,,282,287,287,,287,,,,,,',
',,,,,,,,,,287,,,,,,287,,287,,287,287,,287,287,287,,287,287,287,287,',
',287,287,,,287,,,287,287,,,,,,,287,,,,,,287,,,,287,287,,287,287,,,,287',
'287,287,287,287,287,287,,287,302,302,,287,302,302,,302,,,,,,,,,,,,,',
',,,302,,,,,,302,,302,,302,302,,302,302,302,,302,302,,,,,302,302,,,302',
',,302,302,,,,,,,302,,,,,,302,,,,302,302,,302,302,,,,302,302,302,302',
'302,302,302,,302,303,303,,302,303,303,,303,,,,,,,,,,,,,,,,,303,,,,,',
'303,,303,,303,303,,303,303,303,,303,303,,,,,303,303,,,303,,,303,303',
',,,,,,303,,,,,,303,,,,303,303,,303,303,,,,303,303,303,303,303,303,303',
',303,304,304,,303,304,304,,304,,,,,,,,,,,,,,,,,304,,,,,,304,,304,,304',
'304,,304,304,304,,304,304,,,,,304,304,,,304,,,304,304,,,,,,,304,,,,',
',304,,,,304,304,,304,304,,,,304,304,304,304,304,304,304,,304,306,306',
',304,306,306,,306,,,,,,,,,,,,,,,,,306,,,,,,306,,306,,306,306,,306,306',
'306,,306,306,,,,,306,306,,,306,,,306,306,,,,,,,306,,,,,,306,,,,306,306',
',306,306,,,,306,306,306,306,306,306,306,,306,307,307,,306,307,307,,307',
',,,,,,,,,,,,,,,,307,,,,,,307,,307,,307,307,,307,307,307,,307,307,,,',
',307,307,,,307,,,307,307,,,,,,,307,,,,,,307,,,,307,307,,307,307,,,,307',
'307,307,307,307,307,307,,307,334,334,,307,334,334,,334,,,,,,,,,,,,,',
',,,334,,,,,,334,,334,,334,334,,334,334,334,,334,334,,,,,334,334,,,334',
',,334,334,,,,,,,334,,,,,,334,,,,334,334,,334,334,,,,334,334,334,334',
'334,334,334,,334,345,345,,334,345,345,,345,,,,,,,,,,,,,,,,,345,,,,,',
'345,,345,,345,345,,345,345,345,,345,345,,,,,345,345,,,345,,,345,345',
',,,,,,345,,,,,,345,,,,345,345,,345,345,,,,345,345,345,345,345,345,345',
',345,348,348,,345,348,348,,348,,,,,,,,,,,,,,,,,348,,,,,,348,,348,,348',
'348,,348,348,348,,348,348,,,,,348,348,,,348,,,348,348,,,,,,,348,,,,',
',348,,,,348,348,,348,348,,,,348,348,348,348,348,348,348,,348,349,349',
',348,349,349,,349,,,,,,,,,,,,,,,,,349,,,,,,349,,349,,349,349,,349,349',
'349,,349,349,349,349,,,349,349,,,349,,,349,349,,,,,,,349,,,,,,349,,',
',349,349,,349,349,,,,349,349,349,349,349,349,349,,349,356,356,,349,356',
'356,,356,356,,,,,,,,,,,,,,,,356,,,,,,356,,356,,356,356,,356,356,356',
',356,356,,,,,356,356,,,356,,,356,356,,,,,,,356,,,,,,356,,,,356,356,',
'356,356,,,,356,356,356,356,356,356,356,,356,358,358,,356,358,358,,358',
',,,,,,,,,,,,,,,,358,,,,,,358,,358,,358,358,,358,358,358,,358,358,358',
'358,,,358,358,,,358,,,358,358,,,,,,,358,,,,,,358,,,,358,358,,358,358',
',,,358,358,358,358,358,358,358,,358,359,359,,358,359,359,,359,,,,,,',
',,,,,,,,,,359,,,,,,359,,359,,359,359,,359,359,359,,359,359,359,359,',
',359,359,,,359,,,359,359,,,,,,,359,,,,,,359,,,,359,359,,359,359,,,,359',
'359,359,359,359,359,359,,359,366,366,,359,366,366,,366,,,,,,,,,,,,,',
',,,366,,,,,,366,,366,,366,366,,366,366,366,,366,366,366,366,,,366,366',
',,366,,,366,366,,,,,,,366,,,,,,366,,,,366,366,,366,366,,,,366,366,366',
'366,366,366,366,,366,385,385,,366,385,385,,385,,,,,,,,,,,,,,,,,385,',
',,,,385,,385,,385,385,,385,385,385,,385,385,,,,,385,385,,,385,,,385',
'385,,,,,,,385,,,,,,385,,,,385,385,,385,385,,,,385,385,385,385,385,385',
'385,,385,391,391,,385,391,391,,391,,,,,,,,,,,,,,,,,391,,,,,,391,,391',
',391,391,,391,391,391,,391,391,391,391,,,391,391,,,391,,,391,391,,,',
',,,391,,,,,,391,,,,391,391,,391,391,,,,391,391,391,391,391,391,391,',
'391,403,403,,391,403,403,,403,,,,,,,,,,,,,,,,,403,,,,,,403,,403,,403',
'403,,403,403,403,,403,403,,,,,403,403,,,403,,,403,403,,,,,,,403,,,,',
',403,,,,403,403,,403,403,,,,403,403,403,403,403,403,403,,403,416,416',
',403,416,416,,416,416,,,,,,,,,,,,,,,,416,,,,,,416,,416,,416,416,,416',
'416,416,,416,416,416,416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416',
',,,416,416,,416,416,,,,416,416,416,416,416,416,416,,416,433,433,,416',
'433,433,,433,433,,,,,,,,,,,,,,,,433,,,,,,433,,433,,433,433,,433,433',
'433,,433,433,433,433,,,433,433,,,433,,,433,433,,,,,,,433,,,,,,433,,',
',433,433,,433,433,,,,433,433,433,433,433,433,433,,433,435,435,,433,435',
'435,,435,435,,,,,,,,,,,,,,,,435,,,,,,435,,435,,435,435,,435,435,435',
',435,435,435,435,,,435,435,,,435,,,435,435,,,,,,,435,,,,,,435,,,,435',
'435,,435,435,,,,435,435,435,435,435,435,435,,435,436,436,,435,436,436',
',436,,,,,,,,,,,,,,,,,436,,,,,,436,,436,,436,436,,436,436,436,,436,436',
'436,436,,,436,436,,,436,,,436,436,,,,,,,436,,,,,,436,,,,436,436,,436',
'436,,,,436,436,436,436,436,436,436,,436,445,445,,436,445,445,,445,,',
',,,,,,,,,,,,,,445,,,,,,445,,445,,445,445,,445,445,445,,445,445,,,,,445',
'445,,,445,,,445,445,,,,,,,445,,,,,,445,,,,445,445,,445,445,9,,,445,445',
'445,445,445,445,445,,445,9,9,9,445,9,,9,9,,9,9,9,9,,,,,,,,,,,,,,,,9',
',,,9,9,,,9,9,9,9,9,9,,9,9,134,,134,,,9,,,,,,,134,134,134,,134,,134,134',
',134,134,134,134,,,,,,,,9,,,,,,,,134,,,,134,134,,,134,134,134,134,134',
'134,,134,134,136,,136,,,134,,,,,,,136,136,136,,136,,136,136,,136,136',
'136,136,,,,,,,,134,,,,,,,,136,,,,136,136,,,136,136,136,136,136,136,',
'136,136,137,,137,,,136,,,,,,,137,137,137,,137,,137,137,,137,137,137',
'137,,,,,,,,136,,,,,,,,137,,,,137,137,,170,137,137,137,137,137,137,,137',
'137,,,170,170,170,137,170,,170,170,,170,170,170,170,,,,,,,,,,,,,,,,170',
',137,,170,170,,,170,170,170,170,170,170,,170,170,,,,,,170,182,,,,,,',
',,,170,170,182,182,182,182,182,,182,182,,182,182,182,182,,170,,,,,,',
',,,,,,,182,,,,182,182,,212,182,182,182,182,182,182,,182,182,,,212,212',
'212,182,212,224,212,212,,212,212,212,212,,,,,,,224,,224,,224,224,,,',
'212,,182,,212,212,,,212,212,212,212,212,212,,212,212,224,,,,,212,,225',
'224,224,224,224,224,224,,224,224,,,,,225,224,225,226,225,225,,,,,,212',
',,,,226,226,,226,,226,226,,226,,225,,224,,,,,,225,225,225,225,225,225',
',225,225,226,,,,,225,,227,226,226,226,226,226,226,,226,226,,,,227,227',
'226,227,228,227,227,,227,,,,225,,,,,228,228,,228,,228,228,,228,,227',
',226,,,,,,227,227,227,227,227,227,,227,227,228,,,,,227,,229,228,228',
'228,228,228,228,,228,228,,,,229,229,228,229,,229,229,,229,,,,227,,,',
',,,,,,,,,,,229,,228,,,230,,,229,229,229,229,229,229,,229,229,230,230',
'230,,230,229,230,230,,230,230,230,230,,,,,,,,,,,,,,,,230,,,,229,231',
',,230,230,230,230,230,230,,230,230,231,231,231,,231,230,231,231,,231',
'231,231,231,,,,,,,,,,,,,,,,231,,,,230,231,,,231,231,231,231,231,231',
'232,231,231,,,232,,,231,,,,232,232,232,,232,,232,232,,232,232,232,232',
',,,,,,,,,,231,,,,,232,,,,232,232,,240,232,232,232,232,232,232,,232,232',
',,240,240,240,232,240,,240,240,,240,240,240,240,,,,,,,,,,,,,,,,240,',
'232,,240,240,,,240,240,240,240,240,240,245,240,240,,,,,,240,,,,245,245',
'245,245,245,,245,245,,245,245,245,245,,,,,,,,,,,240,,,,,245,,,,245,245',
',379,245,245,245,245,245,245,,245,245,,,379,379,379,245,379,,379,379',
',379,379,379,379,,,,,,,,,,,,,,,,379,,245,,379,379,,380,379,379,379,379',
'379,379,,379,379,,,380,380,380,379,380,,380,380,,380,380,380,380,,,',
',,,,,,,,,,,,380,,379,,380,380,,381,380,380,380,380,380,380,,380,380',
',,381,381,381,380,381,,381,381,,381,381,381,381,,,,,,,,,,,,,,,,381,',
'380,,381,381,,382,381,381,381,381,381,381,,381,381,,,382,382,382,381',
'382,,382,382,,382,382,382,382,,,,,,,,,,,,,,,,382,,381,,382,382,,383',
'382,382,382,382,382,382,,382,382,,,383,383,383,382,383,,383,383,,383',
'383,383,383,,,,,,,,,,,,,,,,383,,382,,383,383,,399,383,383,383,383,383',
'383,,383,383,,,399,399,399,383,399,,399,399,,399,399,399,399,,,,,,,',
',,,,,,,,399,,383,,399,399,,,399,399,399,399,399,399,,399,399,,239,239',
'239,239,399,239,239,239,,239,,239,239,,,,,,,239,239,239,,,,239,,,,,',
'399,,,,,,239,239,,,,,,,,,,,,239,239,239,239,239,239,239,,239,239,299',
'299,299,299,,299,299,299,,299,,299,299,,,,,,,299,299,299,,,,299,,,,',
',,,,,,,299,299,,,,,,,,,,,,299,299,299,299,299,299,299,,299,299,301,301',
'301,301,,301,301,301,,301,,301,301,,,,,,,301,301,301,,,,301,,,,,,,,',
',,,301,301,,,,,,,,,,,,301,301,301,301,301,301,301,,301,301,335,335,335',
'335,,335,335,335,,335,,335,335,,,,,,,335,335,335,,,,335,,,,,,,,,,,,335',
'335,,,,,,,,,,,,335,335,335,335,335,335,335,,335,335,360,360,360,360',
',360,360,360,,360,,360,360,,,,,,,360,360,360,,,,360,,,,,,,,,,,,360,360',
',,,,,,,,,,,360,360,360,360,360,360,360,,360,360,439,439,439,439,,439',
'439,439,,439,,439,439,,,,,,,439,439,439,,,,439,,,,,,,,,,,,439,439,,',
',,,,,,,,,439,439,439,439,439,439,439,,439,439' ]
        racc_action_check = arr = ::Array.new(9197, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,     2,   nil,   nil,    87,     2,   nil,   752,    10,  7725,
   176,   265,    20,   nil,   nil,   354,   443,   532,   621,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   -31,    37,   710,   799,   888,    60,   104,
   108,   770,   198,   132,   139,   164,   189,   191,   nil,   nil,
   nil,   nil,   977,  1066,  1155,   nil,   nil,   nil,   nil,  1244,
   nil,    -9,     8,   nil,  1333,   nil,    91,  1422,    98,  1511,
  1600,  1689,  1778,  1867,  1956,  2045,  2134,  2223,  2313,  2402,
  2491,  2580,  2669,  2758,  2847,  2936,  3025,  3114,  3203,  3292,
  3381,  3470,  3559,  3648,  3737,  3826,  3915,  4004,  4093,    93,
   130,  4182,  4271,   133,   146,  4360,   134,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,  1604,   238,  1693,  1782,   139,
   nil,   159,   127,  4449,  7782,   nil,  7839,  7896,   160,   163,
   282,   nil,   nil,   182,   nil,   186,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   183,   nil,   198,   nil,   201,   nil,   112,
   nil,   nil,   206,   nil,   288,   nil,   nil,    15,  4538,   241,
  7943,  4627,   nil,   215,   nil,   nil,   nil,   nil,   225,   227,
   232,   236,  8006,   235,  4716,    -9,    -4,    24,  4805,  4894,
  4983,   nil,   nil,    58,   102,   105,    -2,   416,   460,   638,
   824,   594,    -1,     2,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  8053,    91,  1871,  1159,  1248,     2,   180,  1337,
  1426,  1515,   358,   536,  8070,  8117,  8134,  8181,  8198,  8245,
  8290,  8335,  8389,   nil,   nil,  5072,   239,   186,   nil,  8805,
  8436,   217,   nil,   245,   231,  8490,   nil,   240,   nil,   131,
   nil,   nil,  5161,   nil,   276,   nil,   nil,   nil,   nil,   nil,
   280,   264,   -24,   296,   nil,    -7,   nil,  5250,  5339,  5428,
   298,   304,   307,   279,   913,   -28,   311,  5517,   319,   320,
   nil,  5606,  5695,   nil,   nil,   nil,   nil,  5784,   nil,   nil,
   nil,   nil,   317,   nil,   nil,   nil,   nil,   320,   323,  8865,
   324,  8925,  5873,  5962,  6051,   nil,  6140,  6229,   323,   nil,
   310,   nil,   325,   nil,   nil,   nil,   nil,   329,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   334,  6318,  8985,   336,   nil,   653,   nil,
   333,   344,   nil,   287,    38,  6407,   nil,   nil,  6496,  6585,
   nil,   352,    85,   354,   333,     9,  6674,   nil,  6763,  6852,
  9045,   358,   nil,  1002,   nil,   nil,  6941,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   300,   214,   359,   nil,   nil,  8537,
  8584,  8631,  8678,  8725,   363,  7030,   303,   365,   nil,   nil,
   363,  7119,   nil,   nil,   nil,   350,   nil,   nil,   nil,  8772,
    92,   119,   nil,  7208,   369,   349,   nil,   376,   378,   nil,
   nil,   379,   nil,   nil,   382,   125,  7297,   nil,   386,   nil,
   nil,   389,   358,   nil,   nil,   nil,   nil,   nil,   391,   nil,
   nil,   nil,   nil,  7386,   nil,  7475,  7564,   nil,   nil,  9105,
   nil,   392,   nil,   nil,   nil,  7653,   nil,   396,   nil,   398,
   nil,   399,   nil,   nil,   nil,   370,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -261,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -261,  -261,  -174,   -33,   -34,  -261,  -261,  -261,  -261,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -89,   -93,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -211,  -234,  -194,  -195,  -196,  -190,  -191,
  -192,  -193,  -261,  -261,  -261,  -207,  -208,  -209,  -210,  -261,
  -213,  -261,  -226,  -229,  -261,  -235,  -261,  -261,    -7,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -129,  -261,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,  -261,
  -124,  -260,  -260,   -22,   -23,  -261,  -260,  -146,  -168,  -169,
  -170,  -171,  -172,  -173,  -174,   -46,  -174,   -47,   -54,  -261,
   -90,  -261,  -261,  -261,  -261,  -100,  -261,  -261,  -260,  -260,
  -261,  -143,  -144,  -236,  -155,  -157,  -158,  -159,  -160,  -161,
  -163,  -164,  -211,  -260,   -14,  -236,  -198,  -236,  -200,  -261,
  -203,  -204,  -261,  -212,  -261,  -217,  -220,  -261,  -224,  -261,
  -261,  -261,   460,    -6,    -9,   -11,   -12,   -13,   -17,   -18,
   -19,   -20,  -261,  -236,  -261,   -82,   -83,   -84,  -247,  -253,
  -241,  -130,  -133,  -194,  -195,  -196,  -261,  -244,  -258,  -174,
  -250,  -256,  -191,  -192,  -193,  -240,  -245,  -246,  -248,  -249,
  -251,  -259,   -59,  -261,   -36,   -37,   -38,   -39,   -40,   -41,
   -42,   -43,   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,
   -55,   -56,  -261,   -57,  -118,  -261,  -236,   -86,   -94,  -129,
  -128,  -261,  -127,  -261,  -238,  -261,   -28,  -260,  -175,  -261,
   -58,   -95,  -261,   -98,  -236,  -178,  -180,  -181,  -182,  -183,
  -185,  -261,  -261,  -188,  -234,  -261,   -92,  -261,  -261,  -261,
  -261,  -261,  -261,  -260,  -237,  -261,  -261,  -237,  -261,  -261,
  -201,  -261,  -261,  -214,  -215,  -216,  -218,  -261,  -221,  -222,
  -223,  -225,  -236,  -227,  -230,  -232,  -233,    -8,  -261,  -129,
  -261,  -237,  -261,  -261,  -261,   -35,  -261,  -261,  -236,  -120,
  -261,   -88,  -236,  -132,  -134,  -135,  -136,  -261,  -241,  -242,
  -243,  -244,  -247,  -250,  -252,  -253,  -254,  -255,  -256,  -257,
  -258,  -125,  -126,  -261,  -239,  -129,  -261,  -149,  -261,  -176,
  -236,  -261,   -97,  -261,  -237,  -261,  -186,  -187,  -261,  -261,
   -91,  -261,  -103,  -261,  -109,  -261,  -261,  -113,  -260,  -260,
  -129,  -261,  -165,  -261,  -156,  -162,  -260,   -15,  -197,  -199,
  -202,  -205,  -206,  -219,  -261,  -261,  -236,   -26,  -131,  -139,
  -137,  -138,   -60,  -122,  -261,  -237,   -85,  -261,   -25,   -29,
  -236,  -260,  -150,  -151,  -152,  -261,   -96,   -99,  -179,  -184,
  -261,  -103,  -102,  -261,  -261,  -109,  -108,  -261,  -261,  -112,
  -114,  -261,  -147,  -148,  -261,  -261,  -261,  -166,  -261,  -228,
  -231,  -261,   -30,  -119,  -121,   -87,  -123,   -27,  -261,  -177,
  -189,  -101,  -104,  -261,  -107,  -261,  -260,  -140,  -141,  -261,
  -142,  -261,  -154,  -167,   -24,   -31,  -145,  -261,  -106,  -261,
  -111,  -261,  -116,  -117,  -153,  -238,  -105,  -110,  -115,   -32 ]

racc_goto_table = [
     2,   125,   127,   128,   130,   244,   129,   148,   234,   146,
   163,   242,   242,   213,   183,   294,   273,   378,   117,   364,
   333,    78,   263,   357,   254,   247,   241,   243,   278,     1,
   279,   134,   136,   137,     3,   421,   389,   233,   113,   114,
   251,   432,   356,   451,   406,   308,   140,   270,   271,   336,
   154,   154,   162,   402,   138,   139,   300,   165,   153,   263,
   170,   292,   276,   392,   361,   365,   398,   174,   175,   176,
   177,   155,   157,   182,   212,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,   173,   434,   154,   240,   240,   347,
   346,   245,   431,   371,   288,   289,   286,   287,   417,   310,
   410,   178,   179,   180,   181,   411,   414,   236,   285,   166,
   168,   154,   290,   418,   nil,   nil,   nil,   343,   nil,   nil,
   nil,   nil,   117,   nil,   nil,   nil,   309,   nil,   nil,   263,
   nil,   340,   265,   nil,   nil,   nil,   272,   337,   428,   nil,
   nil,   nil,   nil,   nil,   nil,   378,   148,   nil,   146,   297,
   nil,   nil,   nil,   nil,   nil,   374,   312,   nil,   291,   nil,
   127,   298,   nil,   362,   134,   136,   137,   nil,   nil,   nil,
   nil,   384,   nil,   nil,   nil,   387,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   311,   nil,
   nil,   nil,   nil,   138,   139,   117,   nil,   153,   nil,   nil,
   nil,   nil,   nil,   395,   nil,   nil,   nil,   nil,   nil,   nil,
   420,   232,   nil,   nil,   nil,   nil,   376,   nil,   373,   nil,
   148,   459,   146,   nil,   263,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   422,
   nil,   nil,   341,   nil,   nil,   212,   nil,   nil,   413,   413,
   nil,   nil,   390,   427,   nil,   367,   413,   351,   353,   162,
   372,   nil,   nil,   400,   nil,   165,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   424,   415,   379,   380,
   381,   413,   382,   383,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   148,
   245,   146,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   399,   nil,   nil,   212,   455,   452,   367,   nil,   nil,
   nil,   nil,   212,   nil,   393,   nil,   nil,   425,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   441,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   245,   nil,   447,   nil,   449,   453 ]

racc_goto_check = [
     2,    10,    10,    10,    40,    13,     6,    37,    53,    38,
    84,    52,    52,    19,    11,    92,    15,    57,    60,    69,
    14,     5,    39,    50,    45,    61,    56,    56,    15,     1,
    15,    10,    10,    10,     3,    12,    16,    20,     9,     9,
    44,    46,    49,    51,    48,    54,    63,    61,    61,    65,
     6,     6,     6,    47,    60,    60,    15,     6,    60,    39,
    10,    45,    61,    66,    68,    71,    72,     6,     6,     6,
     6,     8,     8,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,     5,    48,     6,    10,    10,    73,
    75,    10,    47,    79,    80,    81,    85,    86,    69,    15,
    50,     9,     9,     9,     9,    62,    62,     8,    88,    89,
    90,     6,    91,    62,   nil,   nil,   nil,    15,   nil,   nil,
   nil,   nil,    60,   nil,   nil,   nil,    53,   nil,   nil,    39,
   nil,    45,     8,   nil,   nil,   nil,    60,    52,    62,   nil,
   nil,   nil,   nil,   nil,   nil,    57,    37,   nil,    38,     6,
   nil,   nil,   nil,   nil,   nil,    15,    11,   nil,     2,   nil,
    10,     2,   nil,    52,    10,    10,    10,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,   nil,
   nil,   nil,   nil,    60,    60,    60,   nil,    60,   nil,   nil,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
    92,    10,   nil,   nil,   nil,   nil,    11,   nil,    84,   nil,
    37,    14,    38,   nil,    39,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,
   nil,   nil,     2,   nil,   nil,    10,   nil,   nil,    52,    52,
   nil,   nil,    11,    15,   nil,     6,    52,     2,     2,     6,
     6,   nil,   nil,    19,   nil,     6,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    53,    11,    10,    10,
    10,    52,    10,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,
    10,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,    10,    13,    52,     6,   nil,   nil,
   nil,   nil,    10,   nil,    60,   nil,   nil,    40,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,    29,     0,    34,   nil,    17,   -12,   nil,     9,    28,
   -14,   -73,  -341,  -110,  -224,  -127,  -298,   nil,   nil,   -75,
   -70,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -44,   -42,  -110,
   -39,   nil,   nil,   nil,   -91,  -108,  -362,  -299,  -310,  -227,
  -246,  -393,  -100,   -99,  -190,   nil,   -85,  -284,   nil,   nil,
     6,   -91,  -243,    -4,   nil,  -198,  -275,   nil,  -209,  -255,
   nil,  -210,  -278,  -163,   nil,  -161,   nil,   nil,   nil,  -178,
   -63,   -62,   nil,   nil,   -59,   -58,   -57,   nil,   -46,    48,
    48,   -46,  -155 ]

racc_goto_default = [
   nil,   nil,   412,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   246,    13,    14,   355,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
   nil,    43,    44,   131,   nil,   nil,   135,   nil,   nil,   nil,
   nil,   nil,   248,   nil,   nil,   110,   nil,   191,   196,   192,
    50,   nil,   nil,   nil,   116,   nil,   nil,   143,   nil,   144,
   145,   149,   255,   256,   257,   258,   259,   262,   159,   161,
    65,    66,    67,    69,   nil,   nil,   nil,   164,   nil,   nil,
   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 98, :_reduce_1,
  1, 98, :_reduce_2,
  0, 98, :_reduce_3,
  1, 99, :_reduce_4,
  1, 101, :_reduce_5,
  3, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 102, :_reduce_8,
  3, 102, :_reduce_9,
  1, 103, :_reduce_none,
  3, 103, :_reduce_11,
  3, 103, :_reduce_12,
  3, 103, :_reduce_13,
  1, 105, :_reduce_14,
  3, 105, :_reduce_15,
  1, 104, :_reduce_none,
  3, 104, :_reduce_17,
  3, 104, :_reduce_18,
  3, 104, :_reduce_19,
  3, 104, :_reduce_20,
  1, 106, :_reduce_none,
  2, 106, :_reduce_22,
  2, 106, :_reduce_23,
  7, 106, :_reduce_24,
  5, 106, :_reduce_25,
  5, 106, :_reduce_26,
  4, 113, :_reduce_27,
  1, 110, :_reduce_28,
  3, 110, :_reduce_29,
  1, 109, :_reduce_30,
  2, 109, :_reduce_31,
  4, 109, :_reduce_32,
  1, 107, :_reduce_none,
  1, 107, :_reduce_none,
  4, 107, :_reduce_35,
  3, 107, :_reduce_36,
  3, 107, :_reduce_37,
  3, 107, :_reduce_38,
  3, 107, :_reduce_39,
  3, 107, :_reduce_40,
  3, 107, :_reduce_41,
  3, 107, :_reduce_42,
  3, 107, :_reduce_43,
  3, 107, :_reduce_44,
  3, 107, :_reduce_45,
  2, 107, :_reduce_46,
  2, 107, :_reduce_47,
  3, 107, :_reduce_48,
  3, 107, :_reduce_49,
  3, 107, :_reduce_50,
  3, 107, :_reduce_51,
  3, 107, :_reduce_52,
  3, 107, :_reduce_53,
  2, 107, :_reduce_54,
  3, 107, :_reduce_55,
  3, 107, :_reduce_56,
  3, 107, :_reduce_57,
  3, 107, :_reduce_58,
  1, 116, :_reduce_59,
  3, 116, :_reduce_60,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_80,
  1, 114, :_reduce_81,
  1, 114, :_reduce_82,
  1, 114, :_reduce_83,
  1, 114, :_reduce_84,
  5, 115, :_reduce_85,
  3, 115, :_reduce_86,
  6, 115, :_reduce_87,
  4, 115, :_reduce_88,
  1, 119, :_reduce_89,
  2, 119, :_reduce_90,
  4, 138, :_reduce_91,
  3, 138, :_reduce_92,
  1, 138, :_reduce_93,
  3, 139, :_reduce_94,
  2, 137, :_reduce_95,
  3, 141, :_reduce_96,
  2, 141, :_reduce_97,
  2, 140, :_reduce_98,
  4, 140, :_reduce_99,
  2, 122, :_reduce_100,
  5, 143, :_reduce_101,
  4, 143, :_reduce_102,
  0, 144, :_reduce_none,
  2, 144, :_reduce_104,
  4, 144, :_reduce_105,
  3, 144, :_reduce_106,
  6, 123, :_reduce_107,
  5, 123, :_reduce_108,
  0, 145, :_reduce_none,
  4, 145, :_reduce_110,
  3, 145, :_reduce_111,
  5, 121, :_reduce_112,
  1, 146, :_reduce_113,
  2, 146, :_reduce_114,
  5, 147, :_reduce_115,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 117, :_reduce_none,
  4, 117, :_reduce_119,
  1, 151, :_reduce_120,
  3, 151, :_reduce_121,
  3, 150, :_reduce_122,
  6, 120, :_reduce_123,
  2, 120, :_reduce_124,
  3, 152, :_reduce_125,
  3, 152, :_reduce_126,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  0, 108, :_reduce_129,
  1, 108, :_reduce_130,
  3, 108, :_reduce_131,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  3, 154, :_reduce_137,
  3, 154, :_reduce_138,
  3, 154, :_reduce_139,
  6, 124, :_reduce_140,
  6, 125, :_reduce_141,
  6, 126, :_reduce_142,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  7, 127, :_reduce_145,
  1, 161, :_reduce_146,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 162, :_reduce_none,
  2, 162, :_reduce_150,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  7, 128, :_reduce_153,
  6, 128, :_reduce_154,
  1, 164, :_reduce_155,
  3, 164, :_reduce_156,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_159,
  1, 166, :_reduce_none,
  1, 167, :_reduce_161,
  3, 167, :_reduce_162,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 165, :_reduce_none,
  2, 165, :_reduce_166,
  6, 130, :_reduce_167,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 157, :_reduce_174,
  1, 158, :_reduce_175,
  2, 158, :_reduce_176,
  4, 158, :_reduce_177,
  1, 142, :_reduce_178,
  3, 142, :_reduce_179,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  3, 172, :_reduce_184,
  1, 172, :_reduce_185,
  2, 173, :_reduce_186,
  2, 171, :_reduce_187,
  1, 174, :_reduce_188,
  4, 174, :_reduce_189,
  1, 118, :_reduce_190,
  1, 131, :_reduce_191,
  1, 131, :_reduce_192,
  1, 131, :_reduce_193,
  1, 131, :_reduce_194,
  1, 131, :_reduce_195,
  1, 131, :_reduce_196,
  4, 132, :_reduce_197,
  2, 132, :_reduce_198,
  4, 132, :_reduce_199,
  2, 132, :_reduce_200,
  3, 133, :_reduce_201,
  4, 133, :_reduce_202,
  2, 133, :_reduce_203,
  1, 175, :_reduce_204,
  3, 175, :_reduce_205,
  3, 176, :_reduce_206,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 177, :_reduce_210,
  1, 177, :_reduce_211,
  2, 178, :_reduce_212,
  1, 180, :_reduce_213,
  1, 182, :_reduce_214,
  1, 183, :_reduce_215,
  2, 181, :_reduce_216,
  1, 184, :_reduce_217,
  1, 185, :_reduce_218,
  2, 185, :_reduce_219,
  2, 179, :_reduce_220,
  2, 186, :_reduce_221,
  2, 186, :_reduce_222,
  3, 100, :_reduce_223,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  0, 187, :_reduce_226,
  2, 187, :_reduce_227,
  4, 187, :_reduce_228,
  1, 129, :_reduce_229,
  3, 129, :_reduce_230,
  5, 129, :_reduce_231,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 136, :_reduce_234,
  1, 134, :_reduce_235,
  0, 112, :_reduce_none,
  1, 112, :_reduce_237,
  0, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  0, 149, :_reduce_260 ]

racc_reduce_n = 261

racc_shift_n = 460

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :APPLICATION => 90,
  :PRODUCES => 91,
  :CONSUMES => 92,
  :HIGH => 93,
  :LISTSTART => 94,
  :SPLAT => 95,
  :MODULO => 96 }

racc_nt_base = 97

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "capability_mapping",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 118)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 129)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 140)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

module_eval(<<'.,.,', 'egrammar.ra', 255)
  def _reduce_80(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 256)
  def _reduce_81(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 257)
  def _reduce_82(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_83(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 259)
  def _reduce_84(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 272)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_87(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_88(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_89(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_90(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_93(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_94(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_95(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_96(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_98(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_99(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_100(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 333)
  def _reduce_101(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_102(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 103 omitted

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_104(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 349)
  def _reduce_105(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_106(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_107(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_108(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'egrammar.ra', 374)
  def _reduce_110(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 378)
  def _reduce_111(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 385)
  def _reduce_112(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_114(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 397)
  def _reduce_115(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_119(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_120(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_121(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_122(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_123(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_125(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_126(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_129(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_130(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_131(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_137(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_138(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 482)
  def _reduce_139(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_140(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_141(val, _values, result)
        result = add_definition(Factory.APPLICATION(classname(val[1][:value]), val[2], val[4]))
    loc result, val[0], val[5]
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 508)
  def _reduce_142(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        classname(val[0][:value]),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[5]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 143 omitted

# reduce 144 omitted

module_eval(<<'.,.,', 'egrammar.ra', 525)
  def _reduce_145(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 535)
  def _reduce_146(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_150(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 561)
  def _reduce_153(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_154(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_155(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_156(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_159(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 160 omitted

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_161(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_162(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_166(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_167(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_174(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 621)
  def _reduce_175(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_176(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_178(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_179(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_184(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_185(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_186(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_187(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_188(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 651)
  def _reduce_189(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_190(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_191(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 662)
  def _reduce_192(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_193(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_194(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_195(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_196(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_197(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_198(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_199(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_200(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_201(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_202(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_203(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_204(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_205(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_206(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

# reduce 209 omitted

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_210(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_211(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_212(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_213(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_214(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_215(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_216(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_217(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_218(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 707)
  def _reduce_219(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_220(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 713)
  def _reduce_221(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_222(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 717)
  def _reduce_223(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 224 omitted

# reduce 225 omitted

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_226(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_227(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_228(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_229(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_230(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_231(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 232 omitted

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_234(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 740)
  def _reduce_235(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 236 omitted

module_eval(<<'.,.,', 'egrammar.ra', 746)
  def _reduce_237(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

# reduce 248 omitted

# reduce 249 omitted

# reduce 250 omitted

# reduce 251 omitted

# reduce 252 omitted

# reduce 253 omitted

# reduce 254 omitted

# reduce 255 omitted

# reduce 256 omitted

# reduce 257 omitted

# reduce 258 omitted

# reduce 259 omitted

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_260(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
