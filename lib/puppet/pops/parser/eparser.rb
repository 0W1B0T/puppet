#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 933)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'66,78,292,403,63,72,304,73,458,304,131,131,84,457,127,127,87,123,404',
'307,178,-281,-290,523,21,20,270,305,457,351,305,53,293,56,154,68,12',
'-295,61,45,48,297,55,46,10,11,130,130,64,19,126,126,47,179,-293,17,18',
'157,128,128,72,-147,73,83,-281,-290,131,95,271,54,127,131,352,44,79',
'127,81,82,80,160,-295,62,50,69,70,57,161,154,60,59,65,66,78,71,154,63',
'72,-293,73,304,129,129,130,307,-147,131,126,130,170,127,157,126,307',
'183,128,21,20,157,329,128,305,330,53,425,56,73,68,12,-149,61,45,48,85',
'55,46,10,11,-188,-188,64,19,130,304,47,199,126,17,18,71,474,470,201',
'469,128,83,307,129,470,475,469,54,129,131,305,44,79,127,81,82,133,134',
'-149,62,50,69,70,57,341,204,60,59,65,66,78,71,87,63,72,272,73,180,78',
'131,131,181,129,127,127,130,131,-188,-188,126,127,-191,-191,21,20,133',
'134,128,-189,-189,53,384,56,95,68,12,95,61,45,48,304,55,46,10,11,130',
'130,64,19,126,126,47,130,307,17,18,126,128,128,-190,-190,305,83,285',
'128,-191,-191,286,54,129,-193,-193,44,79,-235,81,82,283,282,287,62,50',
'69,70,57,283,282,60,59,65,66,78,71,160,63,72,170,73,290,129,129,131',
'283,282,131,127,129,131,127,283,282,127,283,282,21,20,332,331,343,344',
'131,53,291,56,127,68,12,295,61,45,48,320,55,46,10,11,321,130,64,19,130',
'126,47,130,126,17,18,126,327,128,-236,327,128,83,87,128,130,95,95,54',
'126,95,95,44,79,349,81,82,128,170,357,62,50,69,70,57,376,377,60,59,65',
'66,78,71,379,63,72,383,73,388,390,129,131,115,129,131,127,129,394,127',
'396,307,-280,399,400,21,20,117,304,120,129,114,53,116,56,413,68,136',
'414,61,45,48,415,55,46,416,417,420,130,64,19,130,126,47,119,126,17,18',
'452,295,128,426,428,128,83,-280,399,-235,433,435,54,442,443,349,44,79',
'96,81,82,350,446,449,62,50,69,70,57,399,399,60,59,65,66,78,71,115,63',
'72,160,73,459,460,129,463,115,129,464,467,471,117,473,120,484,114,486',
'116,21,20,117,488,120,349,114,53,116,56,492,68,136,386,61,45,48,494',
'55,46,119,349,304,497,64,19,498,349,47,119,501,17,18,505,473,307,507',
'509,510,83,511,349,96,305,513,54,357,518,519,44,79,520,81,82,521,522',
'531,62,50,69,70,57,532,115,60,59,65,66,78,71,115,63,72,533,73,534,536',
'117,537,120,538,114,379,116,117,,120,,114,,116,21,20,,,,,,53,,56,,68',
'136,119,61,45,48,,55,46,119,,,,64,19,,,47,,,17,18,,,97,98,,,83,,,96',
',,54,,,,44,79,,81,82,,,,62,50,69,70,57,,115,60,59,65,66,78,71,,63,72',
',73,,,117,,120,,114,,116,,,,,,,,21,20,,,,,,53,,56,,68,12,119,61,45,48',
',55,46,10,11,115,,64,19,,,47,,,17,18,,,,117,,120,83,114,,116,,,54,,',
',44,79,,81,82,,,,62,50,69,70,57,,119,60,59,65,66,78,71,,63,72,,73,,',
',97,98,,,,,,96,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11',
'115,,64,19,,,47,,,17,18,,,,117,,120,83,114,,116,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,119,60,59,65,66,78,71,,63,72,,73,88,89,90,97,98,',
',,,,96,,,,,,21,20,145,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,91,93,92,94,,83,,,,,,54,,,,44,79,,81,82,,,,149,146',
'69,70,147,153,152,148,59,65,66,78,71,115,63,72,,73,,,,,,,,,,117,,120',
',114,,116,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,119,,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,185,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146',
'69,70,147,153,152,148,59,65,66,78,71,,63,72,190,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148,59,65',
'66,78,71,,63,72,,73,192,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61',
'45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81',
'82,,,,149,146,69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,203,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,',
',54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,',
',,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45',
'48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,221',
'237,228,238,68,230,240,232,45,219,,223,217,,,,,64,19,241,236,218,,,17',
'216,,,,,,,83,,,,,239,222,,,,44,79,,81,82,,,,233,220,234,235,229,243',
'242,231,59,226,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54',
',,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,',
',,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70',
'57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,265,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,',
',,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152',
'148,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,309,,',
',,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148,59,65,66,78',
'71,,63,72,,73,318,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,192,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146',
'69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,,,350,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,',
',,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70',
'57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,149,146,69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,,,,,,,,,,',
',,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,',
',17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152',
'148,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,406,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,408,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55',
'46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149',
'146,69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,429,,,,,,,,,,,,',
',,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54',
',,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61',
'45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81',
'82,,,,149,146,69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,462,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61',
'45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81',
'82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146',
'69,70,147,153,152,148,59,65,66,78,71,,63,72,,73,476,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69',
'70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,',
'56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,',
'54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,149,146,69,70,147,153,152,148,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,149,146,69,70,147,153,152,148',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136',
',61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81',
'82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,515,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55',
'46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62',
'50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,',
',,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,525,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69',
'70,57,,,60,59,65,66,78,71,,63,72,,73,527,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,',
',54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,115,,60,59,65,,,71,,,,,111,106,117,,120,,114',
',116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,,113,112,,,99,100,102,101',
'104,105,,97,98,115,,310,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109',
'108,110,,,,,,,103,,,,,,,,,119,,,,113,112,,,99,100,102,101,104,105,,97',
'98,115,,311,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,',
',,,,,103,,,,,,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,115',
',312,,,96,,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,103',
',,,,,,,,119,,180,78,113,112,181,115,99,100,102,101,104,105,,97,98,,',
'111,106,117,96,120,,114,,116,,107,109,108,110,,,,,180,78,,,181,178,',
',175,,,119,103,,,113,112,,,99,100,102,101,104,105,,97,98,83,,,,,96,115',
',,,179,79,178,,,175,343,344,111,106,117,347,120,115,114,,116,,107,109',
'108,110,103,,,83,,117,,120,,114,,116,,179,79,119,,,,113,112,,,99,100',
'102,101,104,105,,97,98,119,,,115,,96,,,,,102,101,,,,97,98,117,,120,115',
'114,96,116,,,,,,,,,103,,117,,120,,114,,116,,,,119,,,,,103,,,,,102,101',
',,,97,98,119,,,115,,96,,,99,100,102,101,,,,97,98,117,,120,115,114,96',
'116,,,,,,,,,103,,117,,120,,114,,116,,,,119,,,,,103,,,99,100,102,101',
',,,97,98,119,,,115,,96,,,99,100,102,101,104,105,,97,98,117,,120,115',
'114,96,116,,,,,,,,,103,106,117,,120,,114,,116,,107,,119,,,,,103,,,99',
'100,102,101,104,105,,97,98,119,,,,,96,,115,99,100,102,101,104,105,,97',
'98,,,,106,117,96,120,115,114,,116,,107,,,103,,,,,106,117,,120,,114,',
'116,,107,,119,103,,,,,,,99,100,102,101,104,105,,97,98,119,,,,,96,,115',
'99,100,102,101,104,105,,97,98,,,,106,117,96,120,,114,,116,,107,,,103',
',,,,,,,,,,,,,,,119,103,,,,115,,,99,100,102,101,104,105,,97,98,111,106',
'117,,120,96,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,,115',
',,99,100,102,101,104,105,,97,98,111,106,117,,120,96,114,,116,,107,109',
'108,110,,,,,,,,,,,,,,,,119,,,103,,112,,,99,100,102,101,104,105,115,97',
'98,,,353,,,96,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,',
',,103,,,,,,119,,,,113,112,,,99,100,102,101,104,105,,97,98,115,-66,,',
',96,-66,,,,,,111,106,117,,120,,114,,116,,107,109,108,110,,,,,,,103,',
',,,,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117',
'96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,103,,,113,112,',
',99,100,102,101,104,105,115,97,98,,,,,,96,,,,111,106,117,380,120,,114',
',116,,107,109,108,110,,,,,,,,,,103,,,,,,119,,,,113,112,,115,99,100,102',
'101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,',
',,,,,,,,,,,,,,119,103,,,113,112,,115,99,100,102,101,104,105,,97,98,',
',111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,103',
',,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114',
',116,,107,109,108,110,,,,,,,,,,,,,,,,119,103,,,113,112,,115,99,100,102',
'101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110,',
',,,,,,,,,,,,,,119,103,,,113,112,,115,99,100,102,101,104,105,,97,98,',
',111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,103',
',,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114',
',116,,107,109,108,110,,,,,,,,,,,,,,,,119,103,180,78,113,112,181,115',
'99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109',
'108,110,,,,,180,78,,,181,178,,,175,,,119,103,,,113,112,,,99,100,102',
'101,104,105,,97,98,83,,,,,96,,,,,179,79,178,,,175,,366,237,365,238,',
'363,240,367,,359,,362,364,,,103,,,83,241,236,368,,,,361,,,179,79,,,',
',,,,239,369,,,,,,,,,,,,372,370,373,371,374,243,242,375,,360,366,237',
'365,238,,363,240,367,,359,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,',
',,,239,369,,,,,,,,,,,,372,370,373,371,374,243,242,375,,360,366,237,365',
'238,,363,240,367,,359,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239',
'369,,,,,,,,,,,,372,370,373,371,374,243,242,375,,360,366,237,365,238',
',363,240,367,,359,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369',
',,,,,,,,,,,372,370,373,371,374,243,242,375,,360,366,237,365,238,,363',
'240,367,,359,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,',
',,,,,,,,,372,370,373,371,374,243,242,375,,360,366,237,365,238,,363,240',
'367,,359,,362,364,,,,,,,241,236,368,,,,361,,,,,,,,,,,,239,369,,,,,,',
',,,,,372,370,373,371,374,243,242,375,,360' ]
        racc_action_table = arr = ::Array.new(10500, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,157,308,0,0,160,0,392,306,12,56,1,392,12,56,5,12,308,160,321,217',
'218,502,0,0,117,160,502,227,306,0,157,0,50,0,0,234,0,0,0,160,0,0,0,0',
'12,56,0,0,12,56,0,321,235,0,0,50,12,56,183,219,183,0,217,218,57,8,117',
'0,57,59,227,0,0,59,0,0,0,51,234,0,0,0,0,0,52,146,0,0,0,4,4,0,220,4,4',
'235,4,399,12,56,57,183,219,62,57,59,60,62,146,59,399,67,57,4,4,220,191',
'59,399,191,4,323,4,323,4,4,226,4,4,4,4,4,4,4,4,219,219,4,4,62,201,4',
'79,62,4,4,183,410,406,80,406,62,4,201,57,467,410,467,4,59,132,201,4',
'4,132,4,4,16,16,226,4,4,4,4,4,201,84,4,4,4,10,10,4,86,10,10,118,10,199',
'199,136,147,199,62,136,147,132,149,48,48,132,149,226,226,10,10,58,58',
'132,63,63,10,282,10,121,10,10,122,10,10,10,282,10,10,10,10,136,147,10',
'10,136,147,10,149,282,10,10,149,136,147,64,64,282,10,139,149,65,65,140',
'10,132,66,66,10,10,141,10,10,124,124,144,10,10,10,10,10,166,166,10,10',
'10,11,11,10,145,11,11,148,11,150,136,147,168,167,167,228,168,149,229',
'228,169,169,229,182,182,11,11,196,196,433,433,233,11,155,11,233,11,11',
'159,11,11,11,171,11,11,11,11,173,168,11,11,228,168,11,229,228,11,11',
'229,184,168,187,189,228,11,205,229,233,210,211,11,233,212,213,11,11',
'215,11,11,233,231,267,11,11,11,11,11,274,276,11,11,11,17,17,11,277,17',
'17,280,17,284,288,168,230,245,228,383,230,229,293,383,294,295,230,298',
'304,17,17,245,305,245,233,245,17,245,17,313,17,17,314,17,17,17,315,17',
'17,316,317,319,230,17,17,383,230,17,245,383,17,17,383,322,230,326,328',
'383,17,230,340,345,346,348,17,354,356,358,17,17,245,17,17,361,378,381',
'17,17,17,17,17,385,387,17,17,17,18,18,17,246,18,18,390,18,393,394,230',
'397,135,383,398,405,407,246,408,246,418,246,423,246,18,18,135,432,135',
'434,135,18,135,18,441,18,18,283,18,18,18,445,18,18,246,448,283,453,18',
'18,454,455,18,135,461,18,18,470,471,283,473,475,478,18,481,482,246,283',
'483,18,487,490,491,18,18,496,18,18,499,500,512,18,18,18,18,18,514,137',
'18,18,18,19,19,18,249,19,19,516,19,517,524,137,526,137,528,137,535,137',
'249,,249,,249,,249,19,19,,,,,,19,,19,,19,19,137,19,19,19,,19,19,249',
',,,19,19,,,19,,,19,19,,,249,249,,,19,,,249,,,19,,,,19,19,,19,19,,,,19',
'19,19,19,19,,138,19,19,19,20,20,19,,20,20,,20,,,138,,138,,138,,138,',
',,,,,,20,20,,,,,,20,,20,,20,20,138,20,20,20,,20,20,20,20,250,,20,20',
',,20,,,20,20,,,,250,,250,20,250,,250,,,20,,,,20,20,,20,20,,,,20,20,20',
'20,20,,250,20,20,20,21,21,20,,21,21,,21,,,,250,250,,,,,,250,,,,,,21',
'21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21,21,251,,21,21,,,21,,,21,21',
',,,251,,251,21,251,,251,,,21,,,,21,21,,21,21,,,,21,21,21,21,21,,251',
'21,21,21,49,49,21,,49,49,,49,7,7,7,251,251,,,,,,251,,,,,,49,49,49,,',
',,49,,49,,49,49,,49,49,49,,49,49,49,49,,,49,49,,,49,,,49,49,,7,7,7,7',
',49,,,,,,49,,,,49,49,,49,49,,,,49,49,49,49,49,49,49,49,49,49,53,53,49',
'244,53,53,,53,,,,,,,,,,244,,244,,244,,244,53,53,,,,,,53,,53,,53,53,',
'53,53,53,,53,53,244,,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53',
',53,53,,,,53,53,53,53,53,,,53,53,53,54,54,53,,54,54,,54,,,,,,,,,,,,',
',,,,54,54,,,,,,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54,54',
',,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54,54,54,54,54,,,54,54,54,55,55',
'54,,55,55,,55,,,,,,,,,,,,,,,,,55,55,,,,,,55,,55,,55,55,,55,55,55,,55',
'55,,,,,55,55,,,55,,,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55,55',
'55,55,55,,,55,55,55,71,71,55,,71,71,71,71,,,,,,,,,,,,,,,,,71,71,,,,',
',71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,,,71',
',,,,,71,,,,71,71,,71,71,,,,71,71,71,71,71,71,71,71,71,71,72,72,71,,72',
'72,72,72,,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,72',
'72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72,,72,72,,,,72,72,72',
'72,72,72,72,72,72,72,73,73,72,,73,73,,73,73,,,,,,,,,,,,,,,,73,73,,,',
',,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,,,73',
',,,,,73,,,,73,73,,73,73,,,,73,73,73,73,73,73,73,73,73,73,77,77,73,,77',
'77,,77,,,,,,,,,,,,,,,,,77,77,,,,,,77,,77,,77,77,,77,77,77,,77,77,77',
'77,,,77,77,,,77,,,77,77,,,,,,,77,,,,,,77,,,,77,77,,77,77,,,,77,77,77',
'77,77,,,77,77,77,82,82,77,,82,82,,82,,,,,,,,,,,,,,,,,82,82,,,,,,82,',
'82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,,,82,,,,,,82,',
',,82,82,,82,82,,,,82,82,82,82,82,,,82,82,82,85,85,82,,85,85,,85,,,,',
',,,,,,,,,,,,85,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,,,85,85',
',,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,,,85',
'85,85,87,87,85,,87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87,87,',
'87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87',
',87,87,,,,87,87,87,87,87,,,87,87,87,88,88,87,,88,88,,88,,,,,,,,,,,,',
',,,,88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88,,,88,,,88',
'88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,,,88,88,88,89',
'89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,,89,89,89',
',89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,',
',,89,89,89,89,89,,,89,89,89,90,90,89,,90,90,,90,,,,,,,,,,,,,,,,,90,90',
',,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90,90,,,,,',
',90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,,,90,90,90,91,91,90,,91',
'91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91,,91,91,91,,91,91,91',
'91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,,,,91,91,91',
'91,91,,,91,91,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,92,,,,,,92,',
'92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92,92,,,,,,,92,,,,,',
'92,,,,92,92,,92,92,,,,92,92,92,92,92,,,92,92,92,93,93,92,,93,93,,93',
',,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,93,93,,,93',
'93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,',
',93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,94,,,,,,94,,94,,94',
'94,,94,94,94,,94,94,94,94,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94',
'94,,94,94,,,,94,94,94,94,94,,,94,94,94,95,95,94,,95,95,,95,,,,,,,,,',
',,,,,,,95,95,,,,,,95,95,95,95,95,95,95,95,95,95,,95,95,,,,,95,95,95',
'95,95,,,95,95,,,,,,,95,,,,,95,95,,,,95,95,,95,95,,,,95,95,95,95,95,95',
'95,95,95,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96',
'96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96',
',96,96,,,,96,96,96,96,96,,,96,96,96,97,97,96,,97,97,,97,,,,,,,,,,,,',
',,,,97,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,,,97,97,97,98,98',
'97,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,,98,98,98,,98',
'98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98',
'98,98,98,,,98,98,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,99,,,,,,99',
',99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99',
',,,99,99,,99,99,,,,99,99,99,99,99,,,99,99,99,100,100,99,,100,100,,100',
',,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100,100,,100,100',
',,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,',
',,100,100,100,100,100,,,100,100,100,101,101,100,,101,101,,101,,,,,,',
',,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101,101,,,,,101',
'101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101,,,,101,101',
'101,101,101,,,101,101,101,102,102,101,,102,102,,102,,,,,,,,,,,,,,,,',
'102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,,102,102,,,102',
',,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102,102,102,102',
'102,,,102,102,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103,103',
',,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,,,103',
'103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103,,',
'103,103,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,104,,,,,,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
',,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,,,104,104',
'104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,,105,,105',
',105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105',
',,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,,,105,105,105,106',
'106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106,106',
',106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,,,106',
',,,106,106,,106,106,,,,106,106,106,106,106,,,106,106,106,107,107,106',
',107,107,,107,,,,,,,,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107,107',
'107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107,107',
',107,107,,,,107,107,107,107,107,,,107,107,107,108,108,107,,108,108,',
'108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108',
'108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108',
',,,108,108,108,108,108,,,108,108,108,109,109,108,,109,109,,109,,,,,',
',,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109,,,,',
'109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109',
'109,109,109,109,,,109,109,109,110,110,109,,110,110,,110,,,,,,,,,,,,',
',,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,,110,110',
',,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110',
'110,110,,,110,110,110,111,111,110,,111,111,,111,,,,,,,,,,,,,,,,,111',
'111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,',
',111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111,111,111',
',,111,111,111,112,112,111,,112,112,,112,,,,,,,,,,,,,,,,,112,112,,,,',
',112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,,,112,112',
',,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112,,,112',
'112,112,113,113,112,,113,113,,113,,,,,,,,,,,,,,,,,113,113,,,,,,113,',
'113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,,',
',113,,,,,,113,,,,113,113,,113,113,,,,113,113,113,113,113,,,113,113,113',
'114,114,113,,114,114,,114,,,,,,,,,,,,,,,,,114,114,,,,,,114,,114,,114',
'114,,114,114,114,,114,114,,,,,114,114,,,114,,,114,114,,,,,,,114,,,,',
',114,,,114,114,114,,114,114,,,,114,114,114,114,114,,,114,114,114,115',
'115,114,,115,115,,115,,,,,,,,,,,,,,,,,115,115,,,,,,115,,115,,115,115',
',115,115,115,,115,115,115,115,,,115,115,,,115,,,115,115,,,,,,,115,,',
',,,115,,,,115,115,,115,115,,,,115,115,115,115,115,115,115,115,115,115',
'119,119,115,,119,119,,119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119',
'119,,119,119,119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,',
',119,,,,119,119,,119,119,,,,119,119,119,119,119,,,119,119,119,120,120',
'119,,120,120,,120,,,,,,,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120',
'120,120,,120,120,,,,,120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120',
'120,,120,120,,,,120,120,120,120,120,,,120,120,120,123,123,120,,123,123',
',123,,,,,,,,,,,,,,,,,123,123,,,,,,123,,123,,123,123,,123,123,123,,123',
'123,,,,,123,123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,,123,123',
',,,123,123,123,123,123,,,123,123,123,161,161,123,,161,161,,161,,,,,',
',,,,,,,,,,,161,161,161,,,,,161,,161,,161,161,,161,161,161,,161,161,161',
'161,,,161,161,,,161,,,161,161,,,,,,,161,,,,,,161,,,,161,161,,161,161',
',,,161,161,161,161,161,161,161,161,161,161,170,170,161,,170,170,,170',
'170,,,,,,,,,,,,,,,,170,170,,,,,,170,,170,,170,170,,170,170,170,,170',
'170,170,170,,,170,170,,,170,,,170,170,,,,,,,170,,,,,,170,,,,170,170',
',170,170,,,,170,170,170,170,170,,,170,170,170,200,200,170,,200,200,',
'200,,,,,,,,,,,,,,,,,200,200,,,,,,200,,200,,200,200,,200,200,200,,200',
'200,200,200,,,200,200,,,200,,,200,200,,,,,,,200,,,,,,200,,,,200,200',
',200,200,,,,200,200,200,200,200,,,200,200,200,203,203,200,,203,203,',
'203,203,,,,,,,,,,,,,,,,203,203,,,,,,203,,203,,203,203,,203,203,203,',
'203,203,203,203,,,203,203,,,203,,,203,203,,,,,,,203,,,,,,203,,,,203',
'203,,203,203,,,,203,203,203,203,203,203,203,203,203,203,216,216,203',
',216,216,,216,,,216,,,,,,,,,,,,,,216,216,,,,,,216,,216,,216,216,,216',
'216,216,,216,216,,,,,216,216,,,216,,,216,216,,,,,,,216,,,,,,216,,,,216',
'216,,216,216,,,,216,216,216,216,216,,,216,216,216,221,221,216,,221,221',
',221,,,,,,,,,,,,,,,,,221,221,,,,,,221,,221,,221,221,,221,221,221,,221',
'221,,,,,221,221,,,221,,,221,221,,,,,,,221,,,,,,221,,,,221,221,,221,221',
',,,221,221,221,221,221,,,221,221,221,222,222,221,,222,222,,222,,,,,',
',,,,,,,,,,,222,222,,,,,,222,,222,,222,222,,222,222,222,,222,222,,,,',
'222,222,,,222,,,222,222,,,,,,,222,,,,,,222,,,,222,222,,222,222,,,,222',
'222,222,222,222,,,222,222,222,223,223,222,,223,223,,223,,,,,,,,,,,,',
',,,,223,223,,,,,,223,,223,,223,223,,223,223,223,,223,223,,,,,223,223',
',,223,,,223,223,,,,,,,223,,,,,,223,,,,223,223,,223,223,,,,223,223,223',
'223,223,,,223,223,223,265,265,223,,265,265,,265,,,,,,,,,,,,,,,,,265',
'265,,,,,,265,,265,,265,265,,265,265,265,,265,265,,,,,265,265,,,265,',
',265,265,,,,,,,265,,,,,,265,,,,265,265,,265,265,,,,265,265,265,265,265',
',,265,265,265,287,287,265,,287,287,,287,,,,,,,,,,,,,,,,,287,287,,,,',
',287,,287,,287,287,,287,287,287,,287,287,287,287,,,287,287,,,287,,,287',
'287,,,,,,,287,,,,,,287,,,,287,287,,287,287,,,,287,287,287,287,287,287',
'287,287,287,287,290,290,287,,290,290,,290,,,,,,,,,,,,,,,,,290,290,,',
',,,290,,290,,290,290,,290,290,290,,290,290,290,290,,,290,290,,,290,',
',290,290,,,,,,,290,,,,,,290,,,,290,290,,290,290,,,,290,290,290,290,290',
'290,290,290,290,290,291,291,290,,291,291,,291,,,,,,,,,,,,,,,,,291,291',
',,,,,291,,291,,291,291,,291,291,291,,291,291,291,291,,,291,291,,,291',
',,291,291,,,,,,,291,,,,,,291,,,,291,291,,291,291,,,,291,291,291,291',
'291,291,291,291,291,291,292,292,291,,292,292,,292,,,,,,,,,,,,,,,,,292',
'292,,,,,,292,,292,,292,292,,292,292,292,,292,292,292,292,,,292,292,',
',292,,,292,292,,,,,,,292,,,,,,292,,,,292,292,,292,292,,,,292,292,292',
'292,292,,,292,292,292,310,310,292,,310,310,,310,310,,,,,,,,,,,,,,,,310',
'310,,,,,,310,,310,,310,310,,310,310,310,,310,310,310,310,,,310,310,',
',310,,,310,310,,,,,,,310,,,,,,310,,,,310,310,,310,310,,,,310,310,310',
'310,310,,,310,310,310,311,311,310,,311,311,,311,311,,,,,,,,,,,,,,,,311',
'311,,,,,,311,,311,,311,311,,311,311,311,,311,311,311,311,,,311,311,',
',311,,,311,311,,,,,,,311,,,,,,311,,,,311,311,,311,311,,,,311,311,311',
'311,311,,,311,311,311,312,312,311,,312,312,,312,,,,,,,,,,,,,,,,,312',
'312,,,,,,312,,312,,312,312,,312,312,312,,312,312,,,,,312,312,,,312,',
',312,312,,,,,,,312,,,,,,312,,,,312,312,,312,312,,,,312,312,312,312,312',
',,312,312,312,327,327,312,,327,327,,327,,,,,,,,,,,,,,,,,327,327,,,,',
',327,,327,,327,327,,327,327,327,,327,327,327,327,,,327,327,,,327,,,327',
'327,,,,,,,327,,,,,,327,,,,327,327,,327,327,,,,327,327,327,327,327,327',
'327,327,327,327,330,330,327,,330,330,,330,330,,,,,,,,,,,,,,,,330,330',
',,,,,330,,330,,330,330,,330,330,330,,330,330,330,330,,,330,330,,,330',
',,330,330,,,,,,,330,,,,,,330,,,,330,330,,330,330,,,,330,330,330,330',
'330,330,330,330,330,330,335,335,330,,335,335,,335,,,,,,,,,,,,,,,,,335',
'335,,,,,,335,,335,,335,335,,335,335,335,,335,335,335,335,,,335,335,',
',335,,,335,335,,,,,,,335,,,,,,335,,,,335,335,,335,335,,,,335,335,335',
'335,335,,,335,335,335,350,350,335,,350,350,,350,,,,,,,,,,,,,,,,,350',
'350,,,,,,350,,350,,350,350,,350,350,350,,350,350,,,,,350,350,,,350,',
',350,350,,,,,,,350,,,,,,350,,,,350,350,,350,350,,,,350,350,350,350,350',
',,350,350,350,351,351,350,,351,351,,351,,,,,,,,,,,,,,,,,351,351,,,,',
',351,,351,,351,351,,351,351,351,,351,351,,,,,351,351,,,351,,,351,351',
',,,,,,351,,,,,,351,,,,351,351,,351,351,,,,351,351,351,351,351,,,351',
'351,351,352,352,351,,352,352,,352,,,,,,,,,,,,,,,,,352,352,,,,,,352,',
'352,,352,352,,352,352,352,,352,352,,,,,352,352,,,352,,,352,352,,,,,',
',352,,,,,,352,,,,352,352,,352,352,,,,352,352,352,352,352,,,352,352,352',
'353,353,352,,353,353,,353,,,,,,,,,,,,,,,,,353,353,,,,,,353,,353,,353',
'353,,353,353,353,,353,353,,,,,353,353,,,353,,,353,353,,,,,,,353,,,,',
',353,,,,353,353,,353,353,,,,353,353,353,353,353,,,353,353,353,357,357',
'353,,357,357,,357,,,,,,,,,,,,,,,,,357,357,,,,,,357,,357,,357,357,,357',
'357,357,,357,357,357,357,,,357,357,,,357,,,357,357,,,,,,,357,,,,,,357',
',,,357,357,,357,357,,,,357,357,357,357,357,357,357,357,357,357,379,379',
'357,,379,379,,379,,,,,,,,,,,,,,,,,379,379,,,,,,379,,379,,379,379,,379',
'379,379,,379,379,,,,,379,379,,,379,,,379,379,,,,,,,379,,,,,,379,,,,379',
'379,,379,379,,,,379,379,379,379,379,,,379,379,379,396,396,379,,396,396',
',396,396,,,,,,,,,,,,,,,,396,396,,,,,,396,,396,,396,396,,396,396,396',
',396,396,396,396,,,396,396,,,396,,,396,396,,,,,,,396,,,,,,396,,,,396',
'396,,396,396,,,,396,396,396,396,396,,,396,396,396,400,400,396,,400,400',
',400,,,,,,,,,,,,,,,,,400,400,,,,,,400,,400,,400,400,,400,400,400,,400',
'400,,,,,400,400,,,400,,,400,400,,,,,,,400,,,,,,400,,,,400,400,,400,400',
',,,400,400,400,400,400,,,400,400,400,403,403,400,,403,403,,403,,,,,',
',,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403,403,403',
'403,,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403,,403,403',
',,,403,403,403,403,403,403,403,403,403,403,411,411,403,,411,411,,411',
'411,,,,,,,,,,,,,,,,411,411,,,,,,411,,411,,411,411,,411,411,411,,411',
'411,,,,,411,411,,,411,,,411,411,,,,,,,411,,,,,,411,,,,411,411,,411,411',
',,,411,411,411,411,411,,,411,411,411,413,413,411,,413,413,,413,,,,,',
',,,,,,,,,,,413,413,,,,,,413,,413,,413,413,,413,413,413,,413,413,413',
'413,,,413,413,,,413,,,413,413,,,,,,,413,,,,,,413,,,,413,413,,413,413',
',,,413,413,413,413,413,,,413,413,413,414,414,413,,414,414,,414,,,,,',
',,,,,,,,,,,414,414,,,,,,414,,414,,414,414,,414,414,414,,414,414,414',
'414,,,414,414,,,414,,,414,414,,,,,,,414,,,,,,414,,,,414,414,,414,414',
',,,414,414,414,414,414,,,414,414,414,416,416,414,,416,416,,416,,,,,',
',,,,,,,,,,,416,416,,,,,,416,,416,,416,416,,416,416,416,,416,416,416',
'416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416,,,,416,416,,416,416',
',,,416,416,416,416,416,,,416,416,416,425,425,416,,425,425,,425,,,,,',
',,,,,,,,,,,425,425,,,,,,425,,425,,425,425,,425,425,425,,425,425,425',
'425,,,425,425,,,425,,,425,425,,,,,,,425,,,,,,425,,,,425,425,,425,425',
',,,425,425,425,425,425,425,425,425,425,425,442,442,425,,442,442,,442',
',,,,,,,,,,,,,,,,442,442,,,,,,442,,442,,442,442,,442,442,442,,442,442',
',,,,442,442,,,442,,,442,442,,,,,,,442,,,,,,442,,,,442,442,,442,442,',
',,442,442,442,442,442,,,442,442,442,449,449,442,,449,449,,449,,,,,,',
',,,,,,,,,,449,449,,,,,,449,,449,,449,449,,449,449,449,,449,449,449,449',
',,449,449,,,449,,,449,449,,,,,,,449,,,,,,449,,,,449,449,,449,449,,,',
'449,449,449,449,449,,,449,449,449,457,457,449,,457,457,,457,,,,,,,,',
',,,,,,,,457,457,,,,,,457,,457,,457,457,,457,457,457,,457,457,457,457',
',,457,457,,,457,,,457,457,,,,,,,457,,,,,,457,,,,457,457,,457,457,,,',
'457,457,457,457,457,457,457,457,457,457,460,460,457,,460,460,,460,,',
',,,,,,,,,,,,,,460,460,,,,,,460,,460,,460,460,,460,460,460,,460,460,460',
'460,,,460,460,,,460,,,460,460,,,,,,,460,,,,,,460,,,,460,460,,460,460',
',,,460,460,460,460,460,,,460,460,460,463,463,460,,463,463,,463,,,,,',
',,,,,,,,,,,463,463,,,,,,463,,463,,463,463,,463,463,463,,463,463,463',
'463,,,463,463,,,463,,,463,463,,,,,,,463,,,,,,463,,,,463,463,,463,463',
',,,463,463,463,463,463,463,463,463,463,463,469,469,463,,469,469,,469',
',,,,,,,,,,,,,,,,469,469,,,,,,469,,469,,469,469,,469,469,469,,469,469',
',,,,469,469,,,469,,,469,469,,,,,,,469,,,,,,469,,,,469,469,,469,469,',
',,469,469,469,469,469,,,469,469,469,474,474,469,,474,474,,474,,,,,,',
',,,,,,,,,,474,474,,,,,,474,,474,,474,474,,474,474,474,,474,474,,,,,474',
'474,,,474,,,474,474,,,,,,,474,,,,,,474,,,,474,474,,474,474,,,,474,474',
'474,474,474,,,474,474,474,484,484,474,,484,484,,484,484,,,,,,,,,,,,',
',,,484,484,,,,,,484,,484,,484,484,,484,484,484,,484,484,484,484,,,484',
'484,,,484,,,484,484,,,,,,,484,,,,,,484,,,,484,484,,484,484,,,,484,484',
'484,484,484,,,484,484,484,486,486,484,,486,486,,486,,,,,,,,,,,,,,,,',
'486,486,,,,,,486,,486,,486,486,,486,486,486,,486,486,486,486,,,486,486',
',,486,,,486,486,,,,,,,486,,,,,,486,,,,486,486,,486,486,,,,486,486,486',
'486,486,,,486,486,486,505,505,486,,505,505,,505,505,,,,,,,,,,,,,,,,505',
'505,,,,,,505,,505,,505,505,,505,505,505,,505,505,505,505,,,505,505,',
',505,,,505,505,,,,,,,505,,,,,,505,,,,505,505,,505,505,,,,505,505,505',
'505,505,,,505,505,505,507,507,505,,507,507,,507,507,,,,,,,,,,,,,,,,507',
'507,,,,,,507,,507,,507,507,,507,507,507,,507,507,507,507,,,507,507,',
',507,,,507,507,,,,,,,507,,,,,,507,,,,507,507,,507,507,,,,507,507,507',
'507,507,,,507,507,507,509,509,507,,509,509,,509,,,,,,,,,,,,,,,,,509',
'509,,,,,,509,,509,,509,509,,509,509,509,,509,509,509,509,,,509,509,',
',509,,,509,509,,,,,,,509,,,,,,509,,,,509,509,,509,509,,,,509,509,509',
'509,509,,,509,509,509,519,519,509,,519,519,,519,,,,,,,,,,,,,,,,,519',
'519,,,,,,519,,519,,519,519,,519,519,519,,519,519,,,,,519,519,,,519,',
',519,519,,,,,,,519,,,,,,519,,,,519,519,,519,519,,,,519,519,519,519,519',
'9,,519,519,519,,,519,,,,,9,9,9,,9,,9,,9,,9,9,9,9,,,,,,,,,,,,,,,,9,,',
',9,9,,,9,9,9,9,9,9,,9,9,162,,162,,,9,,,,,,,162,162,162,,162,,162,,162',
',162,162,162,162,,,,,,,9,,,,,,,,,162,,,,162,162,,,162,162,162,162,162',
'162,,162,162,164,,164,,,162,,,,,,,164,164,164,,164,,164,,164,,164,164',
'164,164,,,,,,,162,,,,,,,,,164,,,,164,164,,,164,164,164,164,164,164,',
'164,164,165,,165,,,164,,,,,,,165,165,165,,165,,165,,165,,165,165,165',
'165,,,,,,,164,,,,,,,,,165,,61,61,165,165,61,202,165,165,165,165,165',
'165,,165,165,,,202,202,202,165,202,,202,,202,,202,202,202,202,,,,,232',
'232,,,232,61,,,61,,,202,165,,,202,202,,,202,202,202,202,202,202,,202',
'202,61,,,,,202,214,,,,61,61,232,,,232,202,202,214,214,214,214,214,247',
'214,,214,,214,214,214,214,202,,,232,,247,,247,,247,,247,,232,232,214',
',,,214,214,,,214,214,214,214,214,214,,214,214,247,,,248,,214,,,,,247',
'247,,,,247,247,248,,248,252,248,247,248,,,,,,,,,214,,252,,252,,252,',
'252,,,,248,,,,,247,,,,,248,248,,,,248,248,252,,,253,,248,,,252,252,252',
'252,,,,252,252,253,,253,254,253,252,253,,,,,,,,,248,,254,,254,,254,',
'254,,,,253,,,,,252,,,253,253,253,253,,,,253,253,254,,,255,,253,,,254',
'254,254,254,254,254,,254,254,255,,255,256,255,254,255,,,,,,,,,253,256',
'256,,256,,256,,256,,256,,255,,,,,254,,,255,255,255,255,255,255,,255',
'255,256,,,,,255,,257,256,256,256,256,256,256,,256,256,,,,257,257,256',
'257,258,257,,257,,257,,,255,,,,,258,258,,258,,258,,258,,258,,257,256',
',,,,,,257,257,257,257,257,257,,257,257,258,,,,,257,,259,258,258,258',
'258,258,258,,258,258,,,,259,259,258,259,,259,,259,,259,,,257,,,,,,,',
',,,,,,,,259,258,,,,260,,,259,259,259,259,259,259,,259,259,260,260,260',
',260,259,260,,260,,260,260,260,260,,,,,,,,,,,,,,,,260,,,259,,261,,,260',
'260,260,260,260,260,,260,260,261,261,261,,261,260,261,,261,,261,261',
'261,261,,,,,,,,,,,,,,,,261,,,260,,261,,,261,261,261,261,261,261,262',
'261,261,,,262,,,261,,,,262,262,262,,262,,262,,262,,262,262,262,262,',
',,,,,,,,261,,,,,,262,,,,262,262,,,262,262,262,262,262,262,,262,262,266',
'266,,,,262,266,,,,,,266,266,266,,266,,266,,266,,266,266,266,266,,,,',
',,262,,,,,,,,,266,,,,266,266,,273,266,266,266,266,266,266,,266,266,',
',273,273,273,266,273,,273,,273,,273,273,273,273,,,,,,,,,,,,,,,,273,266',
',,273,273,,,273,273,273,273,273,273,278,273,273,,,,,,273,,,,278,278',
'278,278,278,,278,,278,,278,278,278,278,,,,,,,,,,273,,,,,,278,,,,278',
'278,,409,278,278,278,278,278,278,,278,278,,,409,409,409,278,409,,409',
',409,,409,409,409,409,,,,,,,,,,,,,,,,409,278,,,409,409,,437,409,409',
'409,409,409,409,,409,409,,,437,437,437,409,437,,437,,437,,437,437,437',
'437,,,,,,,,,,,,,,,,437,409,,,437,437,,438,437,437,437,437,437,437,,437',
'437,,,438,438,438,437,438,,438,,438,,438,438,438,438,,,,,,,,,,,,,,,',
'438,437,,,438,438,,439,438,438,438,438,438,438,,438,438,,,439,439,439',
'438,439,,439,,439,,439,439,439,439,,,,,,,,,,,,,,,,439,438,,,439,439',
',440,439,439,439,439,439,439,,439,439,,,440,440,440,439,440,,440,,440',
',440,440,440,440,,,,,,,,,,,,,,,,440,439,,,440,440,,466,440,440,440,440',
'440,440,,440,440,,,466,466,466,440,466,,466,,466,,466,466,466,466,,',
',,,,,,,,,,,,,466,440,320,320,466,466,320,508,466,466,466,466,466,466',
',466,466,,,508,508,508,466,508,,508,,508,,508,508,508,508,,,,,420,420',
',,420,320,,,320,,,508,466,,,508,508,,,508,508,508,508,508,508,,508,508',
'320,,,,,508,,,,,320,320,420,,,420,,272,272,272,272,,272,272,272,,272',
',272,272,,,508,,,420,272,272,272,,,,272,,,420,420,,,,,,,,272,272,,,',
',,,,,,,,272,272,272,272,272,272,272,272,,272,347,347,347,347,,347,347',
'347,,347,,347,347,,,,,,,347,347,347,,,,347,,,,,,,,,,,,347,347,,,,,,',
',,,,,347,347,347,347,347,347,347,347,,347,349,349,349,349,,349,349,349',
',349,,349,349,,,,,,,349,349,349,,,,349,,,,,,,,,,,,349,349,,,,,,,,,,',
',349,349,349,349,349,349,349,349,,349,380,380,380,380,,380,380,380,',
'380,,380,380,,,,,,,380,380,380,,,,380,,,,,,,,,,,,380,380,,,,,,,,,,,',
'380,380,380,380,380,380,380,380,,380,388,388,388,388,,388,388,388,,388',
',388,388,,,,,,,388,388,388,,,,388,,,,,,,,,,,,388,388,,,,,,,,,,,,388',
'388,388,388,388,388,388,388,,388,415,415,415,415,,415,415,415,,415,',
'415,415,,,,,,,415,415,415,,,,415,,,,,,,,,,,,415,415,,,,,,,,,,,,415,415',
'415,415,415,415,415,415,,415' ]
        racc_action_check = arr = ::Array.new(10500, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    12,   nil,   nil,    89,     3,   nil,   811,    58,  8815,
   180,   271,     8,   nil,   nil,   nil,    81,   362,   453,   544,
   635,   726,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   112,   817,
     7,     7,    59,   908,   999,  1090,     9,    64,   120,    69,
    99,  9037,   103,   123,   154,   160,   165,    97,   nil,   nil,
   nil,  1181,  1272,  1363,   nil,   nil,   nil,  1454,   nil,    67,
    79,   nil,  1545,   nil,   178,  1636,   172,  1727,  1818,  1909,
  2000,  2091,  2182,  2273,  2364,  2455,  2546,  2637,  2728,  2819,
  2910,  3001,  3092,  3183,  3274,  3365,  3456,  3547,  3638,  3729,
  3820,  3911,  4002,  4093,  4184,  4275,   nil,   -16,   179,  4366,
  4457,   207,   210,  4548,   234,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   160,   nil,   nil,   460,   190,   535,   626,   218,
   222,   245,   nil,   nil,   249,   204,    60,   191,   270,   197,
   269,   nil,   nil,   nil,   nil,   298,   nil,    -7,   nil,   249,
   -31,  4639,  8873,   nil,  8931,  8989,   242,   259,   282,   266,
  4730,   301,   nil,   298,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   269,    53,   318,   nil,   nil,   321,   nil,   321,
   nil,   108,   nil,   nil,   nil,   nil,   295,   nil,   nil,   188,
  4821,   105,  9037,  4912,   nil,   324,   nil,   nil,   nil,   nil,
   331,   332,   335,   336,  9101,   335,  5003,     9,    10,    49,
    67,  5094,  5185,  5276,   nil,   nil,   116,    17,   285,   288,
   373,   343,  9072,   301,    25,    42,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   906,   369,   451,  9118,  9162,   542,
   676,   767,  9179,  9223,  9240,  9284,  9301,  9349,  9366,  9414,
  9460,  9506,  9561,   nil,   nil,  5367,  9619,   340,   nil,   nil,
   nil,   nil, 10107,  9667,   310,   nil,   336,   324,  9722,   nil,
   331,   nil,   186,   464,   363,   nil,   nil,  5458,   345,   nil,
  5549,  5640,  5731,   331,   374,   334,   nil,   nil,   373,   nil,
   nil,   nil,   nil,   nil,   371,   354,   -28,   nil,   -10,   nil,
  5822,  5913,  6004,   389,   392,   396,   399,   399,   nil,   371,
 10058,   -22,   361,   116,   nil,   nil,   416,  6095,   417,   nil,
  6186,   nil,   nil,   nil,   nil,  6277,   nil,   nil,   nil,   nil,
   416,   nil,   nil,   nil,   nil,   418,   421, 10167,   422, 10227,
  6368,  6459,  6550,  6641,   421,   nil,   427,  6732,   423,   nil,
   nil,   430,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   433,  6823,
 10287,   435,   nil,   376,   nil,   437,   nil,   438, 10347,   nil,
   389,   nil,     0,   453,   455,   nil,  6914,   459,   397,    62,
  7005,   nil,   nil,  7096,   nil,   460,   116,   461,   439,  9770,
   136,  7187,   nil,  7278,  7369, 10407,  7460,   nil,   466,   nil,
 10093,   nil,   nil,   468,   nil,  7551,   nil,   nil,   nil,   nil,
   nil,   nil,   410,   220,   471,   nil,   nil,  9818,  9866,  9914,
  9962,   479,  7642,   nil,   nil,   486,   nil,   nil,   487,  7733,
   nil,   nil,   nil,   474,   477,   493,   nil,  7824,   nil,   nil,
  7915,   499,   nil,  8006,   nil,   nil, 10010,   123,   nil,  8097,
   503,   479,   nil,   506,  8188,   507,   nil,   nil,   507,   nil,
   nil,   509,   507,   513,  8279,   nil,  8370,   512,   nil,   nil,
   516,   484,   nil,   nil,   nil,   nil,   520,   nil,   nil,   523,
   524,   nil,    15,   nil,   nil,  8461,   nil,  8552, 10058,  8643,
   nil,   nil,   525,   nil,   531,   nil,   542,   546,   nil,  8734,
   nil,   nil,   nil,   nil,   545,   nil,   547,   nil,   549,   nil,
   nil,   nil,   nil,   nil,   nil,   518,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -301,    -1,    -2,    -4,    -5,    -8,   -10,   -18,   -23,
  -301,  -301,  -192,   -35,   -36,   -37,   -38,  -301,  -301,  -301,
  -301,  -301,   -70,   -71,   -72,   -73,   -74,   -75,   -76,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,   -96,  -301,
  -301,  -103,  -107,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -249,  -272,  -222,  -248,  -301,  -219,  -220,
  -221,  -301,  -301,  -301,  -245,  -246,  -247,  -301,  -251,  -301,
  -264,  -267,  -301,  -273,  -301,  -301,    -7,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -144,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,
  -301,  -301,  -301,  -301,  -301,  -301,  -101,  -301,  -139,  -300,
  -300,   -24,   -25,  -301,  -300,  -161,  -188,  -189,  -190,  -191,
  -192,  -193,  -301,  -157,  -158,   -49,  -192,   -50,   -57,  -301,
  -301,   -14,   -15,   -16,  -274,   -98,  -239,  -241,  -244,  -240,
  -301,  -236,  -242,  -243,  -102,  -209,  -216,  -272,  -104,  -300,
  -301,  -301,  -301,  -115,  -301,  -301,  -300,  -300,  -301,  -300,
  -301,  -274,  -172,  -174,  -175,  -176,  -177,  -178,  -180,  -181,
  -248,  -249,  -300,  -301,  -274,  -224,  -233,  -234,  -237,  -274,
  -226,  -301,  -229,  -230,  -235,  -250,  -301,  -255,  -258,  -301,
  -262,  -301,  -301,  -301,   540,    -6,    -9,   -11,   -12,   -13,
   -19,   -20,   -21,   -22,  -301,  -274,  -301,   -94,   -95,   -96,
  -292,  -285,  -291,  -279,  -145,  -148,  -222,  -301,  -282,  -296,
  -192,  -299,  -288,  -294,  -220,  -221,  -278,  -283,  -284,  -286,
  -287,  -289,  -297,  -298,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -46,   -47,   -48,   -51,   -52,   -53,   -54,   -55,   -56,
   -58,   -59,  -301,   -60,  -133,  -301,   -23,  -274,   -64,   -67,
  -108,  -109,  -144,  -143,  -301,  -142,  -301,  -276,  -301,   -30,
  -300,  -194,  -301,  -301,  -301,   -61,   -62,  -275,  -301,  -100,
  -301,  -301,  -262,  -301,  -301,  -301,  -187,  -113,  -274,  -199,
  -201,  -202,  -203,  -204,  -206,  -301,  -301,  -272,  -301,  -106,
  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -301,  -169,  -300,
  -275,  -301,  -300,  -213,  -214,  -215,  -301,  -275,  -301,  -227,
  -301,  -252,  -253,  -254,  -256,  -301,  -259,  -260,  -261,  -263,
  -274,  -265,  -268,  -270,  -271,    -8,  -301,  -144,  -301,  -275,
  -301,  -301,  -301,  -301,  -274,  -135,  -301,  -275,  -274,  -147,
  -149,  -301,  -279,  -280,  -281,  -282,  -285,  -288,  -290,  -291,
  -292,  -293,  -294,  -295,  -296,  -299,  -140,  -141,  -301,  -277,
  -144,  -301,  -164,  -301,  -195,  -274,  -196,  -274,  -144,   -17,
   -97,  -232,  -301,  -301,  -301,  -110,  -301,  -185,  -301,  -275,
  -301,  -207,  -208,  -301,  -105,  -301,  -118,  -301,  -124,   -68,
  -301,  -301,  -128,  -300,  -300,  -144,  -300,  -168,  -301,  -182,
  -301,  -173,  -179,  -301,  -211,  -301,  -223,  -238,  -225,  -228,
  -231,  -257,  -301,  -301,  -274,   -28,  -146,  -152,  -150,  -151,
  -137,  -301,  -275,   -63,   -65,  -301,   -27,   -31,  -274,  -300,
  -165,  -166,  -167,  -301,  -301,  -274,   -99,  -301,  -210,  -217,
  -262,  -301,  -112,  -301,  -114,  -200,  -205,  -118,  -117,  -301,
  -301,  -124,  -123,  -301,  -301,  -301,  -127,  -129,  -301,  -162,
  -163,  -301,  -274,  -301,  -301,  -183,  -300,  -274,  -266,  -269,
  -301,   -32,  -134,  -136,  -138,   -29,  -301,  -197,  -198,  -301,
  -301,  -111,  -301,  -116,  -119,  -301,  -122,  -301,   -69,  -300,
  -153,  -154,  -301,  -159,  -301,  -171,  -301,  -301,   -26,   -33,
  -160,  -156,  -218,  -186,  -301,  -121,  -301,  -126,  -301,  -131,
  -132,  -155,  -170,  -184,  -212,  -276,  -120,  -125,  -130,   -34 ]

racc_goto_table = [
     2,   277,   176,   193,   174,   143,   135,   137,   138,   267,
   125,   139,   140,   158,   215,   378,   264,   155,   195,   275,
   275,   187,   187,   338,   342,   156,   294,   144,   444,   324,
   412,   298,   421,    86,   132,   274,   276,   184,   189,     1,
   141,     3,   162,   164,   165,   269,   478,   481,   472,   483,
   490,   447,   263,   325,   166,   167,   395,   125,   504,   296,
   182,   468,   141,   141,   194,   411,   528,   354,   197,   436,
   169,   202,   340,   381,   121,   122,   168,   450,   206,   207,
   208,   209,   496,   418,   214,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   259,   260,   261,   262,   266,   422,   194,   289,   273,   273,
   465,   506,   278,   155,   205,   393,   402,   143,   280,   516,
   401,   156,   503,   391,   427,   336,   337,   155,   444,   477,
   284,   334,   485,   193,   125,   335,   333,   198,   200,   308,
   nil,   nil,   nil,   nil,   nil,   167,   nil,   182,   nil,   nil,
   323,   nil,   141,   385,   387,   210,   211,   212,   213,   nil,
   313,   314,   nil,   316,   nil,   nil,   315,   355,   155,   424,
   317,   nil,   nil,   176,   nil,   174,   322,   nil,   nil,   nil,
   382,   nil,   nil,   nil,   nil,   392,   nil,   155,   nil,   423,
   nil,   358,   nil,   nil,   345,   156,   nil,   nil,   nil,   nil,
   339,   nil,   nil,   346,   nil,   137,   nil,   nil,   288,   nil,
   162,   164,   165,   nil,   nil,   nil,   nil,   nil,   nil,   419,
   nil,   269,   296,   nil,   nil,   nil,   166,   167,   125,   nil,
   nil,   182,   nil,   nil,   nil,   319,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   389,   nil,   nil,   nil,   nil,   326,   155,
   155,   nil,   nil,   328,   262,   489,   nil,   nil,   nil,   nil,
   430,   176,   397,   174,   nil,   nil,   434,   nil,   nil,   nil,
   nil,   nil,   nil,   539,   nil,   nil,   431,   187,   141,   348,
   266,   194,   194,   500,   nil,   nil,   nil,   269,   nil,   nil,
   nil,   nil,   339,   nil,   nil,   nil,   nil,   nil,   nil,   448,
   nil,   409,   nil,   nil,   nil,   nil,   nil,   455,   nil,   nil,
   405,   407,   nil,   480,   480,   nil,   480,   nil,   141,   487,
   nil,   194,   nil,   nil,   nil,   nil,   197,   nil,   nil,   nil,
   nil,   356,   nil,   nil,   482,   nil,   nil,   nil,   nil,   437,
   438,   439,   440,   nil,   493,   nil,   266,   nil,   194,   480,
   nil,   nil,   456,   nil,   nil,   269,   nil,   502,   nil,   389,
   nil,   176,   398,   174,   nil,   nil,   155,   nil,   278,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   451,   nil,   nil,   nil,   nil,   480,   269,   nil,   466,
   nil,   nil,   nil,   269,   141,   nil,   461,   535,   nil,   nil,
   409,   nil,   nil,   nil,   432,   nil,   nil,   nil,   nil,   529,
   nil,   nil,   nil,   nil,   266,   nil,   194,   nil,   441,   nil,
   nil,   nil,   445,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,   194,   453,
   nil,   454,   266,   nil,   194,   nil,   nil,   nil,   162,   nil,
   339,   nil,   nil,   508,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   514,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   491,   nil,
   nil,   nil,   nil,   nil,   nil,   524,   nil,   526,   278,   530,
   nil,   nil,   495,   nil,   nil,   nil,   nil,   nil,   nil,   499,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   512,   nil,   nil,   nil,
   nil,   517 ]

racc_goto_check = [
     2,    15,    46,     9,    47,     8,    12,    12,    12,    24,
    71,     6,     6,    50,    13,    16,    64,    48,   100,    63,
    63,    95,    95,    90,   107,    88,    54,    10,    25,    45,
    61,    56,    80,     5,    74,    67,    67,    91,    91,     1,
     6,     3,    12,    12,    12,     9,    73,    73,    59,    73,
    14,    18,    23,    44,    71,    71,    55,    71,    57,    63,
    71,    58,     6,     6,     6,    60,    62,    65,     6,    68,
    75,    12,    56,    76,    11,    11,    74,    77,     6,     6,
     6,     6,    73,    79,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    82,     6,    50,    12,    12,
    83,    59,    12,    48,     5,    90,    84,     8,    72,    73,
    86,    88,    58,    93,    94,    96,    97,    48,    25,    61,
    71,   101,    80,     9,    71,   102,   104,   105,   106,    10,
   nil,   nil,   nil,   nil,   nil,    71,   nil,    71,   nil,   nil,
    48,   nil,     6,    56,    56,    11,    11,    11,    11,   nil,
    72,    72,   nil,    72,   nil,   nil,    71,    64,    48,    45,
     2,   nil,   nil,    46,   nil,    47,    72,   nil,   nil,   nil,
    63,   nil,   nil,   nil,   nil,    24,   nil,    48,   nil,    54,
   nil,    13,   nil,   nil,     6,    88,   nil,   nil,   nil,   nil,
     2,   nil,   nil,     2,   nil,    12,   nil,   nil,    17,   nil,
    12,    12,    12,   nil,   nil,   nil,   nil,   nil,   nil,    63,
   nil,     9,    63,   nil,   nil,   nil,    71,    71,    71,   nil,
   nil,    71,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,    17,    48,
    48,   nil,   nil,    17,    12,   107,   nil,   nil,   nil,   nil,
     9,    46,    48,    47,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,    16,   nil,   nil,   100,    95,     6,    17,
    12,     6,     6,    90,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,    13,
   nil,    12,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,
     2,     2,   nil,    63,    63,   nil,    63,   nil,     6,    24,
   nil,     6,   nil,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,    17,   nil,   nil,    13,   nil,   nil,   nil,   nil,    12,
    12,    12,    12,   nil,    64,   nil,    12,   nil,     6,    63,
   nil,   nil,    50,   nil,   nil,     9,   nil,    24,   nil,     8,
   nil,    46,    17,    47,   nil,   nil,    48,   nil,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    71,   nil,   nil,   nil,   nil,    63,     9,   nil,    12,
   nil,   nil,   nil,     9,     6,   nil,     2,    15,   nil,   nil,
    12,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,    63,
   nil,   nil,   nil,   nil,    12,   nil,     6,   nil,    17,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,     6,    17,
   nil,    17,    12,   nil,     6,   nil,   nil,   nil,    12,   nil,
     2,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,    12,     2,
   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,
   nil,    17 ]

racc_goto_pointer = [
   nil,    39,     0,    41,   nil,    29,    -9,   nil,   -44,   -70,
   -22,    64,   -11,   -81,  -384,  -122,  -262,    64,  -328,   nil,
   nil,   nil,   nil,   -62,  -106,  -329,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,  -130,  -154,   -59,   -57,   -33,   nil,
   -38,   nil,   nil,   nil,  -133,  -238,  -129,  -411,  -345,  -360,
  -247,  -282,  -443,  -100,   -98,  -198,   nil,   -84,  -280,   nil,
   nil,    -2,    -6,  -367,    18,    11,  -207,  -306,   nil,  -236,
  -288,   nil,  -216,  -289,  -190,   nil,  -185,   nil,   -25,   nil,
  -177,   -34,   nil,  -167,  -203,   -50,   -74,   -73,   nil,   nil,
   -59,   -65,   -61,   nil,   -60,    58,    58,  -178 ]

racc_goto_default = [
   nil,   nil,   479,   nil,     4,     5,     6,     7,   186,   142,
   nil,     8,     9,   nil,   nil,   nil,   nil,   nil,   279,    13,
    14,    15,    16,   nil,   nil,   268,   410,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    49,
   nil,    51,    52,   159,   nil,   nil,   nil,   163,   nil,   nil,
   nil,   nil,   nil,   281,   nil,   nil,   118,   nil,   224,   227,
   225,    58,   nil,   nil,   nil,   124,   nil,   nil,   171,   nil,
   172,   173,   177,   299,   300,   301,   302,   303,   306,    67,
   nil,   nil,   191,   150,   188,   151,    74,    75,    76,    77,
   nil,   nil,   nil,   196,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 99, :_reduce_1,
  1, 99, :_reduce_2,
  0, 99, :_reduce_3,
  1, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 103, :_reduce_8,
  3, 103, :_reduce_9,
  1, 104, :_reduce_none,
  3, 104, :_reduce_11,
  3, 104, :_reduce_12,
  3, 104, :_reduce_13,
  1, 106, :_reduce_none,
  1, 106, :_reduce_15,
  1, 108, :_reduce_16,
  3, 108, :_reduce_17,
  1, 105, :_reduce_none,
  3, 105, :_reduce_19,
  3, 105, :_reduce_20,
  3, 105, :_reduce_21,
  3, 105, :_reduce_22,
  1, 109, :_reduce_none,
  2, 109, :_reduce_24,
  2, 109, :_reduce_25,
  7, 109, :_reduce_26,
  5, 109, :_reduce_27,
  5, 109, :_reduce_28,
  4, 116, :_reduce_29,
  1, 113, :_reduce_30,
  3, 113, :_reduce_31,
  1, 112, :_reduce_32,
  2, 112, :_reduce_33,
  4, 112, :_reduce_34,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  3, 110, :_reduce_39,
  3, 110, :_reduce_40,
  3, 110, :_reduce_41,
  3, 110, :_reduce_42,
  3, 110, :_reduce_43,
  3, 110, :_reduce_44,
  3, 110, :_reduce_45,
  3, 110, :_reduce_46,
  3, 110, :_reduce_47,
  3, 110, :_reduce_48,
  2, 110, :_reduce_49,
  2, 110, :_reduce_50,
  3, 110, :_reduce_51,
  3, 110, :_reduce_52,
  3, 110, :_reduce_53,
  3, 110, :_reduce_54,
  3, 110, :_reduce_55,
  3, 110, :_reduce_56,
  2, 110, :_reduce_57,
  3, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  3, 110, :_reduce_61,
  3, 110, :_reduce_62,
  5, 120, :_reduce_63,
  1, 122, :_reduce_64,
  3, 122, :_reduce_65,
  1, 123, :_reduce_none,
  1, 123, :_reduce_67,
  1, 124, :_reduce_68,
  3, 124, :_reduce_69,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_none,
  1, 117, :_reduce_92,
  1, 117, :_reduce_93,
  1, 117, :_reduce_94,
  1, 117, :_reduce_95,
  1, 117, :_reduce_96,
  4, 119, :_reduce_97,
  2, 119, :_reduce_98,
  5, 119, :_reduce_99,
  3, 119, :_reduce_100,
  2, 147, :_reduce_101,
  2, 147, :_reduce_102,
  1, 126, :_reduce_103,
  2, 126, :_reduce_104,
  4, 149, :_reduce_105,
  3, 149, :_reduce_106,
  1, 149, :_reduce_107,
  3, 150, :_reduce_108,
  3, 150, :_reduce_109,
  3, 148, :_reduce_110,
  3, 153, :_reduce_111,
  2, 153, :_reduce_112,
  2, 151, :_reduce_113,
  4, 151, :_reduce_114,
  2, 129, :_reduce_115,
  5, 155, :_reduce_116,
  4, 155, :_reduce_117,
  0, 156, :_reduce_none,
  2, 156, :_reduce_119,
  4, 156, :_reduce_120,
  3, 156, :_reduce_121,
  6, 130, :_reduce_122,
  5, 130, :_reduce_123,
  0, 157, :_reduce_none,
  4, 157, :_reduce_125,
  3, 157, :_reduce_126,
  5, 128, :_reduce_127,
  1, 158, :_reduce_128,
  2, 158, :_reduce_129,
  5, 159, :_reduce_130,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 121, :_reduce_none,
  4, 121, :_reduce_134,
  1, 163, :_reduce_135,
  3, 163, :_reduce_136,
  3, 162, :_reduce_137,
  6, 127, :_reduce_138,
  2, 127, :_reduce_139,
  3, 164, :_reduce_140,
  3, 164, :_reduce_141,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 111, :_reduce_144,
  1, 111, :_reduce_145,
  3, 111, :_reduce_146,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  3, 166, :_reduce_150,
  3, 166, :_reduce_151,
  3, 166, :_reduce_152,
  6, 131, :_reduce_153,
  6, 132, :_reduce_154,
  7, 118, :_reduce_155,
  7, 118, :_reduce_156,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  6, 134, :_reduce_159,
  7, 133, :_reduce_160,
  1, 173, :_reduce_161,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 174, :_reduce_none,
  2, 174, :_reduce_165,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  4, 136, :_reduce_168,
  3, 136, :_reduce_169,
  7, 135, :_reduce_170,
  6, 135, :_reduce_171,
  1, 176, :_reduce_172,
  3, 176, :_reduce_173,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_176,
  1, 178, :_reduce_none,
  1, 179, :_reduce_178,
  3, 179, :_reduce_179,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 177, :_reduce_none,
  2, 177, :_reduce_183,
  7, 138, :_reduce_184,
  2, 152, :_reduce_185,
  5, 152, :_reduce_186,
  1, 152, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_192,
  1, 169, :_reduce_193,
  1, 170, :_reduce_194,
  2, 170, :_reduce_195,
  2, 170, :_reduce_196,
  4, 170, :_reduce_197,
  4, 170, :_reduce_198,
  1, 154, :_reduce_199,
  3, 154, :_reduce_200,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 184, :_reduce_205,
  1, 184, :_reduce_206,
  2, 185, :_reduce_207,
  2, 183, :_reduce_208,
  1, 186, :_reduce_209,
  4, 186, :_reduce_210,
  4, 139, :_reduce_211,
  7, 139, :_reduce_212,
  3, 139, :_reduce_213,
  3, 139, :_reduce_214,
  3, 139, :_reduce_215,
  2, 187, :_reduce_216,
  5, 140, :_reduce_217,
  7, 140, :_reduce_218,
  1, 125, :_reduce_219,
  1, 141, :_reduce_220,
  1, 141, :_reduce_221,
  1, 141, :_reduce_222,
  4, 142, :_reduce_223,
  2, 142, :_reduce_224,
  4, 142, :_reduce_225,
  2, 142, :_reduce_226,
  3, 143, :_reduce_227,
  4, 143, :_reduce_228,
  2, 143, :_reduce_229,
  1, 190, :_reduce_230,
  3, 190, :_reduce_231,
  3, 107, :_reduce_232,
  1, 192, :_reduce_none,
  1, 192, :_reduce_234,
  1, 191, :_reduce_none,
  1, 191, :_reduce_236,
  1, 189, :_reduce_237,
  3, 189, :_reduce_238,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 193, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 145, :_reduce_none,
  1, 194, :_reduce_248,
  1, 194, :_reduce_249,
  2, 195, :_reduce_250,
  1, 197, :_reduce_251,
  1, 199, :_reduce_252,
  1, 200, :_reduce_253,
  2, 198, :_reduce_254,
  1, 201, :_reduce_255,
  1, 202, :_reduce_256,
  2, 202, :_reduce_257,
  2, 196, :_reduce_258,
  2, 203, :_reduce_259,
  2, 203, :_reduce_260,
  3, 101, :_reduce_261,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  0, 204, :_reduce_264,
  2, 204, :_reduce_265,
  4, 204, :_reduce_266,
  1, 137, :_reduce_267,
  3, 137, :_reduce_268,
  5, 137, :_reduce_269,
  1, 205, :_reduce_none,
  1, 205, :_reduce_none,
  1, 146, :_reduce_272,
  1, 144, :_reduce_273,
  0, 115, :_reduce_none,
  1, 115, :_reduce_275,
  0, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  0, 161, :_reduce_300 ]

racc_reduce_n = 301

racc_shift_n = 540

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :PLAN_R => 92,
  :LOW => 93,
  :HIGH => 94,
  :LISTSTART => 95,
  :SPLAT => 96,
  :MODULO => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "PLAN_R",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "argument",
  "hashpair",
  "arguments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "access_args",
  "access_arg",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hash_entry",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_15(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_17(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_21(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_22(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_24(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 136)
  def _reduce_25(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 147)
  def _reduce_26(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 154)
  def _reduce_27(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 163)
  def _reduce_28(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_29(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_31(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_34(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_39(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_40(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_41(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_42(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_43(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_44(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_45(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_46(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_47(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_48(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_49(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_50(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_51(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_52(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_53(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_54(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_55(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_56(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_57(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_58(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_59(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_60(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_61(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_62(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 232)
  def _reduce_63(val, _values, result)
     result = val[0].access(val[2]); loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_65(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 240)
  def _reduce_67(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_69(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

# reduce 91 omitted

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_92(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_93(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_94(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_95(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 279)
  def _reduce_96(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_97(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 292)
  def _reduce_98(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 296)
  def _reduce_99(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 301)
  def _reduce_100(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_101(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_102(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_103(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 314)
  def _reduce_104(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_105(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_106(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 319)
  def _reduce_107(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 323)
  def _reduce_108(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_109(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_110(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_111(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_112(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_113(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 346)
  def _reduce_114(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_115(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 361)
  def _reduce_116(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 365)
  def _reduce_117(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_119(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_120(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_121(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_122(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 391)
  def _reduce_123(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 124 omitted

module_eval(<<'.,.,', 'egrammar.ra', 401)
  def _reduce_125(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_126(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_127(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_129(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 423)
  def _reduce_130(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_134(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_135(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_136(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_137(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 460)
  def _reduce_138(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 464)
  def _reduce_139(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_140(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_141(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_144(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_145(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 481)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_150(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 501)
  def _reduce_151(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 505)
  def _reduce_152(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 514)
  def _reduce_153(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_154(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 533)
  def _reduce_155(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_156(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 554)
  def _reduce_159(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 567)
  def _reduce_160(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 578)
  def _reduce_161(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 166 omitted

# reduce 167 omitted

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_168(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_169(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_170(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_171(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_172(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_173(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_176(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 177 omitted

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_178(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_179(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 180 omitted

# reduce 181 omitted

# reduce 182 omitted

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_183(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_184(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_185(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_186(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 187 omitted

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_192(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_193(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_194(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_195(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_196(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_197(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_198(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_199(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_200(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

# reduce 204 omitted

module_eval(<<'.,.,', 'egrammar.ra', 708)
  def _reduce_205(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_206(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 712)
  def _reduce_207(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_208(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 718)
  def _reduce_209(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 719)
  def _reduce_210(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 724)
  def _reduce_211(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 729)
  def _reduce_212(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 734)
  def _reduce_213(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 739)
  def _reduce_214(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 744)
  def _reduce_215(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 750)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_217(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 761)
  def _reduce_218(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 770)
  def _reduce_219(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_220(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_221(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_222(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_223(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_224(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 792)
  def _reduce_225(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 793)
  def _reduce_226(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 796)
  def _reduce_227(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 797)
  def _reduce_228(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_229(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 801)
  def _reduce_230(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 802)
  def _reduce_231(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 805)
  def _reduce_232(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 233 omitted

module_eval(<<'.,.,', 'egrammar.ra', 809)
  def _reduce_234(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 235 omitted

module_eval(<<'.,.,', 'egrammar.ra', 814)
  def _reduce_236(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 817)
  def _reduce_237(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 818)
  def _reduce_238(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

# reduce 246 omitted

# reduce 247 omitted

module_eval(<<'.,.,', 'egrammar.ra', 835)
  def _reduce_248(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 836)
  def _reduce_249(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 838)
  def _reduce_250(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 839)
  def _reduce_251(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 840)
  def _reduce_252(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 841)
  def _reduce_253(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_254(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 843)
  def _reduce_255(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_256(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 847)
  def _reduce_257(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 850)
  def _reduce_258(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 853)
  def _reduce_259(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 854)
  def _reduce_260(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 857)
  def _reduce_261(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 262 omitted

# reduce 263 omitted

module_eval(<<'.,.,', 'egrammar.ra', 864)
  def _reduce_264(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 865)
  def _reduce_265(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 866)
  def _reduce_266(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 869)
  def _reduce_267(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 870)
  def _reduce_268(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 871)
  def _reduce_269(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 270 omitted

# reduce 271 omitted

module_eval(<<'.,.,', 'egrammar.ra', 877)
  def _reduce_272(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 880)
  def _reduce_273(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 274 omitted

module_eval(<<'.,.,', 'egrammar.ra', 886)
  def _reduce_275(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

# reduce 295 omitted

# reduce 296 omitted

# reduce 297 omitted

# reduce 298 omitted

# reduce 299 omitted

module_eval(<<'.,.,', 'egrammar.ra', 917)
  def _reduce_300(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
