#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 758)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'62,65,325,-231,63,57,286,58,-243,84,-242,-240,243,139,-130,382,326,402',
'378,283,377,-245,286,105,18,108,285,103,104,340,43,286,46,244,49,12',
'232,47,37,40,342,45,38,10,11,-231,140,70,17,107,-243,39,-242,-240,15',
'16,-130,88,89,91,90,284,71,-245,86,87,115,260,44,343,261,85,36,66,255',
'68,69,67,275,276,48,50,52,51,53,54,55,62,65,56,254,63,57,232,58,92,84',
'117,62,65,320,114,63,378,262,377,264,263,349,116,105,18,108,337,103',
'104,351,43,315,46,334,49,119,257,47,37,40,243,45,38,235,233,257,324',
'70,17,107,359,39,360,70,15,16,243,88,89,91,90,244,71,281,86,87,115,282',
'44,70,362,85,36,66,243,68,69,244,321,365,48,50,52,51,53,54,55,62,65',
'56,320,63,57,320,58,92,84,117,370,371,262,114,314,232,368,83,375,310',
'379,116,105,18,108,381,103,104,308,43,83,46,222,49,12,388,47,37,40,73',
'45,38,10,11,307,221,70,17,107,391,39,125,281,15,16,76,77,78,91,90,75',
'71,160,86,87,115,157,44,155,257,85,36,66,395,68,69,75,125,398,48,50',
'52,51,53,54,55,62,65,56,281,63,57,83,58,92,84,117,401,126,83,114,115',
'83,125,79,81,80,82,116,105,18,108,115,103,104,405,43,381,46,407,49,12',
'408,47,37,40,409,45,38,10,11,83,117,70,17,107,114,39,412,413,15,16,414',
'117,116,415,83,114,71,281,75,423,115,72,44,116,425,85,36,66,426,68,69',
'427,310,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,419,84,117,,,,114',
'115,,,111,,,,116,105,18,108,115,103,104,,43,,46,,49,12,,47,37,40,,45',
'38,10,11,,117,70,17,107,114,39,,,15,16,,117,116,,,114,71,,86,87,,,44',
'116,,85,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,417',
'84,,,,,,,,,,,,,,105,18,108,,103,104,,43,,46,,49,12,,47,37,40,,45,38',
'10,11,,,70,17,107,,39,,,15,16,,,,91,90,,71,,86,87,,,44,,,85,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,84,63,57,,58,92,84,,,,,,,,105,,108',
',103,104,105,18,108,,103,104,,43,243,46,,49,119,,47,37,40,,45,38,107',
'70,,,70,17,107,,39,244,,15,16,,,86,87,,,71,,,85,273,,44,,,85,36,66,',
'68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,84,,,,,,,,,,,,,,105',
'18,108,,103,104,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,107,,39',
',,15,16,,,,,,,71,,86,87,,,44,,,85,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,299,190,298,191,,296,193,300,,293,,295,297,,',
',18,,,194,189,301,43,,46,294,49,12,243,47,37,40,,45,38,10,11,192,302',
'70,17,70,,39,,,15,16,,244,305,306,304,303,71,,,,,,44,,,236,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,411,84,,,,,,,,,,,,,,105',
'18,108,,103,104,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,107,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,299,190,298,191,,296,193,300,,293,,295,297,,,,18,,',
'194,189,301,43,,46,294,49,119,,47,37,40,,45,38,,,192,302,70,17,,,39',
',,15,16,,,305,306,304,303,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,299,190,298,191,,296,193,300,,293,,295',
'297,,,,18,,,194,189,301,43,,46,294,49,119,,47,37,40,,45,38,,,192,302',
'70,17,,,39,,,15,16,,,305,306,304,303,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,299,190,298,191,,296,193,300,',
'293,,295,297,,,,18,,,194,189,301,43,,46,294,49,119,,47,37,40,,45,38',
',,192,302,70,17,,,39,,,15,16,,,305,306,304,303,71,,,,,,44,,,,36,66,',
'68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,84,,,,,,,,,,,,,,105',
'18,108,,103,104,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,107,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,84,63,57,,58,,84,,,,,,,,105,,108,,103,104,105,18,108,,103,104',
',43,,46,,49,119,,47,37,40,,45,38,107,,,,70,17,107,,39,,,15,16,,,,,,',
'71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,',
'58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40',
',45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46',
',49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,',
'36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,',
',,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16',
',,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,144,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,146,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,148,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,282,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,148,,,,,,,,,,,,,,,,18,,,,',
',43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,159',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,',
'39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40',
',45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46',
',49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44',
',,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,',
',,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,',
'15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65',
'56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38',
'10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36',
'66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,',
',,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16',
',,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,',
'47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,',
',71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57',
',58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'176,190,182,191,49,183,193,184,37,175,,178,173,,,,,70,17,194,189,174',
',,15,172,,,,,,,71,,,,,192,177,,,,36,66,,68,69,,,,185,186,188,187,53',
'54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47',
'37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,',
',15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65',
'56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38',
',,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52',
'51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45',
'38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,',
'39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40',
',45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48',
'50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46',
',49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,',
'36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,',
',,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16',
',,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44',
',,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,',
',,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15',
'16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56',
',63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,',
',,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,218,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
'220,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,',
',,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63',
'57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11',
',,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51',
'53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,',
'47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,',
'39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,383,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37',
'40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,',
',48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43',
',46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,',
',15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65',
'56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38',
',,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52',
'51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119',
',47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,',
',,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,',
',,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39',
',,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62',
'65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45',
'38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50',
'52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49',
'119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66',
',68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18',
',,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,',
'39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,248,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,318,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
'328,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54',
'55,62,65,56,,63,57,,58,330,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47',
'37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68',
'69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,',
',,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71',
',,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58',
',,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70,17',
',,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55',
'62,65,56,,63,57,,58,344,,,,,,,,,,,,,,,,18,,,,,,43,,46,,49,12,,47,37',
'40,,45,38,10,11,,,70,17,,,39,,,15,16,,,,,,,71,,,,,,44,,,,36,66,,68,69',
',,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,,,,,,,,,,,,,,18,,,,,',
'43,,46,,49,119,,47,37,40,,45,38,,,,,70,17,,,39,,,15,16,,,,,,,71,,,,',
',44,,,,36,66,,68,69,,,,48,50,52,51,53,54,55,62,65,56,,63,57,,58,,,,',
',,,,,,,,,,,,18,62,65,,,63,43,,46,,49,12,,47,37,40,,45,38,10,11,,,70',
'17,,,39,62,65,15,16,63,62,65,,,63,71,,139,,,136,44,,,,36,66,,68,69,',
',,48,50,52,51,53,54,55,71,84,56,251,139,,,136,,139,140,66,136,100,95',
'105,,108,,103,104,,96,98,97,99,,71,,,,,71,,,,,140,66,,,107,140,66,,102',
'101,,,88,89,91,90,93,94,,86,87,84,,250,,,85,,,,,,,100,95,105,,108,,103',
'104,,96,98,97,99,,62,65,,92,63,,,,,,,,,,107,,,,102,101,,,88,89,91,90',
'93,94,,86,87,84,,249,,,85,,,139,,,136,100,95,105,,108,,103,104,,96,98',
'97,99,,,,,92,,71,,,,,,,,,107,140,66,,102,101,,,88,89,91,90,93,94,84',
'86,87,,,,,,85,,,,100,95,105,311,108,,103,104,,96,98,97,99,,,,,,,,92',
',,,,,,,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108',
',103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,84,88,89,91,90',
'93,94,,86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,',
',92,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108',
',103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,84,88,89,91,90',
'93,94,,86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,',
',92,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108',
',103,104,,96,98,97,99,,275,276,,,,,,,,,,,,92,107,,,,102,101,,,88,89',
'91,90,93,94,84,86,87,,,287,,,85,,,,100,95,105,,108,,103,104,,96,98,97',
'99,,,,,,,,92,,,,,,,,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100',
'95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107,,,,,101,,84',
'88,89,91,90,93,94,,86,87,,,100,95,105,85,108,84,103,104,,96,98,97,99',
',,,,,95,105,,108,,103,104,,96,92,107,,,,,,,,88,89,91,90,93,94,,86,87',
'107,,,,,85,,84,88,89,91,90,93,94,,86,87,,,,95,105,85,108,,103,104,,96',
'92,,,,,,,,,,,,,,,,,92,107,,,,,84,,,88,89,91,90,93,94,,86,87,100,95,105',
'279,108,85,103,104,,96,98,97,99,,,,,,,,,,,,,,,,107,92,,,102,101,,84',
'88,89,91,90,93,94,,86,87,,,,95,105,85,108,,103,104,,96,,,,,,,,,,,,,',
',,,,92,107,,,,,84,,,88,89,91,90,93,94,,86,87,100,95,105,,108,85,103',
'104,,96,98,97,99,,,,,,,,,,,,,,,,107,92,,,102,101,,84,88,89,91,90,93',
'94,,86,87,,,,95,105,85,108,84,103,104,,96,,,,,,,,,,105,,108,,103,104',
',,92,107,,,,,84,,,88,89,91,90,93,94,,86,87,107,,105,,108,85,103,104',
'88,89,91,90,93,94,,86,87,,,,,,85,,,,,,107,92,,,,,,84,88,89,91,90,93',
'94,,86,87,,92,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,,',
'92,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108,',
'103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,84,88,89,91,90',
'93,94,,86,87,,,100,95,105,85,108,,103,104,,96,98,97,99,,,,,,,,,,,,,',
',92,107,,,,102,101,,84,88,89,91,90,93,94,,86,87,,,100,95,105,85,108',
',103,104,,96,98,97,99,,,,,,,,,,,,,,,92,107,,,,102,101,,,88,89,91,90',
'93,94,,86,87,,,,,,85,,,,,,,,,,,,,,,,,,,,,,,,92' ]
        racc_action_table = arr = ::Array.new(8602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,247,173,0,0,331,0,188,206,187,174,245,255,175,331,247,374,328,181',
'328,186,374,206,0,206,196,206,206,256,0,196,0,245,0,0,141,0,0,0,258',
'0,0,0,0,173,255,0,0,206,188,0,187,174,0,0,175,206,206,206,206,181,0',
'186,206,206,46,147,0,259,147,206,0,0,134,0,0,0,349,349,0,0,0,0,0,0,0',
'414,414,0,132,414,414,131,414,206,205,46,155,155,272,46,155,375,277',
'375,152,152,278,46,205,414,205,253,205,205,280,414,232,414,252,414,414',
'143,414,414,414,232,414,414,124,122,145,246,414,414,205,288,414,290',
'232,414,414,320,205,205,205,205,232,414,292,205,205,314,294,414,320',
'309,205,414,414,244,414,414,320,243,312,414,414,414,414,414,414,414',
'4,4,414,237,4,4,316,4,205,201,314,317,319,150,314,230,112,314,110,327',
'227,329,314,201,4,201,330,201,201,226,4,109,4,106,4,4,335,4,4,4,4,4',
'4,4,4,224,105,4,4,201,348,4,220,350,4,4,7,7,7,201,201,74,4,72,201,201',
'48,67,4,66,219,201,4,4,358,4,4,161,360,361,4,4,4,4,4,4,4,408,408,4,364',
'408,408,166,408,201,198,48,369,42,167,48,183,168,41,7,7,7,7,48,198,408',
'198,182,198,198,378,408,379,408,381,408,408,382,408,408,408,385,408',
'408,408,408,169,183,408,408,198,183,408,390,393,408,408,394,182,183',
'400,8,182,408,171,5,410,185,1,408,182,416,198,408,408,418,408,408,420',
'424,,408,408,408,408,408,408,408,407,407,408,,407,407,,407,407,203,185',
',,,185,12,,,12,,,,185,203,407,203,119,203,203,,407,,407,,407,407,,407',
'407,407,,407,407,407,407,,12,407,407,203,12,407,,,407,407,,119,12,,',
'119,407,,203,203,,,407,119,,203,407,407,,407,407,,,,407,407,407,407',
'407,407,407,405,405,407,,405,405,,405,405,200,,,,,,,,,,,,,,200,405,200',
',200,200,,405,,405,,405,405,,405,405,405,,405,405,405,405,,,405,405',
'200,,405,,,405,405,,,,200,200,,405,,200,200,,,405,,,200,405,405,,405',
'405,,,,405,405,405,405,405,405,405,178,178,405,202,178,178,,178,200',
'199,,,,,,,,202,,202,,202,202,199,178,199,,199,199,,178,157,178,,178',
'178,,178,178,178,,178,178,202,157,,,178,178,199,,178,157,,178,178,,',
'202,202,,,178,,,202,157,,178,,,199,178,178,,178,178,,,,178,178,178,178',
'178,178,178,10,10,178,,10,10,,10,,204,,,,,,,,,,,,,,204,10,204,,204,204',
',10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,204,,10,,,10,10,,,,,,',
'10,,204,204,,,10,,,204,10,10,,10,10,,,,10,10,10,10,10,10,10,11,11,10',
',11,11,,11,311,311,311,311,,311,311,311,,311,,311,311,,,,11,,,311,311',
'311,11,,11,311,11,11,125,11,11,11,,11,11,11,11,311,311,11,11,125,,11',
',,11,11,,125,311,311,311,311,11,,,,,,11,,,125,11,11,,11,11,,,,11,11',
'11,11,11,11,11,388,388,11,,388,388,,388,388,197,,,,,,,,,,,,,,197,388',
'197,,197,197,,388,,388,,388,388,,388,388,388,,388,388,388,388,,,388',
'388,197,,388,,,388,388,,,,,,,388,,,,,,388,,,,388,388,,388,388,,,,388',
'388,388,388,388,388,388,15,15,388,,15,15,,15,279,279,279,279,,279,279',
'279,,279,,279,279,,,,15,,,279,279,279,15,,15,279,15,15,,15,15,15,,15',
'15,,,279,279,15,15,,,15,,,15,15,,,279,279,279,279,15,,,,,,15,,,,15,15',
',15,15,,,,15,15,15,15,15,15,15,16,16,15,,16,16,,16,281,281,281,281,',
'281,281,281,,281,,281,281,,,,16,,,281,281,281,16,,16,281,16,16,,16,16',
'16,,16,16,,,281,281,16,16,,,16,,,16,16,,,281,281,281,281,16,,,,,,16',
',,,16,16,,16,16,,,,16,16,16,16,16,16,16,17,17,16,,17,17,,17,222,222',
'222,222,,222,222,222,,222,,222,222,,,,17,,,222,222,222,17,,17,222,17',
'17,,17,17,17,,17,17,,,222,222,17,17,,,17,,,17,17,,,222,222,222,222,17',
',,,,,17,,,,17,17,,17,17,,,,17,17,17,17,17,17,17,18,18,17,,18,18,,18',
',120,,,,,,,,,,,,,,120,18,120,,120,120,,18,,18,,18,18,,18,18,18,,18,18',
'18,18,,,18,18,120,,18,,,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18',
'18,18,18,18,18,18,377,377,18,121,377,377,,377,,118,,,,,,,,121,,121,',
'121,121,118,377,118,,118,118,,377,,377,,377,377,,377,377,377,,377,377',
'121,,,,377,377,118,,377,,,377,377,,,,,,,377,,,,,,377,,,,377,377,,377',
'377,,,,377,377,377,377,377,377,377,177,177,377,,177,177,,177,,,,,,,',
',,,,,,,,,177,,,,,,177,,177,,177,177,,177,177,177,,177,177,,,,,177,177',
',,177,,,177,177,,,,,,,177,,,,,,177,,,,177,177,,177,177,,,,177,177,177',
'177,177,177,177,43,43,177,,43,43,,43,,,,,,,,,,,,,,,,,43,,,,,,43,,43',
',43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,,,43,,,,,,43,,,,43',
'43,,43,43,,,,43,43,43,43,43,43,43,44,44,43,,44,44,,44,,,,,,,,,,,,,,',
',,44,,,,,,44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,',
',,44,,,,,,44,,,,44,44,,44,44,,,,44,44,44,44,44,44,44,45,45,44,,45,45',
',45,,,,,,,,,,,,,,,,,45,,,,,,45,,45,,45,45,,45,45,45,,45,45,,,,,45,45',
',,45,,,45,45,,,,,,,45,,,,,,45,,,,45,45,,45,45,,,,45,45,45,45,45,45,45',
'365,365,45,,365,365,,365,,,,,,,,,,,,,,,,,365,,,,,,365,,365,,365,365',
',365,365,365,,365,365,365,365,,,365,365,,,365,,,365,365,,,,,,,365,,',
',,,365,,,,365,365,,365,365,,,,365,365,365,365,365,365,365,359,359,365',
',359,359,,359,,,,,,,,,,,,,,,,,359,,,,,,359,,359,,359,359,,359,359,359',
',359,359,,,,,359,359,,,359,,,359,359,,,,,,,359,,,,,,359,,,,359,359,',
'359,359,,,,359,359,359,359,359,359,359,176,176,359,,176,176,,176,,,',
',,,,,,,,,,,,,176,,,,,,176,,176,,176,176,,176,176,176,,176,176,,,,,176',
'176,,,176,,,176,176,,,,,,,176,,,,,,176,,,,176,176,,176,176,,,,176,176',
'176,176,176,176,176,56,56,176,,56,56,56,56,,,,,,,,,,,,,,,,,56,,,,,,56',
',56,,56,56,,56,56,56,,56,56,56,56,,,56,56,,,56,,,56,56,,,,,,,56,,,,',
',56,,,,56,56,,56,56,,,,56,56,56,56,56,56,56,57,57,56,,57,57,57,57,,',
',,,,,,,,,,,,,,57,,,,,,57,,57,,57,57,,57,57,57,,57,57,57,57,,,57,57,',
',57,,,57,57,,,,,,,57,,,,,,57,,,,57,57,,57,57,,,,57,57,57,57,57,57,57',
'58,58,57,,58,58,,58,58,,,,,,,,,,,,,,,,58,,,,,,58,,58,,58,58,,58,58,58',
',58,58,58,58,,,58,58,,,58,,,58,58,,,,,,,58,,,,,,58,,,,58,58,,58,58,',
',,58,58,58,58,58,58,58,64,64,58,,64,64,,64,,,,,,,,,,,,,,,,,64,,,,,,64',
',64,,64,64,,64,64,64,,64,64,64,64,,,64,64,,,64,,,64,64,,,,,,,64,,,,',
',64,,,,64,64,,64,64,,,,64,64,64,64,64,64,64,172,172,64,,172,172,,172',
',,172,,,,,,,,,,,,,,172,,,,,,172,,172,,172,172,,172,172,172,,172,172',
',,,,172,172,,,172,,,172,172,,,,,,,172,,,,,,172,,,,172,172,,172,172,',
',,172,172,172,172,172,172,172,159,159,172,,159,159,,159,159,,,,,,,,',
',,,,,,,159,,,,,,159,,159,,159,159,,159,159,159,,159,159,159,159,,,159',
'159,,,159,,,159,159,,,,,,,159,,,,,,159,,,,159,159,,159,159,,,,159,159',
'159,159,159,159,159,69,69,159,,69,69,,69,,,,,,,,,,,,,,,,,69,,,,,,69',
',69,,69,69,,69,69,69,,69,69,,,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69',
',,,69,69,,69,69,,,,69,69,69,69,69,69,69,218,218,69,,218,218,,218,,,',
',,,,,,,,,,,,,218,,,,,,218,,218,,218,218,,218,218,218,,218,218,,,,,218',
'218,,,218,,,218,218,,,,,,,218,,,,,,218,,,,218,218,,218,218,,,,218,218',
'218,218,218,218,218,73,73,218,,73,73,,73,,,,,,,,,,,,,,,,,73,,,,,,73',
',73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,,,73,,,,',
',73,,,,73,73,,73,73,,,,73,73,73,73,73,73,73,156,156,73,,156,156,,156',
',,,,,,,,,,,,,,,,156,,,,,,156,,156,,156,156,,156,156,156,,156,156,156',
'156,,,156,156,,,156,,,156,156,,,,,,,156,,,,,,156,,,,156,156,,156,156',
',,,156,156,156,156,156,156,156,75,75,156,,75,75,,75,,,,,,,,,,,,,,,,',
'75,,,,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,',
',,,,75,,,,,,75,,,,75,75,,75,75,,,,75,75,75,75,75,75,75,76,76,75,,76',
'76,,76,,,,,,,,,,,,,,,,,76,,,,,,76,,76,,76,76,,76,76,76,,76,76,76,76',
',,76,76,,,76,,,76,76,,,,,,,76,,,,,,76,,,,76,76,,76,76,,,,76,76,76,76',
'76,76,76,77,77,76,,77,77,,77,,,,,,,,,,,,,,,,,77,,,,,,77,,77,,77,77,',
'77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,,,77,,,,,,77,,,,77,77',
',77,77,,,,77,77,77,77,77,77,77,78,78,77,,78,78,,78,,,,,,,,,,,,,,,,,78',
',,,,,78,,78,,78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,',
',78,,,,,,78,,,,78,78,,78,78,,,,78,78,78,78,78,78,78,79,79,78,,79,79',
',79,,,,,,,,,,,,,,,,,79,,,,,,79,,79,,79,79,,79,79,79,,79,79,79,79,,,79',
'79,,,79,,,79,79,,,,,,,79,,,,,,79,,,,79,79,,79,79,,,,79,79,79,79,79,79',
'79,80,80,79,,80,80,,80,,,,,,,,,,,,,,,,,80,,,,,,80,,80,,80,80,,80,80',
'80,,80,80,80,80,,,80,80,,,80,,,80,80,,,,,,,80,,,,,,80,,,,80,80,,80,80',
',,,80,80,80,80,80,80,80,81,81,80,,81,81,,81,,,,,,,,,,,,,,,,,81,,,,,',
'81,,81,,81,81,,81,81,81,,81,81,81,81,,,81,81,,,81,,,81,81,,,,,,,81,',
',,,,81,,,,81,81,,81,81,,,,81,81,81,81,81,81,81,82,82,81,,82,82,,82,',
',,,,,,,,,,,,,,,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82',
',,82,,,82,82,,,,,,,82,,,,,,82,,,,82,82,,82,82,,,,82,82,82,82,82,82,82',
'83,83,82,,83,83,,83,,,,,,,,,,,,,,,,,83,,,,,,83,83,83,83,83,83,83,83',
'83,83,,83,83,,,,,83,83,83,83,83,,,83,83,,,,,,,83,,,,,83,83,,,,83,83',
',83,83,,,,83,83,83,83,83,83,83,84,84,83,,84,84,,84,,,,,,,,,,,,,,,,,84',
',,,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,84,,,,,,,84',
',,,,,84,,,,84,84,,84,84,,,,84,84,84,84,84,84,84,85,85,84,,85,85,,85',
',,,,,,,,,,,,,,,,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85',
',,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85,85,85,85,86',
'86,85,,86,86,,86,,,,,,,,,,,,,,,,,86,,,,,,86,,86,,86,86,,86,86,86,,86',
'86,,,,,86,86,,,86,,,86,86,,,,,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86',
'86,86,86,86,86,87,87,86,,87,87,,87,,,,,,,,,,,,,,,,,87,,,,,,87,,87,,87',
'87,,87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87',
',87,87,,,,87,87,87,87,87,87,87,88,88,87,,88,88,,88,,,,,,,,,,,,,,,,,88',
',,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88,,,,,,,88',
',,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,88,88,89,89,88,,89,89,,89',
',,,,,,,,,,,,,,,,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89',
',,89,89,,,,,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,89,89,90',
'90,89,,90,90,,90,,,,,,,,,,,,,,,,,90,,,,,,90,,90,,90,90,,90,90,90,,90',
'90,,,,,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90',
'90,90,90,90,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,,,,,,91,,91,,91',
'91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91',
',91,91,,,,91,91,91,91,91,91,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,,,,92',
',,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,,92,,,92,92,,,,,,,92',
',,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92,93,93,92,,93,93,,93',
',,,,,,,,,,,,,,,,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93',
',,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93,93,93,93,93,94',
'94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,,,,,,94,,94,,94,94,,94,94,94,,94',
'94,,,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,,,,94,94,,94,94,,,,94,94',
'94,94,94,94,94,95,95,94,,95,95,,95,,,,,,,,,,,,,,,,,95,,,,,,95,,95,,95',
'95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,,,95,,,,,,95,,,,95,95',
',95,95,,,,95,95,95,95,95,95,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96',
',,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96',
',,,,,96,,,,96,96,,96,96,,,,96,96,96,96,96,96,96,97,97,96,,97,97,,97',
',,,,,,,,,,,,,,,,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97',
',,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,97,97,98',
'98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,,,,,,98,,98,,98,98,,98,98,98,,98',
'98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98,98,,,,98,98',
'98,98,98,98,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,,99,,,,,,99,,99,,99',
'99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99',
',99,99,,,,99,99,99,99,99,99,99,100,100,99,,100,100,,100,,,,,,,,,,,,',
',,,,100,,,,,,100,,100,,100,100,,100,100,100,,100,100,,,,,100,100,,,100',
',,100,100,,,,,,,100,,,,,,100,,,,100,100,,100,100,,,,100,100,100,100',
'100,100,100,101,101,100,,101,101,,101,,,,,,,,,,,,,,,,,101,,,,,,101,',
'101,,101,101,,101,101,101,,101,101,,,,,101,101,,,101,,,101,101,,,,,',
',101,,,,,,101,,,,101,101,,101,101,,,,101,101,101,101,101,101,101,102',
'102,101,,102,102,,102,,,,,,,,,,,,,,,,,102,,,,,,102,,102,,102,102,,102',
'102,102,,102,102,,,,,102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102',
'102,,102,102,,,,102,102,102,102,102,102,102,103,103,102,,103,103,,103',
',,,,,,,,,,,,,,,,103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,',
',103,103,,,103,,,103,103,,,,,,,103,,,,,,103,,,103,103,103,,103,103,',
',,103,103,103,103,103,103,103,104,104,103,,104,104,,104,,,,,,,,,,,,',
',,,,104,104,,,,,104,,104,,104,104,,104,104,104,,104,104,104,104,,,104',
'104,,,104,,,104,104,,,,,,,104,,,,,,104,,,,104,104,,104,104,,,,104,104',
'104,104,104,104,104,340,340,104,,340,340,,340,,,,,,,,,,,,,,,,,340,,',
',,,340,,340,,340,340,,340,340,340,,340,340,340,340,,,340,340,,,340,',
',340,340,,,,,,,340,,,,,,340,,,,340,340,,340,340,,,,340,340,340,340,340',
'340,340,334,334,340,,334,334,,334,,,,,,,,,,,,,,,,,334,,,,,,334,,334',
',334,334,,334,334,334,,334,334,334,334,,,334,334,,,334,,,334,334,,,',
',,,334,,,,,,334,,,,334,334,,334,334,,,,334,334,334,334,334,334,334,107',
'107,334,,107,107,,107,,,,,,,,,,,,,,,,,107,,,,,,107,,107,,107,107,,107',
'107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107',
'107,,107,107,,,,107,107,107,107,107,107,107,108,108,107,,108,108,,108',
',,,,,,,,,,,,,,,,108,,,,,,108,,108,,108,108,,108,108,108,,108,108,,,',
',108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108,,,,108',
'108,108,108,108,108,108,332,332,108,,332,332,,332,332,,,,,,,,,,,,,,',
',332,,,,,,332,,332,,332,332,,332,332,332,,332,332,,,,,332,332,,,332',
',,332,332,,,,,,,332,,,,,,332,,,,332,332,,332,332,,,,332,332,332,332',
'332,332,332,325,325,332,,325,325,,325,,,,,,,,,,,,,,,,,325,,,,,,325,',
'325,,325,325,,325,325,325,,325,325,325,325,,,325,325,,,325,,,325,325',
',,,,,,325,,,,,,325,,,,325,325,,325,325,,,,325,325,325,325,325,325,325',
'111,111,325,,111,111,,111,,,,,,,,,,,,,,,,,111,,,,,,111,,111,,111,111',
',111,111,111,,111,111,,,,,111,111,,,111,,,111,111,,,,,,,111,,,,,,111',
',,,111,111,,111,111,,,,111,111,111,111,111,111,111,324,324,111,,324',
'324,,324,,,,,,,,,,,,,,,,,324,,,,,,324,,324,,324,324,,324,324,324,,324',
'324,,,,,324,324,,,324,,,324,324,,,,,,,324,,,,,,324,,,,324,324,,324,324',
',,,324,324,324,324,324,324,324,321,321,324,,321,321,,321,,,,,,,,,,,',
',,,,,321,,,,,,321,,321,,321,321,,321,321,321,,321,321,,,,,321,321,,',
'321,,,321,321,,,,,,,321,,,,,,321,,,,321,321,,321,321,,,,321,321,321',
'321,321,321,321,310,310,321,,310,310,,310,,,,,,,,,,,,,,,,,310,,,,,,310',
',310,,310,310,,310,310,310,,310,310,,,,,310,310,,,310,,,310,310,,,,',
',,310,,,,,,310,,,,310,310,,310,310,,,,310,310,310,310,310,310,310,287',
'287,310,,287,287,,287,,,,,,,,,,,,,,,,,287,,,,,,287,,287,,287,287,,287',
'287,287,,287,287,,,,,287,287,,,287,,,287,287,,,,,,,287,,,,,,287,,,,287',
'287,,287,287,,,,287,287,287,287,287,287,287,286,286,287,,286,286,,286',
',,,,,,,,,,,,,,,,286,,,,,,286,,286,,286,286,,286,286,286,,286,286,,,',
',286,286,,,286,,,286,286,,,,,,,286,,,,,,286,,,,286,286,,286,286,,,,286',
'286,286,286,286,286,286,284,284,286,,284,284,,284,,,,,,,,,,,,,,,,,284',
',,,,,284,,284,,284,284,,284,284,284,,284,284,,,,,284,284,,,284,,,284',
'284,,,,,,,284,,,,,,284,,,,284,284,,284,284,,,,284,284,284,284,284,284',
'284,283,283,284,,283,283,,283,,,,,,,,,,,,,,,,,283,,,,,,283,,283,,283',
'283,,283,283,283,,283,283,,,,,283,283,,,283,,,283,283,,,,,,,283,,,,',
',283,,,,283,283,,283,283,,,,283,283,283,283,283,283,283,282,282,283',
',282,282,,282,,,,,,,,,,,,,,,,,282,,,,,,282,,282,,282,282,,282,282,282',
',282,282,,,,,282,282,,,282,,,282,282,,,,,,,282,,,,,,282,,,,282,282,',
'282,282,,,,282,282,282,282,282,282,282,126,126,282,,126,126,,126,,,',
',,,,,,,,,,,,,126,126,,,,,126,,126,,126,126,,126,126,126,,126,126,126',
'126,,,126,126,,,126,,,126,126,,,,,,,126,,,,,,126,,,,126,126,,126,126',
',,,126,126,126,126,126,126,126,235,235,126,,235,235,,235,235,,,,,,,',
',,,,,,,,235,,,,,,235,,235,,235,235,,235,235,235,,235,235,235,235,,,235',
'235,,,235,,,235,235,,,,,,,235,,,,,,235,,,,235,235,,235,235,,,,235,235',
'235,235,235,235,235,249,249,235,,249,249,,249,249,,,,,,,,,,,,,,,,249',
',,,,,249,,249,,249,249,,249,249,249,,249,249,249,249,,,249,249,,,249',
',,249,249,,,,,,,249,,,,,,249,,,,249,249,,249,249,,,,249,249,249,249',
'249,249,249,250,250,249,,250,250,,250,250,,,,,,,,,,,,,,,,250,,,,,,250',
',250,,250,250,,250,250,250,,250,250,250,250,,,250,250,,,250,,,250,250',
',,,,,,250,,,,,,250,,,,250,250,,250,250,,,,250,250,250,250,250,250,250',
'267,267,250,,267,267,,267,,,,,,,,,,,,,,,,,267,,,,,,267,,267,,267,267',
',267,267,267,,267,267,267,267,,,267,267,,,267,,,267,267,,,,,,,267,,',
',,,267,,,,267,267,,267,267,,,,267,267,267,267,267,267,267,262,262,267',
',262,262,,262,,,,,,,,,,,,,,,,,262,,,,,,262,,262,,262,262,,262,262,262',
',262,262,262,262,,,262,262,,,262,,,262,262,,,,,,,262,,,,,,262,,,,262',
'262,,262,262,,,,262,262,262,262,262,262,262,261,261,262,,261,261,,261',
'261,,,,,,,,,,,,,,,,261,,,,,,261,,261,,261,261,,261,261,261,,261,261',
'261,261,,,261,261,,,261,,,261,261,,,,,,,261,,,,,,261,,,,261,261,,261',
'261,,,,261,261,261,261,261,261,261,251,251,261,,251,251,,251,,,,,,,',
',,,,,,,,,251,,,,,,251,,251,,251,251,,251,251,251,,251,251,,,,,251,251',
',,251,,,251,251,,,,,,,251,,,,,,251,,,,251,251,,251,251,,,,251,251,251',
'251,251,251,251,257,257,251,,257,257,,257,,,,,,,,,,,,,,,,,257,254,254',
',,254,257,,257,,257,257,,257,257,257,,257,257,257,257,,,257,257,,,257',
'337,337,257,257,337,47,47,,,47,257,,254,,,254,257,,,,257,257,,257,257',
',,,257,257,257,257,257,257,257,254,130,257,130,337,,,337,,47,254,254',
'47,130,130,130,,130,,130,130,,130,130,130,130,,337,,,,,47,,,,,337,337',
',,130,47,47,,130,130,,,130,130,130,130,130,130,,130,130,129,,129,,,130',
',,,,,,129,129,129,,129,,129,129,,129,129,129,129,,184,184,,130,184,',
',,,,,,,,129,,,,129,129,,,129,129,129,129,129,129,,129,129,127,,127,',
',129,,,184,,,184,127,127,127,,127,,127,127,,127,127,127,127,,,,,129',
',184,,,,,,,,,127,184,184,,127,127,,,127,127,127,127,127,127,228,127',
'127,,,,,,127,,,,228,228,228,228,228,,228,228,,228,228,228,228,,,,,,',
',127,,,,,,,,228,,,,228,228,,223,228,228,228,228,228,228,,228,228,,,223',
'223,223,228,223,,223,223,,223,223,223,223,,,,,,,,,,,,,,,228,223,,,,223',
'223,,353,223,223,223,223,223,223,,223,223,,,353,353,353,223,353,,353',
'353,,353,353,353,353,,,,,,,,,,,,,,,223,353,,,,353,353,,354,353,353,353',
'353,353,353,,353,353,,,354,354,354,353,354,,354,354,,354,354,354,354',
',,,,,,,,,,,,,,353,354,,,,354,354,,158,354,354,354,354,354,354,,354,354',
',,158,158,158,354,158,,158,158,,158,158,158,158,,,,,,,,,,,,,,,354,158',
',,,158,158,,355,158,158,158,158,158,158,,158,158,,,355,355,355,158,355',
',355,355,,355,355,355,355,,158,158,,,,,,,,,,,,158,355,,,,355,355,,,355',
'355,355,355,355,355,215,355,355,,,215,,,355,,,,215,215,215,,215,,215',
'215,,215,215,215,215,,,,,,,,355,,,,,,,,215,,,,215,215,,214,215,215,215',
'215,215,215,,215,215,,,214,214,214,215,214,,214,214,,214,214,214,214',
',,,,,,,,,,,,,,215,214,,,,,214,,213,214,214,214,214,214,214,,214,214',
',,213,213,213,214,213,212,213,213,,213,213,213,213,,,,,,212,212,,212',
',212,212,,212,214,213,,,,,,,,213,213,213,213,213,213,,213,213,212,,',
',,213,,211,212,212,212,212,212,212,,212,212,,,,211,211,212,211,,211',
'211,,211,213,,,,,,,,,,,,,,,,,212,211,,,,,170,,,211,211,211,211,211,211',
',211,211,170,170,170,170,170,211,170,170,,170,170,170,170,,,,,,,,,,',
',,,,,170,211,,,170,170,,210,170,170,170,170,170,170,,170,170,,,,210',
'210,170,210,,210,210,,210,,,,,,,,,,,,,,,,,,170,210,,,,,356,,,210,210',
'210,210,210,210,,210,210,356,356,356,,356,210,356,356,,356,356,356,356',
',,,,,,,,,,,,,,,356,210,,,356,356,,209,356,356,356,356,356,356,,356,356',
',,,209,209,356,209,208,209,209,,209,,,,,,,,,,208,,208,,208,208,,,356',
'209,,,,,207,,,209,209,209,209,209,209,,209,209,208,,207,,207,209,207',
'207,208,208,208,208,208,208,,208,208,,,,,,208,,,,,,207,209,,,,,,357',
'207,207,207,207,207,207,,207,207,,208,357,357,357,207,357,,357,357,',
'357,357,357,357,,,,,,,,,,,,,,,207,357,,,,357,357,,373,357,357,357,357',
'357,357,,357,357,,,373,373,373,357,373,,373,373,,373,373,373,373,,,',
',,,,,,,,,,,357,373,,,,373,373,,9,373,373,373,373,373,373,,373,373,,',
'9,9,9,373,9,,9,9,,9,9,9,9,,,,,,,,,,,,,,,373,9,,,,9,9,,195,9,9,9,9,9',
'9,,9,9,,,195,195,195,9,195,,195,195,,195,195,195,195,,,,,,,,,,,,,,,9',
'195,,,,195,195,,,195,195,195,195,195,195,,195,195,,,,,,195,,,,,,,,,',
',,,,,,,,,,,,,,195' ]
        racc_action_check = arr = ::Array.new(8602, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   328,   nil,   nil,   172,   312,   nil,   214,   312,  8461,
   607,   694,   357,   nil,   nil,   868,   955,  1042,  1129,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   207,   247,  1390,  1477,  1564,    60,  7450,   234,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  1912,  1999,  2086,   nil,
   nil,   nil,   nil,   nil,  2173,   nil,   167,   170,   nil,  2434,
   nil,   nil,   237,  2608,   222,  2782,  2869,  2956,  3043,  3130,
  3217,  3304,  3391,  3478,  3565,  3652,  3739,  3826,  3913,  4000,
  4087,  4174,  4261,  4348,  4435,  4522,  4609,  4696,  4783,  4870,
  4957,  5044,  5131,  5218,  5305,   179,   198,  5566,  5653,   196,
   183,  5914,   164,   nil,   nil,   nil,   nil,   nil,  1220,   368,
  1133,  1214,   104,   nil,   121,   696,  6697,  7590,   nil,  7533,
  7476,    67,    77,   nil,    53,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   110,   nil,   119,   nil,    57,   nil,   nil,
   175,   nil,   102,   nil,   nil,    96,  2695,   517,  7832,  2347,
   nil,   238,   nil,   nil,   nil,   nil,   258,   265,   268,   297,
  8136,   311,  2260,    -9,    -1,     2,  1825,  1303,   520,   nil,
   nil,     7,   281,   270,  7564,   321,     9,    -2,    -4,   nil,
   nil,   nil,   nil,   nil,   nil,  8508,    18,   785,   263,   524,
   437,   176,   518,   350,   611,    89,     2,  8320,  8292,  8275,
  8183,  8091,  8044,  8027,  7980,  7933,   nil,   nil,  2521,   231,
   155,   nil,  1020,  7691,   171,   nil,   179,   152,  7644,   nil,
   151,   nil,    91,   nil,   nil,  6784,   nil,   164,   nil,   nil,
   nil,   nil,   nil,   149,   125,   -24,   126,   -11,   nil,  6871,
  6958,  7306,   111,    75,  7418,   -28,    20,  7393,    32,    61,
   nil,  7219,  7132,   nil,   nil,   nil,   nil,  7045,   nil,   nil,
   nil,   nil,    87,   nil,   nil,   nil,   nil,    92,    98,   846,
   106,   933,  6610,  6523,  6436,   nil,  6349,  6262,   124,   nil,
   112,   nil,   137,   nil,   142,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   147,
  6175,   672,   157,   nil,   147,   nil,   167,   175,   nil,   115,
   107,  6088,   nil,   nil,  6001,  5827,   nil,   183,   -15,   185,
   167,    -7,  5740,   nil,  5479,   201,   nil,  7445,   nil,   nil,
  5392,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,    -2,
   214,   nil,   nil,  7738,  7785,  7879,  8228,  8367,   238,  1738,
   181,   243,   nil,   nil,   251,  1651,   nil,   nil,   nil,   245,
   nil,   nil,   nil,  8414,     9,    70,   nil,  1216,   281,   259,
   nil,   285,   288,   nil,   nil,   291,   nil,   nil,   781,   nil,
   303,   nil,   nil,   304,   275,   nil,   nil,   nil,   nil,   nil,
   310,   nil,   nil,   nil,   nil,   433,   nil,   346,   259,   nil,
   316,   nil,   nil,   nil,    85,   nil,   321,   nil,   325,   nil,
   328,   nil,   nil,   nil,   297,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -247,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -247,  -247,  -247,   -33,   -34,  -247,  -247,  -247,  -247,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -87,   -91,  -247,  -247,  -247,  -247,  -247,  -247,  -178,
  -179,  -180,  -181,  -182,  -183,  -184,  -247,  -247,  -247,  -195,
  -196,  -197,  -198,  -199,  -247,  -201,  -247,  -214,  -217,  -247,
  -222,  -223,  -247,  -247,    -7,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -127,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -247,  -122,  -246,  -246,   -22,
   -23,  -247,  -246,  -137,  -159,  -160,  -161,  -162,   -46,  -247,
   -47,   -54,  -247,   -88,  -247,  -247,  -247,  -247,   -98,  -247,
  -247,  -246,  -224,  -146,  -148,  -149,  -150,  -151,  -152,  -154,
  -155,  -246,   -14,  -224,  -186,  -224,  -188,  -247,  -191,  -192,
  -247,  -200,  -247,  -205,  -208,  -247,  -212,  -247,  -247,  -247,
   429,    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,
  -247,  -224,  -247,   -80,   -81,   -82,  -235,  -241,  -229,  -128,
  -131,  -247,  -232,  -230,  -238,  -244,  -179,  -180,  -181,  -228,
  -233,  -234,  -236,  -237,  -239,   -59,  -247,   -36,   -37,   -38,
   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -48,   -49,   -50,
   -51,   -52,   -53,   -55,   -56,  -247,   -57,  -116,  -247,  -224,
   -84,   -92,  -127,  -126,  -247,  -125,  -247,  -226,  -247,   -28,
  -246,  -163,  -247,   -58,   -93,  -247,   -96,  -224,  -166,  -168,
  -169,  -170,  -171,  -173,  -247,  -247,  -176,  -247,   -90,  -247,
  -247,  -247,  -247,  -246,  -225,  -247,  -247,  -225,  -247,  -247,
  -189,  -247,  -247,  -202,  -203,  -204,  -206,  -247,  -209,  -210,
  -211,  -213,  -224,  -215,  -218,  -220,  -221,    -8,  -247,  -127,
  -247,  -225,  -247,  -247,  -247,   -35,  -247,  -247,  -224,  -118,
  -247,   -86,  -224,  -130,  -247,  -229,  -230,  -231,  -232,  -235,
  -238,  -240,  -241,  -242,  -243,  -244,  -245,  -123,  -124,  -247,
  -227,  -127,  -247,  -140,  -247,  -164,  -224,  -247,   -95,  -247,
  -225,  -247,  -174,  -175,  -247,  -247,   -89,  -247,  -101,  -247,
  -107,  -247,  -247,  -111,  -246,  -247,  -156,  -247,  -147,  -153,
  -246,   -15,  -185,  -187,  -190,  -193,  -194,  -207,  -247,  -247,
  -224,   -26,  -129,  -134,  -132,  -133,   -60,  -120,  -247,  -225,
   -83,  -247,   -25,   -29,  -224,  -246,  -141,  -142,  -143,  -247,
   -94,   -97,  -167,  -172,  -247,  -101,  -100,  -247,  -247,  -107,
  -106,  -247,  -247,  -110,  -112,  -247,  -138,  -139,  -247,  -157,
  -247,  -216,  -219,  -247,   -30,  -117,  -119,   -85,  -121,   -27,
  -247,  -165,  -177,   -99,  -102,  -247,  -105,  -247,  -246,  -135,
  -247,  -145,  -158,   -24,   -31,  -136,  -247,  -104,  -247,  -109,
  -247,  -114,  -115,  -144,  -226,  -103,  -108,  -113,   -32 ]

racc_goto_table = [
     2,   118,   120,   121,   123,   227,   217,   135,   137,   151,
   171,   131,   309,   141,   196,   237,   246,   274,   338,   225,
   225,   333,    74,   230,   224,   226,   253,   385,   420,   127,
   129,   130,   332,   390,   288,   404,   352,   258,   234,   259,
   109,   110,   252,   376,   143,   145,   380,   272,   246,   216,
   363,   312,   256,   366,   335,   158,   393,   339,   400,   372,
   122,   323,   322,   345,   268,   280,   269,     3,   266,   170,
   195,   197,   198,   199,   200,   201,   202,   203,   204,   205,
   206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
   403,   161,   219,   223,   223,   406,   267,   228,   142,   142,
   150,   389,   384,   265,   154,   156,   153,   270,     1,   166,
   167,   168,   169,   290,   247,   nil,   nil,   162,   163,   164,
   165,   289,   316,   246,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   319,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   313,   nil,   135,   137,   142,   131,   nil,   292,
   141,   nil,   nil,   nil,   nil,   nil,   271,   nil,   120,   278,
   nil,   nil,   127,   129,   130,   336,   348,   nil,   142,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   358,   291,   nil,   nil,   361,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   277,   nil,   nil,   215,   nil,   350,   nil,   392,   428,
   369,   246,   347,   nil,   135,   137,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   317,   nil,   195,   364,   nil,
   nil,   nil,   nil,   nil,   394,   nil,   387,   nil,   nil,   327,
   329,   nil,   387,   nil,   374,   nil,   nil,   nil,   399,   nil,
   nil,   nil,   396,   nil,   nil,   nil,   nil,   nil,   353,   354,
   355,   nil,   356,   357,   nil,   nil,   nil,   387,   nil,   367,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   228,   135,   137,   341,
   nil,   nil,   nil,   150,   346,   nil,   nil,   373,   424,   153,
   195,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,
   421,   nil,   nil,   397,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   127,   nil,   nil,   nil,   341,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   410,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   228,   nil,   nil,   nil,   nil,   416,   nil,   418,   422 ]

racc_goto_check = [
     2,    10,    10,    10,    38,    13,    51,    36,    35,    81,
    11,    58,    14,    58,    19,    43,    37,    89,    66,    50,
    50,    48,     5,    59,    54,    54,    15,    60,    49,    10,
    10,    10,    47,    60,    52,    44,    55,    15,    42,    15,
     9,     9,    59,    45,     8,     8,    46,    43,    37,    20,
    16,    62,    59,    63,    65,    10,    12,    68,    60,    69,
     6,    70,    72,    76,    77,    15,    78,     3,    82,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    45,     5,     8,    10,    10,    46,    83,    10,     6,     6,
     6,    66,    48,    85,    86,    87,     6,    88,     1,     9,
     9,     9,     9,    15,     8,   nil,   nil,     6,     6,     6,
     6,    51,    43,    37,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,   nil,    36,    35,     6,    58,   nil,    11,
    58,   nil,   nil,   nil,   nil,   nil,     2,   nil,    10,     2,
   nil,   nil,    10,    10,    10,    50,    15,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,    38,   nil,   nil,    15,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     6,   nil,   nil,    10,   nil,    11,   nil,    89,    14,
    15,    37,    81,   nil,    36,    35,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,    10,    11,   nil,
   nil,   nil,   nil,   nil,    15,   nil,    50,   nil,   nil,     2,
     2,   nil,    50,   nil,    19,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    51,   nil,   nil,   nil,   nil,   nil,    10,    10,
    10,   nil,    10,    10,   nil,   nil,   nil,    50,   nil,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,    36,    35,     6,
   nil,   nil,   nil,     6,     6,   nil,   nil,    10,    13,     6,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
    50,   nil,   nil,    38,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   108,     0,    67,   nil,    18,    42,   nil,   -12,    30,
   -14,   -73,  -294,  -106,  -215,  -106,  -260,   nil,   nil,   -70,
   -54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -39,   -40,  -109,   -37,   nil,
   nil,   nil,   -86,  -110,  -342,  -285,  -284,  -219,  -230,  -380,
   -88,   -97,  -184,   nil,   -83,  -245,   nil,   nil,   -35,   -89,
  -307,   nil,  -179,  -261,   nil,  -199,  -236,   nil,  -198,  -261,
  -184,   nil,  -182,   nil,   nil,   nil,  -198,   -91,   -89,   nil,
   nil,   -55,   -84,   -56,   nil,   -49,    38,    38,   -49,  -141 ]

racc_goto_default = [
   nil,   nil,   386,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   229,    13,    14,   331,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,   nil,    41,
    42,   124,   nil,   nil,   128,   nil,   nil,   nil,   nil,   nil,
   231,   nil,   nil,   106,   nil,   179,   181,   180,   113,   nil,
   nil,   112,   nil,   nil,   132,   nil,   133,   134,   138,   238,
   239,   240,   241,   242,   245,   147,   149,    59,    60,    61,
    64,   nil,   nil,   nil,   152,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 95, :_reduce_1,
  1, 95, :_reduce_2,
  0, 95, :_reduce_3,
  1, 96, :_reduce_4,
  1, 98, :_reduce_5,
  3, 98, :_reduce_6,
  2, 98, :_reduce_7,
  1, 99, :_reduce_8,
  3, 99, :_reduce_9,
  1, 100, :_reduce_none,
  3, 100, :_reduce_11,
  3, 100, :_reduce_12,
  3, 100, :_reduce_13,
  1, 102, :_reduce_14,
  3, 102, :_reduce_15,
  1, 101, :_reduce_none,
  3, 101, :_reduce_17,
  3, 101, :_reduce_18,
  3, 101, :_reduce_19,
  3, 101, :_reduce_20,
  1, 103, :_reduce_none,
  2, 103, :_reduce_22,
  2, 103, :_reduce_23,
  7, 103, :_reduce_24,
  5, 103, :_reduce_25,
  5, 103, :_reduce_26,
  4, 110, :_reduce_27,
  1, 107, :_reduce_28,
  3, 107, :_reduce_29,
  1, 106, :_reduce_30,
  2, 106, :_reduce_31,
  4, 106, :_reduce_32,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  4, 104, :_reduce_35,
  3, 104, :_reduce_36,
  3, 104, :_reduce_37,
  3, 104, :_reduce_38,
  3, 104, :_reduce_39,
  3, 104, :_reduce_40,
  3, 104, :_reduce_41,
  3, 104, :_reduce_42,
  3, 104, :_reduce_43,
  3, 104, :_reduce_44,
  3, 104, :_reduce_45,
  2, 104, :_reduce_46,
  2, 104, :_reduce_47,
  3, 104, :_reduce_48,
  3, 104, :_reduce_49,
  3, 104, :_reduce_50,
  3, 104, :_reduce_51,
  3, 104, :_reduce_52,
  3, 104, :_reduce_53,
  2, 104, :_reduce_54,
  3, 104, :_reduce_55,
  3, 104, :_reduce_56,
  3, 104, :_reduce_57,
  3, 104, :_reduce_58,
  1, 113, :_reduce_59,
  3, 113, :_reduce_60,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_78,
  1, 111, :_reduce_79,
  1, 111, :_reduce_80,
  1, 111, :_reduce_81,
  1, 111, :_reduce_82,
  5, 112, :_reduce_83,
  3, 112, :_reduce_84,
  6, 112, :_reduce_85,
  4, 112, :_reduce_86,
  1, 116, :_reduce_87,
  2, 116, :_reduce_88,
  4, 133, :_reduce_89,
  3, 133, :_reduce_90,
  1, 133, :_reduce_91,
  3, 134, :_reduce_92,
  2, 132, :_reduce_93,
  3, 136, :_reduce_94,
  2, 136, :_reduce_95,
  2, 135, :_reduce_96,
  4, 135, :_reduce_97,
  2, 119, :_reduce_98,
  5, 138, :_reduce_99,
  4, 138, :_reduce_100,
  0, 139, :_reduce_none,
  2, 139, :_reduce_102,
  4, 139, :_reduce_103,
  3, 139, :_reduce_104,
  6, 120, :_reduce_105,
  5, 120, :_reduce_106,
  0, 140, :_reduce_none,
  4, 140, :_reduce_108,
  3, 140, :_reduce_109,
  5, 118, :_reduce_110,
  1, 141, :_reduce_111,
  2, 141, :_reduce_112,
  5, 142, :_reduce_113,
  1, 143, :_reduce_none,
  1, 143, :_reduce_none,
  1, 114, :_reduce_none,
  4, 114, :_reduce_117,
  1, 146, :_reduce_118,
  3, 146, :_reduce_119,
  3, 145, :_reduce_120,
  6, 117, :_reduce_121,
  2, 117, :_reduce_122,
  3, 147, :_reduce_123,
  3, 147, :_reduce_124,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  0, 105, :_reduce_127,
  1, 105, :_reduce_128,
  3, 105, :_reduce_129,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  3, 149, :_reduce_132,
  3, 149, :_reduce_133,
  3, 149, :_reduce_134,
  6, 121, :_reduce_135,
  7, 122, :_reduce_136,
  1, 155, :_reduce_137,
  1, 154, :_reduce_none,
  1, 154, :_reduce_none,
  1, 156, :_reduce_none,
  2, 156, :_reduce_141,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  7, 123, :_reduce_144,
  6, 123, :_reduce_145,
  1, 158, :_reduce_146,
  3, 158, :_reduce_147,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_150,
  1, 160, :_reduce_none,
  1, 161, :_reduce_152,
  3, 161, :_reduce_153,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  1, 159, :_reduce_none,
  2, 159, :_reduce_157,
  6, 125, :_reduce_158,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 152, :_reduce_162,
  1, 153, :_reduce_163,
  2, 153, :_reduce_164,
  4, 153, :_reduce_165,
  1, 137, :_reduce_166,
  3, 137, :_reduce_167,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 166, :_reduce_172,
  1, 166, :_reduce_173,
  2, 167, :_reduce_174,
  2, 165, :_reduce_175,
  1, 168, :_reduce_176,
  4, 168, :_reduce_177,
  1, 115, :_reduce_178,
  1, 126, :_reduce_179,
  1, 126, :_reduce_180,
  1, 126, :_reduce_181,
  1, 126, :_reduce_182,
  1, 126, :_reduce_183,
  1, 126, :_reduce_184,
  4, 127, :_reduce_185,
  2, 127, :_reduce_186,
  4, 127, :_reduce_187,
  2, 127, :_reduce_188,
  3, 128, :_reduce_189,
  4, 128, :_reduce_190,
  2, 128, :_reduce_191,
  1, 169, :_reduce_192,
  3, 169, :_reduce_193,
  3, 170, :_reduce_194,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 171, :_reduce_198,
  1, 171, :_reduce_199,
  2, 172, :_reduce_200,
  1, 174, :_reduce_201,
  1, 176, :_reduce_202,
  1, 177, :_reduce_203,
  2, 175, :_reduce_204,
  1, 178, :_reduce_205,
  1, 179, :_reduce_206,
  2, 179, :_reduce_207,
  2, 173, :_reduce_208,
  2, 180, :_reduce_209,
  2, 180, :_reduce_210,
  3, 97, :_reduce_211,
  0, 182, :_reduce_none,
  1, 182, :_reduce_none,
  0, 181, :_reduce_214,
  2, 181, :_reduce_215,
  4, 181, :_reduce_216,
  1, 124, :_reduce_217,
  3, 124, :_reduce_218,
  5, 124, :_reduce_219,
  1, 183, :_reduce_none,
  1, 183, :_reduce_none,
  1, 131, :_reduce_222,
  1, 129, :_reduce_223,
  0, 109, :_reduce_none,
  1, 109, :_reduce_225,
  0, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  1, 151, :_reduce_none,
  0, 144, :_reduce_246 ]

racc_reduce_n = 247

racc_shift_n = 429

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :APPLICATION_R => 86,
  :CONSUMES_R => 87,
  :PRODUCES_R => 88,
  :LOW => 89,
  :HIGH => 90,
  :LISTSTART => 91,
  :SPLAT => 92,
  :MODULO => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "APPLICATION_R",
  "CONSUMES_R",
  "PRODUCES_R",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "function_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 128)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 139)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 146)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 155)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 177)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 180)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 181)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 229)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_78(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_79(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 252)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 253)
  def _reduce_81(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_82(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_86(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 284)
  def _reduce_87(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_88(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 288)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 289)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 290)
  def _reduce_91(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_92(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 302)
  def _reduce_93(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_94(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 308)
  def _reduce_95(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_97(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_98(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 328)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_100(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_102(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_103(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 348)
  def _reduce_104(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 355)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_106(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 107 omitted

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_108(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_109(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 380)
  def _reduce_110(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_111(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_112(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 392)
  def _reduce_113(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

module_eval(<<'.,.,', 'egrammar.ra', 408)
  def _reduce_117(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_118(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_119(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_120(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 429)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 433)
  def _reduce_122(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_123(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 439)
  def _reduce_124(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_127(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_128(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_129(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 470)
  def _reduce_133(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 474)
  def _reduce_134(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_135(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 497)
  def _reduce_136(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 507)
  def _reduce_137(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'egrammar.ra', 516)
  def _reduce_141(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 533)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 537)
  def _reduce_145(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 547)
  def _reduce_146(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 548)
  def _reduce_147(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_150(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 151 omitted

module_eval(<<'.,.,', 'egrammar.ra', 559)
  def _reduce_152(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_153(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 569)
  def _reduce_157(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_158(val, _values, result)
          result = add_definition(Factory.FUNCTION(val[1][:value], val[2], val[4]))
      loc result, val[0], val[5]
    
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 586)
  def _reduce_162(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_163(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 591)
  def _reduce_164(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_165(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 596)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 609)
  def _reduce_172(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 610)
  def _reduce_173(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_174(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_175(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_177(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_178(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_180(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_187(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_188(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_191(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_193(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_194(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_200(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_204(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_205(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_206(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_207(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_208(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 686)
  def _reduce_211(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'egrammar.ra', 693)
  def _reduce_214(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_215(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_222(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 709)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_225(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_246(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
