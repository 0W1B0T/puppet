#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 763)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'58,61,319,-231,59,53,397,54,238,80,-243,-242,301,381,-245,111,320,-244',
'107,269,270,277,380,101,18,104,398,99,100,239,42,280,45,135,47,12,-240',
'46,36,39,121,44,37,10,11,-231,113,66,17,103,110,38,-243,-242,15,16,-245',
'251,112,-244,58,61,67,278,59,53,136,54,43,111,314,81,35,62,111,64,65',
'63,-240,256,48,49,51,50,18,345,52,-133,111,338,42,279,45,347,47,115',
'280,46,36,39,113,44,37,254,110,113,255,66,17,110,275,38,112,79,15,16',
'374,112,373,113,58,61,67,110,59,53,238,54,43,-133,79,112,35,62,111,64',
'65,258,257,66,48,49,51,50,18,79,52,239,79,374,42,373,45,71,47,12,355',
'46,36,39,69,44,37,10,11,113,356,66,17,110,275,38,58,61,15,16,59,112',
'276,358,58,61,67,302,59,53,304,54,43,72,73,74,35,62,111,64,65,361,256',
'314,48,49,51,50,18,366,52,367,334,331,42,251,45,251,47,12,371,46,36',
'39,308,44,37,10,11,113,375,66,17,110,377,38,364,250,15,16,249,112,75',
'77,76,78,67,314,227,385,238,230,43,387,318,275,35,62,228,64,65,238,227',
'66,48,49,51,50,58,61,52,239,59,53,66,54,324,79,79,217,391,216,239,121',
'394,231,275,71,339,155,315,238,18,58,61,309,267,59,42,152,45,401,47',
'12,238,46,36,39,377,44,37,10,11,403,404,66,17,66,150,38,406,122,15,16',
'409,239,410,411,121,79,67,71,135,419,68,132,43,421,422,423,35,62,304',
'64,65,,,,48,49,51,50,58,61,52,67,59,53,,54,415,80,,,,136,62,,,,,,,,',
'101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,103',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,81,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,121,,,35,62,,64,65,,,,48,49,51,50,18,,52',
',,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,,,',
',43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,413,,,,,,,,,',
',,,,,,18,58,61,,,59,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,,,67,,135,,,132,43,,,,35,62,,64,65,,,,48,49,51,50,58,61',
'52,67,59,53,,54,408,80,,,,136,62,,,,,,,,,101,18,104,,99,100,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,',
'59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52',
',59,53,,54,340,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43',
',,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,139,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,141,54,43,,,,35,62,,64,65,',
',,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52',
',59,53,,54,143,80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43',
',,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,121,,,35,62,,64,65,,,,48,49',
'51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,,154,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52',
',,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47',
'12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,',
'54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,',
',,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52',
',,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66',
'17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,171,185,177,186,47,178,188,179,36,170,,173,168,,,,,66,17,189,184',
'169,,,15,167,,,,,,,67,,,,,187,172,,,,35,62,,64,65,,,,180,181,183,182',
'58,61,52,80,59,53,,54,,,,,,,,,,101,,104,,99,100,,18,,,,,,42,,45,,47',
'115,,46,36,39,,44,37,103,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,',
'54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,213,35,62,,64,65,,,,48,49,51,50,18,215,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,276,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,243,52,,,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64',
'65,,,,48,49,51,50,58,61,52,,59,53,,54,143,,,,,,,,,,,,,,,,18,58,61,,',
'59,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67',
',135,,,132,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,67,59,53,,54,322',
',,,,136,62,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66',
'17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,',
',,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,378',
',,,,,,,,,,,,,,,18,,,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,121,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,115,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,115',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64',
'65,,,,48,49,51,50,58,61,52,,59,53,,54,312,80,,,,,,,,,,,,,,101,18,104',
',99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,,15,16',
',84,85,87,86,,67,,82,83,,,43,,,81,35,62,,64,65,80,,,48,49,51,50,,,52',
',,96,91,101,88,104,80,99,100,,92,94,93,95,,,,,,91,101,,104,,99,100,',
'92,,103,,,58,61,,,59,84,85,87,86,89,90,,82,83,103,,,,,81,,,84,85,87',
'86,89,90,,82,83,80,,,,,81,,,135,88,,132,96,91,101,,104,,99,100,,92,94',
'93,95,,88,,,,,67,,,,,,,,,103,136,62,,98,97,,,84,85,87,86,89,90,,82,83',
'80,,246,,,81,,,,,,,96,91,101,,104,,99,100,,92,94,93,95,,88,,,,,,,,,',
',,,,103,,,,98,97,,,84,85,87,86,89,90,,82,83,80,,245,,,81,,,,,,,96,91',
'101,,104,80,99,100,,92,94,93,95,,88,,,,,101,,104,,99,100,,,,103,,,,98',
'97,,80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,,92,94',
'93,95,82,83,,,,,,81,,,,88,,,,103,,,,98,97,,,84,85,87,86,89,90,,82,83',
',,,,,81,80,,244,,,,,,,,269,270,96,91,101,,104,80,99,100,88,92,94,93',
'95,,,,,,91,101,,104,,99,100,,92,,103,,,,98,97,,,84,85,87,86,89,90,,82',
'83,103,,,,,81,,,84,85,87,86,89,90,,82,83,80,,,,,81,,,,88,,,96,91,101',
',104,80,99,100,,92,94,93,95,,88,,,,,101,,104,,99,100,,,,103,,,,98,97',
',80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,,92,94,93',
'95,82,83,,,,,,81,,,,88,,,,103,,,,98,97,,,84,85,87,86,89,90,80,82,83',
',,,,,81,,,,96,91,101,305,104,80,99,100,,92,94,93,95,,,,,88,91,101,,104',
',99,100,,92,,103,,,,98,97,,,84,85,87,86,89,90,,82,83,103,,,,,81,,,84',
'85,87,86,89,90,,82,83,80,,,,,81,,,,88,,,96,91,101,273,104,80,99,100',
',92,94,93,95,,88,,,,91,101,,104,,99,100,,92,,103,,,,98,97,,,84,85,87',
'86,89,90,,82,83,103,,,,,81,,,84,85,87,86,89,90,80,82,83,,,,,,81,,,,88',
',101,,104,,99,100,80,,,,,,,,,88,,,96,91,101,,104,,99,100,103,92,94,93',
'95,80,,,84,85,87,86,89,90,,82,83,,,101,103,104,81,99,100,97,,,84,85',
'87,86,89,90,,82,83,,,,,,81,88,,103,,,,,,,80,84,85,87,86,89,90,,82,83',
',88,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98',
'97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93',
'95,,,,,,,,,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91',
'101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,80,84',
'85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,',
',,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,,80,101,81,104',
',99,100,,,,,,,,101,,104,,99,100,,,,88,,,,103,,,,,,,,84,85,87,86,,103',
',82,83,,80,,,,81,87,86,,,,82,83,,,101,,104,81,99,100,,,,80,,88,,,281',
',,,,,,96,91,101,88,104,103,99,100,,92,94,93,95,,,87,86,,,,82,83,,,,',
',81,103,,,,98,97,,,84,85,87,86,89,90,80,82,83,,,,88,,81,,,,96,91,101',
',104,80,99,100,,92,94,93,95,,,,,88,,101,,104,,99,100,,,,103,,,,98,97',
',80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104,,99,100,,92,94,93',
'95,82,83,,,,,,81,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83',
',,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97',
',,84,85,87,86,89,90,,82,83,,,,,,81,,,293,185,292,186,,290,188,294,,287',
',289,291,,,,,,88,189,184,295,,,,288,,,,,,,,,,,,187,296,,,,,,,,,,,,299',
'300,298,297,293,185,292,186,,290,188,294,,287,,289,291,,,,,,,189,184',
'295,,,,288,,,,,,,,,,,,187,296,,,,,,,,,,,,299,300,298,297,293,185,292',
'186,,290,188,294,,287,,289,291,,,,,,,189,184,295,,,,288,,,,,,,,,,,,187',
'296,,,,,,,,,,,,299,300,298,297,293,185,292,186,,290,188,294,,287,,289',
'291,,,,,,,189,184,295,,,,288,,,,,,,,,,,,187,296,,,,,,,,,,,,299,300,298',
'297' ]
        racc_action_table = arr = ::Array.new(6849, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,242,168,0,0,365,0,240,194,183,182,219,328,181,12,242,180,12,345',
'345,176,328,194,0,194,370,194,194,240,0,370,0,250,0,0,169,0,0,0,215',
'0,0,0,0,168,12,0,0,194,12,0,183,182,0,0,181,214,12,180,410,410,0,176',
'410,410,250,410,0,115,266,194,0,0,45,0,0,0,169,271,0,0,0,0,410,272,0',
'170,178,252,410,191,410,274,410,410,191,410,410,410,115,410,410,142',
'115,45,142,410,410,45,166,410,115,164,410,410,371,45,371,178,4,4,410',
'178,4,4,314,4,410,170,163,178,410,410,177,410,410,147,147,314,410,410',
'410,410,4,162,410,314,161,322,4,322,4,156,4,4,282,4,4,4,4,4,4,4,4,177',
'284,4,4,177,286,4,150,150,4,4,150,177,288,303,404,404,4,221,404,404',
'222,404,4,7,7,7,4,4,308,4,4,306,145,310,4,4,4,4,404,311,4,313,248,247',
'404,140,404,138,404,404,321,404,404,404,225,404,404,404,404,308,323',
'404,404,308,324,404,308,130,404,404,128,308,7,7,7,7,404,232,127,332',
'121,120,404,344,241,346,404,404,118,404,404,152,108,121,404,404,404',
'404,245,245,404,121,245,245,152,245,245,106,105,102,354,101,152,356',
'357,121,360,70,253,68,238,239,245,179,179,227,152,179,245,63,245,374',
'245,245,227,245,245,245,375,245,245,245,245,377,380,245,245,227,62,245',
'382,41,245,245,389,227,390,396,40,8,245,5,179,407,1,179,245,412,414',
'416,245,245,420,245,245,,,,245,245,245,245,403,403,245,179,403,403,',
'403,403,193,,,,179,179,,,,,,,,,193,403,193,,193,193,,403,,403,,403,403',
',403,403,403,,403,403,403,403,,,403,403,193,,403,,,403,403,,,,,246,246',
'403,,246,246,,246,403,,,193,403,403,,403,403,,,,403,403,403,403,246',
',403,,,,246,,246,,246,246,,246,246,246,,246,246,,,,,246,246,,,246,,',
'246,246,,,,,10,10,246,,10,10,,10,246,246,,,246,246,,246,246,,,,246,246',
'246,246,10,,246,,,,10,,10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10',
',,10,10,,,,,11,11,10,,11,11,,11,10,,,,10,10,,10,10,,,,10,10,10,10,11',
',10,,,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,',
',251,251,11,,251,251,,251,11,,,,11,11,,11,11,,,,11,11,11,11,251,,11',
',,,251,,251,,251,251,,251,251,251,,251,251,251,251,,,251,251,,,251,',
',251,251,,,,,15,15,251,,15,15,,15,251,,,,251,251,,251,251,,,,251,251',
'251,251,15,,251,,,,15,,15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15',
'15,,,,,16,16,15,,16,16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,15',
',,,16,,16,,16,16,,16,16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16',
',17,17,,17,16,,,,16,16,,16,16,,,,16,16,16,16,17,,16,,,,17,,17,,17,17',
',17,17,17,,17,17,,,,,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,',
',,17,17,,17,17,,,,17,17,17,17,18,,17,,,,18,,18,,18,18,,18,18,18,,18',
'18,18,18,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18',
'18,18,18,401,401,18,,401,401,,401,401,,,,,,,,,,,,,,,,401,334,334,,,334',
'401,,401,,401,401,,401,401,401,,401,401,401,401,,,401,401,,,401,,,401',
'401,,,,,,,401,,334,,,334,401,,,,401,401,,401,401,,,,401,401,401,401',
'385,385,401,334,385,385,,385,385,114,,,,334,334,,,,,,,,,114,385,114',
',114,114,,385,,385,,385,385,,385,385,385,,385,385,385,385,,,385,385',
'114,,385,,,385,385,,,,,42,42,385,,42,42,,42,385,,,,385,385,,385,385',
',,,385,385,385,385,42,,385,,,,42,,42,,42,42,,42,42,42,,42,42,,,,,42',
'42,,,42,,,42,42,,,,,43,43,42,,43,43,,43,42,,,,42,42,,42,42,,,,42,42',
'42,42,43,,42,,,,43,,43,,43,43,,43,43,43,,43,43,,,,,43,43,,,43,,,43,43',
',,,,44,44,43,,44,44,,44,43,,,,43,43,,43,43,,,,43,43,43,43,44,,43,,,',
'44,,44,,44,44,,44,44,44,,44,44,,,,,44,44,,,44,,,44,44,,,,,,,44,,,,,',
'44,,,,44,44,,44,44,,,,44,44,44,44,255,255,44,,255,255,,255,255,116,',
',,,,,,,,,,,,116,255,116,,116,116,,255,,255,,255,255,,255,255,255,,255',
'255,255,255,,,255,255,116,,255,,,255,255,,,,,256,256,255,,256,256,,256',
'255,,,,255,255,,255,255,,,,255,255,255,255,256,,255,,,,256,,256,,256',
'256,,256,256,256,,256,256,256,256,,,256,256,,,256,,,256,256,,,,,52,52',
'256,,52,52,52,52,256,,,,256,256,,256,256,,,,256,256,256,256,52,,256',
',,,52,,52,,52,52,,52,52,52,,52,52,52,52,,,52,52,,,52,,,52,52,,,,,53',
'53,52,,53,53,53,53,52,,,,52,52,,52,52,,,,52,52,52,52,53,,52,,,,53,,53',
',53,53,,53,53,53,,53,53,53,53,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53',
',,,53,53,,53,53,,,,53,53,53,53,54,54,53,,54,54,,54,54,192,,,,,,,,,,',
',,,192,54,192,,192,192,,54,,54,,54,54,,54,54,54,,54,54,54,54,,,54,54',
'192,,54,,,54,54,,,,,60,60,54,,60,60,,60,54,,,,54,54,,54,54,,,,54,54',
'54,54,60,,54,,,,60,,60,,60,60,,60,60,60,,60,60,60,60,,,60,60,,,60,,',
'60,60,,,,,381,381,60,,381,381,,381,60,,,,60,60,,60,60,,,,60,60,60,60',
'381,,60,,,,381,,381,,381,381,,381,381,381,,381,381,,,,,381,381,,,381',
',,381,381,,,,,373,373,381,,373,373,,373,381,381,,,381,381,,381,381,',
',,381,381,381,381,373,,381,,,,373,,373,,373,373,,373,373,373,,373,373',
',,,,373,373,,,373,,,373,373,,,,,65,65,373,,65,65,,65,373,,,,373,373',
',373,373,,,,373,373,373,373,65,,373,,,,65,,65,,65,65,,65,65,65,,65,65',
',,,,65,65,,,65,,,65,65,,,,,261,261,65,,261,261,,261,65,,,,65,65,,65',
'65,,,,65,65,65,65,261,,65,,,,261,,261,,261,261,,261,261,261,,261,261',
'261,261,,,261,261,,,261,,,261,261,,,,,69,69,261,,69,69,,69,261,,,,261',
'261,,261,261,,,,261,261,261,261,69,,261,,,,69,,69,,69,69,,69,69,69,',
'69,69,69,69,,,69,69,,,69,,,69,69,,,,,361,361,69,,361,361,,361,69,,,',
'69,69,,69,69,,,,69,69,69,69,361,,69,,,,361,,361,,361,361,,361,361,361',
',361,361,361,361,,,361,361,,,361,,,361,361,,,,,71,71,361,,71,71,,71',
'361,,,,361,361,,361,361,,,,361,361,361,361,71,,361,,,,71,,71,,71,71',
',71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,72,72,71,,72,72,,72',
'71,,,,71,71,,71,71,,,,71,71,71,71,72,,71,,,,72,,72,,72,72,,72,72,72',
',72,72,72,72,,,72,72,,,72,,,72,72,,,,,73,73,72,,73,73,,73,72,,,,72,72',
',72,72,,,,72,72,72,72,73,,72,,,,73,,73,,73,73,,73,73,73,,73,73,73,73',
',,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,,74,73,,,,73,73,,73,73,,,,73',
'73,73,73,74,,73,,,,74,,74,,74,74,,74,74,74,,74,74,74,74,,,74,74,,,74',
',,74,74,,,,,75,75,74,,75,75,,75,74,,,,74,74,,74,74,,,,74,74,74,74,75',
',74,,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75,,,75,,,75,75,,,',
',76,76,75,,76,76,,76,75,,,,75,75,,75,75,,,,75,75,75,75,76,,75,,,,76',
',76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76,76,,,,,77,77,76',
',77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,,76,,,,77,,77,,77,77',
',77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78,78,77,,78,78,,78',
'77,,,,77,77,,77,77,,,,77,77,77,77,78,,77,,,,78,,78,,78,78,,78,78,78',
',78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79,79,,79,78,,,,78,78',
',78,78,,,,78,78,78,78,79,,78,,,,79,79,79,79,79,79,79,79,79,79,,79,79',
',,,,79,79,79,79,79,,,79,79,,,,,,,79,,,,,79,79,,,,79,79,,79,79,,,,79',
'79,79,79,80,80,79,117,80,80,,80,,,,,,,,,,117,,117,,117,117,,80,,,,,',
'80,,80,,80,80,,80,80,80,,80,80,117,,,,80,80,,,80,,,80,80,,,,,81,81,80',
',81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81,,80,,,,81,,81,,81,81',
',81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,82,82,81,,82,82,,82,81,',
',,81,81,,81,81,,,,81,81,81,81,82,,81,,,,82,,82,,82,82,,82,82,82,,82',
'82,,,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,,83,82,,,,82,82,,82,82',
',,,82,82,82,82,83,,82,,,,83,,83,,83,83,,83,83,83,,83,83,,,,,83,83,,',
'83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83,,83,83,,,,83,83,83,83',
'84,,83,,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84,84,,,84,,,84,84,,,,',
'85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84,84,84,85,,84,,,,85,',
'85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85,,,,,86,86,85,,86,86',
',86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,85,,,,86,,86,,86,86,,86,86',
'86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,,87,87,,87,86,,,,86,86',
',86,86,,,,86,86,86,86,87,,86,,,,87,,87,,87,87,,87,87,87,,87,87,,,,,87',
'87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,,,,87,87,,87,87,,,,87,87',
'87,87,88,,87,,,,88,,88,,88,88,,88,88,88,,88,88,,,,,88,88,,,88,,,88,88',
',,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88,,,,88,88,88,88,89,,88,,,',
'89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,,89,,,89,89,,,,,90,90,89,',
'90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89,90,,89,,,,90,,90,,90,90',
',90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,,91,91,90,,91,91,,91,90,',
',,90,90,,90,90,,,,90,90,90,90,91,,90,,,,91,,91,,91,91,,91,91,91,,91',
'91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92,,92,91,,,,91,91,,91,91',
',,,91,91,91,91,92,,91,,,,92,,92,,92,92,,92,92,92,,92,92,,,,,92,92,,',
'92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92,,92,92,,,,92,92,92,92',
'93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93,93,,,93,,,93,93,,,,',
'94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93,93,93,94,,93,,,,94,',
'94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,95,95,94,,95,95',
',95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,94,,,,95,,95,,95,95,,95,95',
'95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,,96,96,,96,95,,,,95,95',
',95,95,,,,95,95,95,95,96,,95,,,,96,,96,,96,96,,96,96,96,,96,96,,,,,96',
'96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,,,,96,96,,96,96,,,,96,96',
'96,96,97,,96,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97',
',,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97,,,,97,97,97,97,98,,97,,,',
'98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,99,99,98,',
'99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98,99,,98,,,,99,,99,,99,99',
',99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,,100,100,99,,100,100,,100',
'99,,,99,99,99,,99,99,,,,99,99,99,99,100,100,99,,,,100,,100,,100,100',
',100,100,100,,100,100,100,100,,,100,100,,,100,,,100,100,,,,,355,355',
'100,,355,355,,355,100,,,,100,100,,100,100,,,,100,100,100,100,355,,100',
',,,355,,355,,355,355,,355,355,355,,355,355,,,,,355,355,,,355,,,355,355',
',,,,213,213,355,,213,213,,213,355,,,,355,355,,355,355,,,,355,355,355',
'355,213,,355,,,,213,,213,,213,213,,213,213,213,,213,213,,,,,213,213',
',,213,,,213,213,,,,,103,103,213,,103,103,,103,213,,,,213,213,,213,213',
',,,213,213,213,213,103,,213,,,,103,,103,,103,103,,103,103,103,,103,103',
',,,,103,103,,,103,,,103,103,,,,,104,104,103,,104,104,,104,103,,,,103',
'103,,103,103,,,,103,103,103,103,104,,103,,,,104,,104,,104,104,,104,104',
'104,,104,104,,,,,104,104,,,104,,,104,104,,,,,173,173,104,,173,173,,173',
'104,,,,104,104,,104,104,,,,104,104,104,104,173,,104,,,,173,,173,,173',
'173,,173,173,173,,173,173,,,,,173,173,,,173,,,173,173,,,,,172,172,173',
',172,172,,172,173,,,,173,173,,173,173,,,,173,173,173,173,172,,173,,',
',172,,172,,172,172,,172,172,172,,172,172,,,,,172,172,,,172,,,172,172',
',,,,107,107,172,,107,107,,107,172,,,,172,172,,172,172,,,,172,172,172',
'172,107,,172,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107',
',,107,,,107,107,,,,,171,171,107,,171,171,,171,107,,,,107,107,,107,107',
',,,107,107,107,107,171,,107,,,,171,,171,,171,171,,171,171,171,,171,171',
',,,,171,171,,,171,,,171,171,,,,,167,167,171,,167,167,,167,171,,167,',
'171,171,,171,171,,,,171,171,171,171,167,,171,,,,167,,167,,167,167,,167',
'167,167,,167,167,,,,,167,167,,,167,,,167,167,,,,,276,276,167,,276,276',
',276,167,,,,167,167,,167,167,,,,167,167,167,167,276,,167,,,,276,,276',
',276,276,,276,276,276,,276,276,,,,,276,276,,,276,,,276,276,,,,,277,277',
'276,,277,277,,277,276,,,,276,276,,276,276,,,,276,276,276,276,277,,276',
',,,277,,277,,277,277,,277,277,277,,277,277,,,,,277,277,,,277,,,277,277',
',,,,278,278,277,,278,278,,278,277,,,,277,277,,277,277,,,,277,277,277',
'277,278,,277,,,,278,,278,,278,278,,278,278,278,,278,278,,,,,278,278',
',,278,,,278,278,,,,,280,280,278,,280,280,,280,278,,,,278,278,,278,278',
',,,278,278,278,278,280,,278,,,,280,,280,,280,280,,280,280,280,,280,280',
',,,,280,280,,,280,,,280,280,,,,,315,315,280,,315,315,,315,280,,,,280',
'280,,280,280,,,,280,280,280,280,315,,280,,,,315,,315,,315,315,,315,315',
'315,,315,315,,,,,315,315,,,315,,,315,315,,,,,281,281,315,,281,281,,281',
'315,,,,315,315,,315,315,,,,315,315,315,315,281,,315,,,,281,,281,,281',
'281,,281,281,281,,281,281,,,,,281,281,,,281,,,281,281,,,,,122,122,281',
',122,122,,122,281,,,,281,281,,281,281,,,,281,281,281,281,122,122,281',
',,,122,,122,,122,122,,122,122,122,,122,122,122,122,,,122,122,,,122,',
',122,122,,,,,,,122,,,,,,122,,,,122,122,,122,122,,,,122,122,122,122,154',
'154,122,,154,154,,154,154,,,,,,,,,,,,,,,,154,249,249,,,249,154,,154',
',154,154,,154,154,154,,154,154,154,154,,,154,154,,,154,,,154,154,,,',
',,,154,,249,,,249,154,,,,154,154,,154,154,,,,154,154,154,154,244,244',
'154,249,244,244,,244,244,,,,,249,249,,,,,,,,,,244,,,,,,244,,244,,244',
'244,,244,244,244,,244,244,244,244,,,244,244,,,244,,,244,244,,,,,151',
'151,244,,151,151,,151,244,,,,244,244,,244,244,,,,244,244,244,244,151',
',244,,,,151,,151,,151,151,,151,151,151,,151,151,151,151,,,151,151,,',
'151,,,151,151,,,,,331,331,151,,331,331,,331,151,,,,151,151,,151,151',
',,,151,151,151,151,331,,151,,,,331,,331,,331,331,,331,331,331,,331,331',
'331,331,,,331,331,,,331,,,331,331,,,,,,,331,,,,,,331,,,,331,331,,331',
'331,,,,331,331,331,331,326,326,331,,326,326,,326,326,,,,,,,,,,,,,,,',
'326,,,,,,326,,326,,326,326,,326,326,326,,326,326,,,,,326,326,,,326,',
',326,326,,,,,304,304,326,,304,304,,304,326,326,,,326,326,,326,326,,',
',326,326,326,326,304,,326,,,,304,,304,,304,304,,304,304,304,,304,304',
',,,,304,304,,,304,,,304,304,,,,,319,319,304,,319,319,,319,304,,,,304',
'304,,304,304,,,,304,304,304,304,319,,304,,,,319,,319,,319,319,,319,319',
'319,,319,319,319,319,,,319,319,,,319,,,319,319,,,,,318,318,319,,318',
'318,,318,319,,,,319,319,,319,319,,,,319,319,319,319,318,,319,,,,318',
',318,,318,318,,318,318,318,,318,318,,,,,318,318,,,318,,,318,318,,,,',
',,318,,,,,,318,,,,318,318,,318,318,,,,318,318,318,318,230,230,318,,230',
'230,,230,230,201,,,,,,,,,,,,,,201,230,201,,201,201,,230,,230,,230,230',
',230,230,230,,230,230,230,230,,,230,230,201,,230,,,230,230,,201,201',
'201,201,,230,,201,201,,,230,,,201,230,230,,230,230,208,,,230,230,230',
'230,,,230,,,208,208,208,201,208,207,208,208,,208,208,208,208,,,,,,207',
'207,,207,,207,207,,207,,208,,,46,46,,,46,208,208,208,208,208,208,,208',
'208,207,,,,,208,,,207,207,207,207,207,207,,207,207,325,,,,,207,,,46',
'208,,46,325,325,325,,325,,325,325,,325,325,325,325,,207,,,,,46,,,,,',
',,,325,46,46,,325,325,,,325,325,325,325,325,325,,325,325,126,,126,,',
'325,,,,,,,126,126,126,,126,,126,126,,126,126,126,126,,325,,,,,,,,,,',
',,,126,,,,126,126,,,126,126,126,126,126,126,,126,126,125,,125,,,126',
',,,,,,125,125,125,,125,199,125,125,,125,125,125,125,,126,,,,,199,,199',
',199,199,,,,125,,,,125,125,,153,125,125,125,125,125,125,,125,125,199',
',153,153,153,125,153,,153,153,,153,153,153,153,199,199,,,,,,199,,,,125',
',,,153,,,,153,153,,,153,153,153,153,153,153,,153,153,,,,,,153,123,,123',
',,,,,,,153,153,123,123,123,,123,206,123,123,153,123,123,123,123,,,,',
',206,206,,206,,206,206,,206,,123,,,,123,123,,,123,123,123,123,123,123',
',123,123,206,,,,,123,,,206,206,206,206,206,206,,206,206,349,,,,,206',
',,,123,,,349,349,349,,349,197,349,349,,349,349,349,349,,206,,,,,197',
',197,,197,197,,,,349,,,,349,349,,9,349,349,349,349,349,349,,349,349',
'197,,9,9,9,349,9,,9,9,,9,9,9,9,197,197,,,,,,197,,,,349,,,,9,,,,9,9,',
',9,9,9,9,9,9,223,9,9,,,,,,9,,,,223,223,223,223,223,205,223,223,,223',
'223,223,223,,,,,9,205,205,,205,,205,205,,205,,223,,,,223,223,,,223,223',
'223,223,223,223,,223,223,205,,,,,223,,,205,205,205,205,205,205,,205',
'205,165,,,,,205,,,,223,,,165,165,165,165,165,204,165,165,,165,165,165',
'165,,205,,,,204,204,,204,,204,204,,204,,165,,,,165,165,,,165,165,165',
'165,165,165,,165,165,204,,,,,165,,,204,204,204,204,204,204,203,204,204',
',,,,,204,,,,165,,203,,203,,203,203,209,,,,,,,,,204,,,209,209,209,,209',
',209,209,203,209,209,209,209,202,,,203,203,203,203,203,203,,203,203',
',,202,209,202,203,202,202,209,,,209,209,209,209,209,209,,209,209,,,',
',,209,203,,202,,,,,,,350,202,202,202,202,202,202,,202,202,,209,350,350',
'350,202,350,,350,350,,350,350,350,350,,,,,,,,,,,,202,,,,350,,,,350,350',
',351,350,350,350,350,350,350,,350,350,,,351,351,351,350,351,,351,351',
',351,351,351,351,,,,,,,,,,,,350,,,,351,,,,351,351,,352,351,351,351,351',
'351,351,,351,351,,,352,352,352,351,352,,352,352,,352,352,352,352,,,',
',,,,,,,,351,,,,352,,,,352,352,,218,352,352,352,352,352,352,,352,352',
',,218,218,218,352,218,,218,218,,218,218,218,218,,,,,,,,,,,,352,,,,218',
',,,218,218,,200,218,218,218,218,218,218,,218,218,,,,196,200,218,200',
',200,200,,,,,,,,196,,196,,196,196,,,,218,,,,200,,,,,,,,200,200,200,200',
',196,,200,200,,195,,,,200,196,196,,,,196,196,,,195,,195,196,195,195',
',,,210,,200,,,210,,,,,,,210,210,210,196,210,195,210,210,,210,210,210',
'210,,,195,195,,,,195,195,,,,,,195,210,,,,210,210,,,210,210,210,210,210',
'210,190,210,210,,,,195,,210,,,,190,190,190,,190,198,190,190,,190,190',
'190,190,,,,,210,,198,,198,,198,198,,,,190,,,,190,190,,369,190,190,190',
'190,190,190,,190,190,198,,369,369,369,190,369,,369,369,,369,369,369',
'369,198,198,,,,,,198,,,,190,,,,369,,,,369,369,,353,369,369,369,369,369',
'369,,369,369,,,353,353,353,369,353,,353,353,,353,353,353,353,,,,,,,',
',,,,369,,,,353,,,,353,353,,,353,353,353,353,353,353,,353,353,,,,,,353',
',,305,305,305,305,,305,305,305,,305,,305,305,,,,,,353,305,305,305,,',
',305,,,,,,,,,,,,305,305,,,,,,,,,,,,305,305,305,305,217,217,217,217,',
'217,217,217,,217,,217,217,,,,,,,217,217,217,,,,217,,,,,,,,,,,,217,217',
',,,,,,,,,,,217,217,217,217,275,275,275,275,,275,275,275,,275,,275,275',
',,,,,,275,275,275,,,,275,,,,,,,,,,,,275,275,,,,,,,,,,,,275,275,275,275',
'273,273,273,273,,273,273,273,,273,,273,273,,,,,,,273,273,273,,,,273',
',,,,,,,,,,,273,273,,,,,,,,,,,,273,273,273,273' ]
        racc_action_check = arr = ::Array.new(6849, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   330,   nil,   nil,   118,   314,   nil,   173,   316,  5853,
   466,   526,     9,   nil,   nil,   646,   706,   766,   826,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   253,   291,  1054,  1114,  1174,    68,  5482,   nil,   nil,   nil,
   nil,   nil,  1378,  1438,  1522,   nil,   nil,   nil,   nil,   nil,
  1582,   nil,   238,   224,   nil,  1762,   nil,   nil,   285,  1882,
   270,  2002,  2062,  2122,  2182,  2242,  2302,  2362,  2422,  2482,
  2566,  2626,  2686,  2746,  2806,  2866,  2926,  2986,  3046,  3106,
  3166,  3226,  3286,  3346,  3406,  3466,  3526,  3586,  3646,  3706,
  3766,   236,   266,  3946,  4006,   265,   264,  4186,   232,   nil,
   nil,   nil,   nil,   nil,   998,    63,  1262,  2564,   227,   nil,
   238,   210,  4726,  5732,   nil,  5622,  5565,   218,   223,   nil,
   212,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   200,   nil,
   198,   nil,    93,   nil,   nil,   186,   nil,   133,   nil,   nil,
   170,  4954,   221,  5669,  4810,   nil,   140,   nil,   nil,   nil,
   nil,   139,   136,   121,   104,  5981,    97,  4306,    -9,    24,
    75,  4246,  4126,  4066,   nil,   nil,     9,   128,    82,   287,
     5,     2,    -1,    -2,   nil,   nil,   nil,   nil,   nil,   nil,
  6467,    83,  1526,   350,     2,  6390,  6345,  5823,  6484,  5639,
  6332,  5366,  6097,  6052,  5998,  5924,  5749,  5451,  5434,  6072,
  6413,   nil,   nil,  3886,    44,   -31,   nil,  6655,  6285,   -36,
   nil,   159,   144,  5907,   nil,   182,   nil,   264,   nil,   nil,
  5362,   nil,   230,   nil,   nil,   nil,   nil,   nil,   270,   251,
   -28,   243,   -11,   nil,  4894,   262,   406,   200,   170,  4835,
    -8,   586,    81,   276,   nil,  1258,  1318,   nil,   nil,   nil,
   nil,  1822,   nil,   nil,   nil,   nil,    57,   nil,   nil,   nil,
   nil,    67,    75,  6763,    83,  6709,  4366,  4426,  4486,   nil,
  4546,  4666,   143,   nil,   139,   nil,   157,   nil,   166,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   169,  5158,  6601,   188,   nil,   188,   nil,
   186,   195,   nil,   136,    90,  4606,   nil,   nil,  5278,  5218,
   nil,   206,   116,   216,   197,  5508,  5098,   nil,     0,   nil,
   nil,  5014,   236,   nil,   935,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   178,   -61,   238,   nil,   nil,  5806,
  6144,  6191,  6238,  6561,   266,  3826,   208,   270,   nil,   nil,
   269,  1942,   nil,   nil,   nil,   -21,   nil,   nil,   nil,  6514,
    18,    83,   nil,  1702,   288,   271,   nil,   300,   nil,   nil,
   301,  1642,   306,   nil,   nil,   994,   nil,   nil,   nil,   310,
   280,   nil,   nil,   nil,   nil,   nil,   313,   nil,   nil,   nil,
   nil,   910,   nil,   346,   178,   nil,   nil,   319,   nil,   nil,
    58,   nil,   323,   nil,   324,   nil,   325,   nil,   nil,   nil,
   296,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -247,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -247,  -247,  -247,   -33,   -34,  -247,  -247,  -247,  -247,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -86,   -90,  -247,  -247,  -247,  -247,  -247,  -180,  -181,  -182,
  -183,  -184,  -247,  -247,  -247,  -195,  -196,  -197,  -198,  -199,
  -247,  -201,  -247,  -214,  -217,  -247,  -222,  -223,  -247,  -247,
    -7,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -130,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,  -247,
  -247,  -247,  -125,  -246,  -246,   -22,   -23,  -247,  -246,  -140,
  -161,  -162,  -163,  -164,   -46,  -247,   -47,   -54,  -247,   -87,
  -247,  -247,  -247,  -247,   -97,  -247,  -247,  -246,  -224,  -149,
  -151,  -152,  -153,  -154,  -155,  -157,  -158,   -14,  -224,  -186,
  -224,  -188,  -247,  -191,  -192,  -247,  -200,  -247,  -205,  -208,
  -247,  -212,  -247,  -247,  -247,   425,    -6,    -9,   -11,   -12,
   -13,   -17,   -18,   -19,   -20,  -247,  -224,  -247,   -79,   -80,
   -81,  -235,  -241,  -229,  -131,  -134,  -247,  -232,  -230,  -238,
  -181,  -182,  -183,  -184,  -228,  -233,  -234,  -236,  -237,  -239,
   -59,  -247,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,
  -247,   -57,  -119,  -247,  -224,   -83,   -91,  -130,  -129,  -247,
  -128,  -247,  -226,  -247,   -28,  -246,  -165,  -247,   -58,   -92,
  -247,   -95,  -224,  -168,  -170,  -171,  -172,  -173,  -175,  -247,
  -247,  -178,  -247,   -89,  -247,  -247,  -247,  -247,  -246,  -225,
  -247,  -225,  -247,  -247,  -189,  -247,  -247,  -202,  -203,  -204,
  -206,  -247,  -209,  -210,  -211,  -213,  -224,  -215,  -218,  -220,
  -221,    -8,  -247,  -130,  -247,  -225,  -247,  -247,  -247,   -35,
  -247,  -247,  -224,  -121,  -247,   -85,  -224,  -133,  -247,  -229,
  -230,  -231,  -232,  -235,  -238,  -240,  -241,  -242,  -243,  -244,
  -245,  -126,  -127,  -247,  -227,  -130,  -247,  -143,  -247,  -166,
  -224,  -247,   -94,  -247,  -225,  -247,  -176,  -177,  -247,  -247,
   -88,  -247,  -100,  -247,  -106,  -115,  -247,  -110,  -247,  -113,
  -116,  -246,  -247,  -159,  -247,  -150,  -156,   -15,  -185,  -187,
  -190,  -193,  -194,  -207,  -247,  -247,  -224,   -26,  -132,  -137,
  -135,  -136,   -60,  -123,  -247,  -225,   -82,  -247,   -25,   -29,
  -224,  -246,  -144,  -145,  -146,  -247,   -93,   -96,  -169,  -174,
  -247,  -100,   -99,  -247,  -247,  -106,  -105,  -247,  -109,  -111,
  -247,  -247,  -247,  -141,  -142,  -247,  -160,  -216,  -219,  -247,
   -30,  -120,  -122,   -84,  -124,   -27,  -247,  -167,  -179,   -98,
  -101,  -247,  -104,  -247,  -246,  -114,  -138,  -247,  -148,   -24,
   -31,  -139,  -247,  -103,  -247,  -108,  -247,  -117,  -118,  -147,
  -226,  -102,  -107,  -112,   -32 ]

racc_goto_table = [
     2,   114,   116,   117,   119,   222,   226,   131,   133,   191,
   166,   127,   212,   146,   303,   241,   232,   268,   335,   327,
   382,   225,    70,   248,   405,   226,   219,   221,   123,   125,
   126,   416,   326,   252,   282,   253,   400,   376,   138,   140,
   247,   348,   372,   229,   211,   359,   241,   266,   306,   362,
   396,   153,   105,   106,   332,   389,   336,   368,   317,   316,
   118,   274,   341,   262,   263,   165,   190,   192,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
   205,   206,   207,   208,   209,   210,   214,   156,   402,   218,
   218,   399,     3,   223,   137,   137,   145,   260,   261,   379,
   259,   149,   148,   386,   151,   264,     1,   nil,   242,   284,
   nil,   nil,   nil,   157,   158,   159,   160,   161,   162,   163,
   164,   241,   310,   307,   nil,   nil,   283,   313,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   131,   133,   137,   127,   nil,   nil,   333,   nil,   286,   nil,
   nil,   265,   nil,   116,   272,   nil,   nil,   123,   125,   126,
   nil,   344,   nil,   nil,   137,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   354,   nil,   285,
   nil,   357,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   271,   nil,   nil,   210,
   nil,   nil,   nil,   nil,   346,   365,   nil,   nil,   241,   388,
   131,   133,   424,   nil,   343,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   384,
   311,   nil,   325,   nil,   nil,   nil,   360,   nil,   nil,   nil,
   nil,   390,   nil,   nil,   321,   323,   nil,   370,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   395,   nil,   nil,   nil,   384,
   nil,   nil,   349,   350,   351,   nil,   352,   353,   392,   nil,
   nil,   nil,   nil,   nil,   363,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   223,   nil,   nil,   337,   nil,   131,   133,   145,   342,   nil,
   nil,   369,   417,   148,   190,   nil,   nil,   nil,   420,   nil,
   nil,   nil,   325,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   393,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   210,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   123,
   nil,   337,   nil,   nil,   nil,   nil,   nil,   325,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   407,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   223,   nil,   nil,   nil,
   nil,   412,   nil,   414,   418 ]

racc_goto_check = [
     2,    10,    10,    10,    37,    13,    51,    35,    34,    19,
    11,    59,    52,    82,    14,    36,    42,    90,    67,    47,
    61,    60,     5,    15,    50,    51,    55,    55,    10,    10,
    10,    49,    46,    15,    53,    15,    43,    45,     8,     8,
    60,    56,    44,    41,    20,    16,    36,    42,    63,    64,
    61,    10,     9,     9,    66,    12,    69,    70,    71,    73,
     6,    15,    77,    78,    79,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,     8,     5,    45,    10,
    10,    44,     3,    10,     6,     6,     6,    83,    84,    47,
    86,    87,     6,    67,    88,    89,     1,   nil,     8,    15,
   nil,   nil,   nil,     6,     6,     6,     6,     9,     9,     9,
     9,    36,    42,    51,   nil,   nil,    52,    15,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    35,    34,     6,    59,   nil,   nil,    51,   nil,    11,   nil,
   nil,     2,   nil,    10,     2,   nil,   nil,    10,    10,    10,
   nil,    15,   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    15,   nil,    37,
   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,    10,
   nil,   nil,   nil,   nil,    11,    15,   nil,   nil,    36,    90,
    35,    34,    14,   nil,    82,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    51,
     2,   nil,    10,   nil,   nil,   nil,    11,   nil,   nil,   nil,
   nil,    15,   nil,   nil,     2,     2,   nil,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,    51,
   nil,   nil,    10,    10,    10,   nil,    10,    10,    52,   nil,
   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,     6,   nil,    35,    34,     6,     6,   nil,
   nil,    10,    51,     6,    10,   nil,   nil,   nil,    13,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,     6,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,
   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   106,     0,    92,   nil,    18,    42,   nil,   -14,    42,
   -14,   -69,  -291,  -102,  -208,  -105,  -259,   nil,   nil,   -71,
   -55,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -38,   -39,  -106,   -36,   nil,   nil,
   nil,   -77,  -105,  -337,  -280,  -287,  -214,  -227,   nil,  -373,
  -357,  -102,   -87,  -179,   nil,   -77,  -234,   nil,   nil,   -34,
   -87,  -311,   nil,  -177,  -259,   nil,  -194,  -231,   nil,  -194,
  -257,  -182,   nil,  -180,   nil,   nil,   nil,  -193,   -87,   -86,
   nil,   nil,   -47,   -50,   -49,   nil,   -47,    39,    41,   -46,
  -136 ]

racc_goto_default = [
   nil,   nil,   383,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   224,    13,    14,   nil,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   330,    40,    41,
   120,   nil,   nil,   124,   nil,   nil,   nil,   nil,   328,   nil,
   329,   220,   nil,   nil,   102,   nil,   174,   176,   175,   109,
   nil,   nil,   108,   nil,   nil,   128,   nil,   129,   130,   134,
   233,   234,   235,   236,   237,   240,   142,   144,    55,    56,
    57,    60,   nil,   nil,   nil,   147,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 92, :_reduce_1,
  1, 92, :_reduce_2,
  0, 92, :_reduce_3,
  1, 93, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  3, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  1, 99, :_reduce_14,
  3, 99, :_reduce_15,
  1, 98, :_reduce_none,
  3, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  1, 100, :_reduce_none,
  2, 100, :_reduce_22,
  2, 100, :_reduce_23,
  7, 100, :_reduce_24,
  5, 100, :_reduce_25,
  5, 100, :_reduce_26,
  4, 107, :_reduce_27,
  1, 104, :_reduce_28,
  3, 104, :_reduce_29,
  1, 103, :_reduce_30,
  2, 103, :_reduce_31,
  4, 103, :_reduce_32,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 101, :_reduce_35,
  3, 101, :_reduce_36,
  3, 101, :_reduce_37,
  3, 101, :_reduce_38,
  3, 101, :_reduce_39,
  3, 101, :_reduce_40,
  3, 101, :_reduce_41,
  3, 101, :_reduce_42,
  3, 101, :_reduce_43,
  3, 101, :_reduce_44,
  3, 101, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  3, 101, :_reduce_48,
  3, 101, :_reduce_49,
  3, 101, :_reduce_50,
  3, 101, :_reduce_51,
  3, 101, :_reduce_52,
  3, 101, :_reduce_53,
  2, 101, :_reduce_54,
  3, 101, :_reduce_55,
  3, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  1, 110, :_reduce_59,
  3, 110, :_reduce_60,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_77,
  1, 108, :_reduce_78,
  1, 108, :_reduce_79,
  1, 108, :_reduce_80,
  1, 108, :_reduce_81,
  5, 109, :_reduce_82,
  3, 109, :_reduce_83,
  6, 109, :_reduce_84,
  4, 109, :_reduce_85,
  1, 113, :_reduce_86,
  2, 113, :_reduce_87,
  4, 129, :_reduce_88,
  3, 129, :_reduce_89,
  1, 129, :_reduce_90,
  3, 130, :_reduce_91,
  2, 128, :_reduce_92,
  3, 132, :_reduce_93,
  2, 132, :_reduce_94,
  2, 131, :_reduce_95,
  4, 131, :_reduce_96,
  2, 116, :_reduce_97,
  5, 134, :_reduce_98,
  4, 134, :_reduce_99,
  0, 135, :_reduce_none,
  2, 135, :_reduce_101,
  4, 135, :_reduce_102,
  3, 135, :_reduce_103,
  6, 117, :_reduce_104,
  5, 117, :_reduce_105,
  0, 136, :_reduce_none,
  4, 136, :_reduce_107,
  3, 136, :_reduce_108,
  5, 115, :_reduce_109,
  1, 137, :_reduce_110,
  2, 137, :_reduce_111,
  5, 138, :_reduce_112,
  1, 139, :_reduce_113,
  3, 139, :_reduce_114,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_120,
  1, 144, :_reduce_121,
  3, 144, :_reduce_122,
  3, 143, :_reduce_123,
  6, 114, :_reduce_124,
  2, 114, :_reduce_125,
  3, 145, :_reduce_126,
  3, 145, :_reduce_127,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  0, 102, :_reduce_130,
  1, 102, :_reduce_131,
  3, 102, :_reduce_132,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  3, 147, :_reduce_135,
  3, 147, :_reduce_136,
  3, 147, :_reduce_137,
  6, 118, :_reduce_138,
  7, 119, :_reduce_139,
  1, 153, :_reduce_140,
  1, 152, :_reduce_none,
  1, 152, :_reduce_none,
  1, 154, :_reduce_none,
  2, 154, :_reduce_144,
  1, 155, :_reduce_none,
  1, 155, :_reduce_none,
  7, 120, :_reduce_147,
  6, 120, :_reduce_148,
  1, 156, :_reduce_149,
  3, 156, :_reduce_150,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 158, :_reduce_153,
  1, 158, :_reduce_none,
  1, 159, :_reduce_155,
  3, 159, :_reduce_156,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  1, 157, :_reduce_none,
  2, 157, :_reduce_160,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 150, :_reduce_164,
  1, 151, :_reduce_165,
  2, 151, :_reduce_166,
  4, 151, :_reduce_167,
  1, 133, :_reduce_168,
  3, 133, :_reduce_169,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  3, 164, :_reduce_174,
  1, 164, :_reduce_175,
  2, 165, :_reduce_176,
  2, 163, :_reduce_177,
  1, 166, :_reduce_178,
  4, 166, :_reduce_179,
  1, 112, :_reduce_180,
  1, 122, :_reduce_181,
  1, 122, :_reduce_182,
  1, 122, :_reduce_183,
  1, 122, :_reduce_184,
  4, 123, :_reduce_185,
  2, 123, :_reduce_186,
  4, 123, :_reduce_187,
  2, 123, :_reduce_188,
  3, 124, :_reduce_189,
  4, 124, :_reduce_190,
  2, 124, :_reduce_191,
  1, 167, :_reduce_192,
  3, 167, :_reduce_193,
  3, 168, :_reduce_194,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 169, :_reduce_198,
  1, 169, :_reduce_199,
  2, 170, :_reduce_200,
  1, 172, :_reduce_201,
  1, 174, :_reduce_202,
  1, 175, :_reduce_203,
  2, 173, :_reduce_204,
  1, 176, :_reduce_205,
  1, 177, :_reduce_206,
  2, 177, :_reduce_207,
  2, 171, :_reduce_208,
  2, 178, :_reduce_209,
  2, 178, :_reduce_210,
  3, 94, :_reduce_211,
  0, 180, :_reduce_none,
  1, 180, :_reduce_none,
  0, 179, :_reduce_214,
  2, 179, :_reduce_215,
  4, 179, :_reduce_216,
  1, 121, :_reduce_217,
  3, 121, :_reduce_218,
  5, 121, :_reduce_219,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 127, :_reduce_222,
  1, 125, :_reduce_223,
  0, 106, :_reduce_none,
  1, 106, :_reduce_225,
  0, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  0, 142, :_reduce_246 ]

racc_reduce_n = 247

racc_shift_n = 425

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "option_expressions",
  "options_statements",
  "option_expression",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 144)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_77(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_78(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_79(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_81(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_82(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_87(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_88(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_92(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_93(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_94(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_97(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_98(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_101(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_104(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_109(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_111(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 393)
  def _reduce_113(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_114(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'egrammar.ra', 413)
  def _reduce_120(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 418)
  def _reduce_121(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_122(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 424)
  def _reduce_123(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 434)
  def _reduce_124(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_125(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_126(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_127(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 128 omitted

# reduce 129 omitted

module_eval(<<'.,.,', 'egrammar.ra', 453)
  def _reduce_130(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 454)
  def _reduce_131(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_132(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 133 omitted

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_135(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 475)
  def _reduce_136(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_137(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 488)
  def _reduce_138(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 502)
  def _reduce_139(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_140(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 521)
  def _reduce_144(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_147(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 542)
  def _reduce_148(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 552)
  def _reduce_149(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_150(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 560)
  def _reduce_153(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_155(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_156(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

module_eval(<<'.,.,', 'egrammar.ra', 574)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_164(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_165(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 598)
  def _reduce_166(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 599)
  def _reduce_167(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 603)
  def _reduce_168(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 604)
  def _reduce_169(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

# reduce 173 omitted

module_eval(<<'.,.,', 'egrammar.ra', 616)
  def _reduce_174(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_175(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 620)
  def _reduce_176(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_177(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_178(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 627)
  def _reduce_179(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_180(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_181(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_182(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_183(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_184(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_185(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_186(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_187(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_188(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_189(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 653)
  def _reduce_190(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 654)
  def _reduce_191(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_192(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_193(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_194(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_199(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_200(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_201(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_202(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_204(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_205(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 680)
  def _reduce_206(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_207(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_208(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 687)
  def _reduce_209(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 688)
  def _reduce_210(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_211(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 212 omitted

# reduce 213 omitted

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_214(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_215(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 700)
  def _reduce_216(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 703)
  def _reduce_217(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_218(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_219(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 220 omitted

# reduce 221 omitted

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_222(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 714)
  def _reduce_223(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 224 omitted

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_225(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

# reduce 243 omitted

# reduce 244 omitted

# reduce 245 omitted

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_246(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
