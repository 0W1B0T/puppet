#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 700)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'68,-127,204,51,53,232,217,51,53,87,88,84,79,91,286,95,-125,90,51,53',
'80,82,81,83,241,-193,51,53,278,230,219,240,51,53,231,-202,201,204,94',
'231,54,-127,86,85,54,292,72,73,75,74,77,78,264,70,71,118,-125,309,120',
'308,69,68,59,118,242,-193,120,76,89,54,87,88,84,79,91,-202,95,59,90',
'51,53,80,82,81,83,59,110,51,53,51,53,59,231,309,113,308,126,221,112',
'94,314,323,220,86,85,226,225,72,73,75,74,77,78,113,70,71,118,112,214',
'120,222,69,68,223,118,294,54,120,76,89,214,87,88,84,79,91,68,95,59,90',
'296,68,80,82,81,83,59,281,113,91,280,95,112,90,91,113,95,113,90,112',
'94,112,113,277,86,85,112,240,72,73,75,74,77,78,94,70,71,191,301,94,302',
'303,69,68,68,64,66,65,67,76,89,204,87,88,84,79,91,91,95,95,90,90,167',
'80,82,81,83,306,238,310,312,224,263,238,240,319,320,262,262,63,63,94',
'94,132,103,86,85,256,329,72,73,75,74,77,78,255,70,71,200,114,254,332',
'103,69,68,104,240,103,336,312,76,89,338,87,88,84,79,91,339,95,340,90',
'341,196,80,82,81,83,100,344,345,346,238,63,60,353,354,355,356,,,,94',
',,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,92,,,,76,89,,87,88,84',
'79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74',
'77,78,,70,71,,,,,,69,68,,207,,,,76,89,,87,88,84,79,91,,95,,90,,,80,82',
'81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68',
',208,,,,76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94',
',,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,209,,,,76,89,,87,88',
'84,79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75',
'74,77,78,,70,71,,,,,,69,68,,210,,,,76,89,,87,88,84,79,91,,95,,90,,,80',
'82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69',
'68,,,,,,76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94',
',,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,,,,,76,89,,87,88,84',
'79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74',
'77,78,,70,71,,,,,,69,68,,,,,,76,89,,87,88,84,79,91,,95,,90,,,80,82,81',
'83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,',
',,,,76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,',
'86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,,,,,76,89,,87,88,84,79',
'91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77',
'78,,70,71,,,,,,69,68,,,,,,76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83',
',,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,,,',
',76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86',
'85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,,,,,76,89,,87,88,84,79,91',
',95,,90,,,80,82,81,83,,,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78',
',70,71,,,,,,69,68,,,,,,76,89,,87,88,84,79,91,236,95,,90,,,80,82,81,83',
',,,,,,,,,,,,,,94,,,,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,68,,,,',
',76,89,,87,88,84,79,91,,95,,90,,,80,82,81,83,68,,,,,,,,,,,,,91,94,95',
',90,86,85,,,72,73,75,74,77,78,,70,71,,,,,,69,,94,,,,68,76,89,,,,75,74',
',,,70,71,91,,95,,90,69,,68,,,,,76,,,,,,,,91,,95,,90,94,,,,,,68,,72,73',
'75,74,,,,70,71,,,91,94,95,69,90,,,,,,76,75,74,,68,,70,71,,,,,,69,,94',
',91,,95,76,90,,72,73,75,74,,68,,70,71,,,,,,69,,,,91,94,95,76,90,,,,',
'72,73,75,74,77,78,,70,71,,,,,,69,,94,,,,,76,68,,72,73,75,74,77,78,,70',
'71,,79,91,,95,69,90,,,80,,,76,68,,,,,,,,,,,,79,91,94,95,,90,,,80,,72',
'73,75,74,77,78,,70,71,,,,,,69,,94,,,,,76,68,,72,73,75,74,77,78,,70,71',
',79,91,,95,69,90,,,80,,,76,68,,,,,,,,,,,,79,91,94,95,,90,,,80,,72,73',
'75,74,77,78,,70,71,,,,,,69,,94,,,,,76,,,72,73,75,74,77,78,,70,71,,,68',
',,69,,,,,,,76,84,79,91,,95,,90,,,80,82,81,83,,,,,68,,,,,,,,,,94,,,91',
',95,,90,72,73,75,74,77,78,,70,71,,,68,,,69,,,,,,94,76,84,79,91,,95,',
'90,,,80,82,81,83,70,71,,,,,,69,,51,53,,,47,94,48,,,,85,,,72,73,75,74',
'77,78,,70,71,13,,,,,69,38,,44,,46,97,76,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,166,13,,,,,,169,186,180,187,46,181',
'189,182,178,176,,171,184,,,,55,12,190,185,183,51,53,11,,47,,48,315,',
',59,,,,,188,170,,,,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12',
'51,53,56,68,47,11,48,,,,,,,59,,,91,,95,39,90,,13,,,,,,38,,44,,46,97',
',45,58,54,,40,57,94,,,55,12,51,53,56,68,47,11,48,,,,70,71,,59,,,91,69',
'95,39,90,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,94,,,55,12,51,53,56',
',47,11,48,,,,70,71,,59,,,,69,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,169,186,180,187,46,181,189,182,178,176,,171,184,,,,55,12,190',
'185,183,51,53,11,,47,,48,,,,59,,,,,188,170,,,,,,13,,,,,,38,,44,,46,97',
',45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,',
',,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,',
',59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40',
'57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,',
',,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,198,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48',
',,,,,,59,,,,,,39,,,13,206,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12',
'51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54',
',40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,',
'44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,',
',,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43',
',,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97',
',45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,',
',,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,',
',59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,,,56,51',
'53,11,,47,285,48,,,,59,,,,,,39,,,,,,13,,,,,,38,,44,,46,97,,45,58,54',
',40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44',
',46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,326,,,,,,59,,',
',,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,',
'47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,',
',,55,12,51,53,56,,47,11,48,268,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46',
'42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,328,,,,,,59,,,,,,39',
',,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11',
'48,266,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,',
',55,12,51,53,56,,47,11,48,260,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42',
',45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13',
',,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56,,47,11,48,,',
',,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51',
'53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,',
'40,57,,,,55,12,,,56,51,53,11,,47,124,48,,,,59,,,,,,39,,,,,,13,,,,,,38',
',44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,',
',,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47',
'11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57,,,,55',
'12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58',
'54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38',
',44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,343,,,,,,59',
',,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53,56',
',47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97,,45,58,54,,40,57',
',,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,97',
',45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,',
',,,,38,,44,,46,97,,45,58,54,,40,57,,,,55,12,51,53,56,,47,11,48,348,',
',,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51',
'53,56,,47,11,48,350,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54',
',40,57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,',
'44,,46,42,,45,58,54,61,40,57,43,,,55,12,51,53,56,,47,11,48,352,,,,,',
'59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40,57,43,,,55,12,51,53',
'56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,,46,42,,45,58,54,,40',
'57,43,,,55,12,51,53,56,,47,11,48,,,,,,,59,,,,,,39,,,13,,,,,,38,,44,',
'46,97,,45,58,54,,40,57,,,,55,12,,,56,,,11,,,,250,186,249,187,59,247',
'189,251,245,244,39,246,248,,,,,,190,185,252,250,186,249,187,,247,189',
'251,245,244,,246,248,,,188,253,,190,185,252,250,186,249,187,,247,189',
'251,245,244,,246,248,,,188,253,,190,185,252,,,,,,,,,,,,,,,,188,253' ]
        racc_action_table = arr = ::Array.new(5016, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'163,178,103,71,71,163,116,223,223,163,163,163,163,163,223,163,176,163',
'217,217,163,163,163,163,179,184,219,219,214,139,116,293,70,70,139,183',
'103,214,163,205,71,178,163,163,223,233,163,163,163,163,163,163,205,163',
'163,217,176,266,217,266,163,162,71,219,179,184,219,163,163,70,162,162',
'162,162,162,183,162,217,162,182,182,162,162,162,162,219,42,45,45,48',
'48,70,269,306,277,306,48,123,277,162,269,277,123,162,162,131,131,162',
'162,162,162,162,162,42,162,162,182,42,111,182,125,162,161,125,45,237',
'48,45,162,162,115,161,161,161,161,161,140,161,182,161,239,98,161,161',
'161,161,45,216,97,140,215,140,97,140,98,181,98,44,98,181,161,44,180',
'212,161,161,180,243,161,161,161,161,161,161,140,161,161,93,257,98,259',
'261,161,160,96,7,7,7,7,161,161,262,160,160,160,160,160,96,160,96,160',
'96,91,160,160,160,160,265,211,267,268,128,204,272,273,274,275,202,279',
'133,62,160,96,60,198,160,160,197,291,160,160,160,160,160,160,195,160',
'160,102,43,193,300,301,160,99,37,173,36,309,310,160,160,312,99,99,99',
'99,99,313,99,317,99,318,99,99,99,99,99,35,324,325,327,172,5,1,342,347',
'349,351,,,,99,,,,99,99,,,99,99,99,99,99,99,,99,99,,,,,,99,10,,10,,,',
'99,99,,10,10,10,10,10,,10,,10,,,10,10,10,10,,,,,,,,,,,,,,,10,,,,10,10',
',,10,10,10,10,10,10,,10,10,,,,,,10,105,,105,,,,10,10,,105,105,105,105',
'105,,105,,105,,,105,105,105,105,,,,,,,,,,,,,,,105,,,,105,105,,,105,105',
'105,105,105,105,,105,105,,,,,,105,107,,107,,,,105,105,,107,107,107,107',
'107,,107,,107,,,107,107,107,107,,,,,,,,,,,,,,,107,,,,107,107,,,107,107',
'107,107,107,107,,107,107,,,,,,107,108,,108,,,,107,107,,108,108,108,108',
'108,,108,,108,,,108,108,108,108,,,,,,,,,,,,,,,108,,,,108,108,,,108,108',
'108,108,108,108,,108,108,,,,,,108,109,,109,,,,108,108,,109,109,109,109',
'109,,109,,109,,,109,109,109,109,,,,,,,,,,,,,,,109,,,,109,109,,,109,109',
'109,109,109,109,,109,109,,,,,,109,122,,,,,,109,109,,122,122,122,122',
'122,,122,,122,,,122,122,122,122,,,,,,,,,,,,,,,122,,,,122,122,,,122,122',
'122,122,122,122,,122,122,,,,,,122,305,,,,,,122,122,,305,305,305,305',
'305,,305,,305,,,305,305,305,305,,,,,,,,,,,,,,,305,,,,305,305,,,305,305',
'305,305,305,305,,305,305,,,,,,305,129,,,,,,305,305,,129,129,129,129',
'129,,129,,129,,,129,129,129,129,,,,,,,,,,,,,,,129,,,,129,129,,,129,129',
'129,129,129,129,,129,129,,,,,,129,192,,,,,,129,129,,192,192,192,192',
'192,,192,,192,,,192,192,192,192,,,,,,,,,,,,,,,192,,,,192,192,,,192,192',
'192,192,192,192,,192,192,,,,,,192,284,,,,,,192,192,,284,284,284,284',
'284,,284,,284,,,284,284,284,284,,,,,,,,,,,,,,,284,,,,284,284,,,284,284',
'284,284,284,284,,284,284,,,,,,284,288,,,,,,284,284,,288,288,288,288',
'288,,288,,288,,,288,288,288,288,,,,,,,,,,,,,,,288,,,,288,288,,,288,288',
'288,288,288,288,,288,288,,,,,,288,290,,,,,,288,288,,290,290,290,290',
'290,,290,,290,,,290,290,290,290,,,,,,,,,,,,,,,290,,,,290,290,,,290,290',
'290,290,290,290,,290,290,,,,,,290,298,,,,,,290,290,,298,298,298,298',
'298,,298,,298,,,298,298,298,298,,,,,,,,,,,,,,,298,,,,298,298,,,298,298',
'298,298,298,298,,298,298,,,,,,298,168,,,,,,298,298,,168,168,168,168',
'168,168,168,,168,,,168,168,168,168,,,,,,,,,,,,,,,168,,,,168,168,,,168',
'168,168,168,168,168,,168,168,,,,,,168,299,,,,,,168,168,,299,299,299',
'299,299,,299,,299,,,299,299,299,299,146,,,,,,,,,,,,,146,299,146,,146',
'299,299,,,299,299,299,299,299,299,,299,299,,,,,,299,,146,,,,150,299',
'299,,,,146,146,,,,146,146,150,,150,,150,146,,145,,,,,146,,,,,,,,145',
',145,,145,150,,,,,,151,,150,150,150,150,,,,150,150,,,151,145,151,150',
'151,,,,,,150,145,145,,152,,145,145,,,,,,145,,151,,152,,152,145,152,',
'151,151,151,151,,153,,151,151,,,,,,151,,,,153,152,153,151,153,,,,,152',
'152,152,152,152,152,,152,152,,,,,,152,,153,,,,,152,154,,153,153,153',
'153,153,153,,153,153,,154,154,,154,153,154,,,154,,,153,155,,,,,,,,,',
',,155,155,154,155,,155,,,155,,154,154,154,154,154,154,,154,154,,,,,',
'154,,155,,,,,154,156,,155,155,155,155,155,155,,155,155,,156,156,,156',
'155,156,,,156,,,155,157,,,,,,,,,,,,157,157,156,157,,157,,,157,,156,156',
'156,156,156,156,,156,156,,,,,,156,,157,,,,,156,,,157,157,157,157,157',
'157,,157,157,,,158,,,157,,,,,,,157,158,158,158,,158,,158,,,158,158,158',
'158,,,,,149,,,,,,,,,,158,,,149,,149,,149,158,158,158,158,158,158,,158',
'158,,,159,,,158,,,,,,149,158,159,159,159,,159,,159,,,159,159,159,159',
'149,149,,,,,,149,,90,90,,,90,159,90,,,,159,,,159,159,159,159,159,159',
',159,159,90,,,,,159,90,,90,,90,90,159,90,90,90,,90,90,,,,90,90,210,210',
'90,,210,90,210,,,,,,,90,,,,,,90,,90,210,,,,,,210,210,210,210,210,210',
'210,210,210,210,,210,210,,,,210,210,210,210,210,270,270,210,,270,,270',
'270,,,210,,,,,210,210,,,,,,270,,,,,,270,,270,,270,270,,270,270,270,',
'270,270,,,,270,270,72,72,270,148,72,270,72,,,,,,,270,,,148,,148,270',
'148,,72,,,,,,72,,72,,72,72,,72,72,72,,72,72,148,,,72,72,73,73,72,147',
'73,72,73,,,,148,148,,72,,,147,148,147,72,147,,73,,,,,,73,,73,,73,73',
',73,73,73,,73,73,147,,,73,73,74,74,73,,74,73,74,,,,147,147,,73,,,,147',
',73,,,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,,,,74,74,75,75,74,,75,74',
'75,,,,,,,74,,,,,,74,,,75,,,,,,75,,75,,75,75,,75,75,75,,75,75,,,,75,75',
'76,76,75,,76,75,76,,,,,,,75,,,,,,75,,,76,,,,,,76,,76,,76,76,,76,76,76',
',76,76,,,,76,76,77,77,76,,77,76,77,,,,,,,76,,,,,,76,,,77,,,,,,77,,77',
',77,77,,77,77,77,,77,77,,,,77,77,78,78,77,,78,77,78,,,,,,,77,,,,,,77',
',,78,,,,,,78,,78,,78,78,,78,78,78,,78,78,,,,78,78,79,79,78,,79,78,79',
',,,,,,78,,,,,,78,,,79,,,,,,79,,79,,79,79,,79,79,79,,79,79,,,,79,79,80',
'80,79,,80,79,80,,,,,,,79,,,,,,79,,,80,,,,,,80,,80,,80,80,,80,80,80,',
'80,80,,,,80,80,81,81,80,,81,80,81,,,,,,,80,,,,,,80,,,81,,,,,,81,,81',
',81,81,,81,81,81,,81,81,,,,81,81,82,82,81,,82,81,82,,,,,,,81,,,,,,81',
',,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,82,82,83,83,82,,83,82,83',
',,,,,,82,,,,,,82,,,83,,,,,,83,,83,,83,83,,83,83,83,,83,83,,,,83,83,84',
'84,83,,84,83,84,,,,,,,83,,,,,,83,,,84,,,,,,84,,84,,84,84,,84,84,84,',
'84,84,,,,84,84,85,85,84,,85,84,85,,,,,,,84,,,,,,84,,,85,,,,,,85,,85',
',85,85,,85,85,85,,85,85,,,,85,85,86,86,85,,86,85,86,,,,,,,85,,,,,,85',
',,86,,,,,,86,,86,,86,86,,86,86,86,,86,86,,,,86,86,166,166,86,,166,86',
'166,,,,,,,86,,,,,,86,,,166,,,,,,166,,166,,166,166,,166,166,166,,166',
'166,,,,166,166,88,88,166,,88,166,88,,,,,,,166,,,,,,166,,,88,,,,,,88',
',88,,88,88,,88,88,88,,88,88,,,,88,88,89,89,88,,89,88,89,,,,,,,88,,,',
',,88,,,89,,,,,,89,,89,,89,89,,89,89,89,,89,89,,,,89,89,69,69,89,,69',
'89,69,,,,,,,89,,,,,,89,,,69,,,,,,69,,69,,69,69,,69,69,69,,69,69,,,,69',
'69,263,263,69,,263,69,263,,,,,,,69,,,,,,69,,,263,,,,,,263,,263,,263',
'263,,263,263,263,,263,263,,,,263,263,92,92,263,,92,263,92,,,,,,,263',
',,,,,263,,,92,,,,,,92,92,92,92,92,92,92,92,92,92,,92,92,,,,92,92,92',
'92,92,256,256,92,,256,,256,,,,92,,,,,92,92,,,,,,256,,,,,,256,,256,,256',
'256,,256,256,256,,256,256,,,,256,256,94,94,256,,94,256,94,,,,,,,256',
',,,,,256,,,94,,,,,,94,,94,,94,94,,94,94,94,,94,94,,,,94,94,95,95,94',
',95,94,95,,,,,,,94,,,,,,94,,,95,,,,,,95,,95,,95,95,,95,95,95,,95,95',
',,,95,95,242,242,95,,242,95,242,,,,,,,95,,,,,,95,,,242,,,,,,242,,242',
',242,242,,242,242,242,,242,242,,,,242,242,241,241,242,,241,242,241,',
',,,,,242,,,,,,242,,,241,,,,,,241,,241,,241,241,,241,241,241,,241,241',
',,,241,241,238,238,241,,238,241,238,,,,,,,241,,,,,,241,,,238,,,,,,238',
',238,,238,238,,238,238,238,,238,238,,,,238,238,68,68,238,,68,238,68',
',,,,,,238,,,,,,238,,,68,,,,,,68,,68,,68,68,,68,68,68,,68,68,,,,68,68',
'100,100,68,,100,68,100,,,,,,,68,,,,,,68,,,100,100,,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,100,100,232,232,100,,232,100,232,,,,,,',
'100,,,,,,100,,,232,,,,,,232,,232,,232,232,,232,232,232,,232,232,,,,232',
'232,231,231,232,,231,232,231,,,,,,,232,,,,,,232,,,231,,,,,,231,,231',
',231,231,,231,231,231,,231,231,,,,231,231,104,104,231,,104,231,104,',
',,,,,231,,,,,,231,,,104,104,,,,,104,,104,,104,104,,104,104,104,,104',
'104,,,,104,104,67,67,104,,67,104,67,,,,,,,104,,,,,,104,,,67,,,,,,67',
',67,,67,67,,67,67,67,,67,67,67,,,67,67,66,66,67,,66,67,66,,,,,,,67,',
',,,,67,,,66,,,,,,66,,66,,66,66,,66,66,66,,66,66,66,,,66,66,65,65,66',
',65,66,65,,,,,,,66,,,,,,66,,,65,,,,,,65,,65,,65,65,,65,65,65,,65,65',
'65,,,65,65,64,64,65,,64,65,64,,,,,,,65,,,,,,65,,,64,,,,,,64,,64,,64',
'64,,64,64,64,,64,64,64,,,64,64,110,110,64,,110,64,110,,,,,,,64,,,,,',
'64,,,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,110,110,229',
'229,110,,229,110,229,,,,,,,110,,,,,,110,,,229,,,,,,229,,229,,229,229',
',229,229,229,,229,229,,,,229,229,224,224,229,,224,229,224,,,,,,,229',
',,,,,229,,,224,,,,,,224,,224,,224,224,,224,224,224,,224,224,,,,224,224',
',,224,220,220,224,,220,220,220,,,,224,,,,,,224,,,,,,220,,,,,,220,,220',
',220,220,,220,220,220,,220,220,,,,220,220,63,63,220,,63,220,63,,,,,',
',220,,,,,,220,,,63,,,,,,63,,63,,63,63,,63,63,63,,63,63,63,,,63,63,280',
'280,63,,280,63,280,280,,,,,,63,,,,,,63,,,280,,,,,,280,,280,,280,280',
',280,280,280,,280,280,280,,,280,280,209,209,280,,209,280,209,,,,,,,280',
',,,,,280,,,209,,,,,,209,,209,,209,209,,209,209,209,,209,209,,,,209,209',
'208,208,209,,208,209,208,208,,,,,,209,,,,,,209,,,208,,,,,,208,,208,',
'208,208,,208,208,208,,208,208,208,,,208,208,281,281,208,,281,208,281',
'281,,,,,,208,,,,,,208,,,281,,,,,,281,,281,,281,281,,281,281,281,,281',
'281,281,,,281,281,207,207,281,,207,281,207,207,,,,,,281,,,,,,281,,,207',
',,,,,207,,207,,207,207,,207,207,207,,207,207,207,,,207,207,200,200,207',
',200,207,200,200,,,,,,207,,,,,,207,,,200,,,,,,200,,200,,200,200,,200',
'200,200,,200,200,200,,,200,200,61,61,200,,61,200,61,,,,,,,200,,,,,,200',
',,61,,,,,,61,,61,,61,61,,61,61,61,,61,61,61,,,61,61,171,171,61,,171',
'61,171,,,,,,,61,,,,,,61,,,171,,,,,,171,,171,,171,171,,171,171,171,,171',
'171,,,,171,171,52,52,171,,52,171,52,,,,,,,171,,,,,,171,,,52,,,,,,52',
',52,,52,52,,52,52,52,,52,52,,,,52,52,,,52,47,47,52,,47,47,47,,,,52,',
',,,,52,,,,,,47,,,,,,47,,47,,47,47,,47,47,47,,47,47,,,,47,47,170,170',
'47,,170,47,170,,,,,,,47,,,,,,47,,,170,,,,,,170,,170,,170,170,,170,170',
'170,,170,170,,,,170,170,169,169,170,,169,170,169,,,,,,,170,,,,,,170',
',,169,,,,,,169,,169,,169,169,,169,169,169,,169,169,,,,169,169,292,292',
'169,,292,169,292,,,,,,,169,,,,,,169,,,292,,,,,,292,,292,,292,292,,292',
'292,292,,292,292,,,,292,292,41,41,292,,41,292,41,,,,,,,292,,,,,,292',
',,41,,,,,,41,,41,,41,41,,41,41,41,,41,41,,,,41,41,40,40,41,,40,41,40',
',,,,,,41,,,,,,41,,,40,,,,,,40,,40,,40,40,,40,40,40,,40,40,,,,40,40,39',
'39,40,,39,40,39,,,,,,,40,,,,,,40,,,39,,,,,,39,,39,,39,39,,39,39,39,',
'39,39,,,,39,39,38,38,39,,38,39,38,,,,,,,39,,,,,,39,,,38,,,,,,38,,38',
',38,38,,38,38,38,,38,38,,,,38,38,308,308,38,,308,38,308,,,,,,,38,,,',
',,38,,,308,,,,,,308,,308,,308,308,,308,308,308,,308,308,,,,308,308,320',
'320,308,,320,308,320,320,,,,,,308,,,,,,308,,,320,,,,,,320,,320,,320',
'320,,320,320,320,,320,320,320,,,320,320,13,13,320,,13,320,13,,,,,,,320',
',,,,,320,,,13,,,,,,13,,13,,13,13,,13,13,13,,13,13,,,,13,13,12,12,13',
',12,13,12,,,,,,,13,,,,,,13,,,12,,,,,,12,,12,,12,12,,12,12,12,,12,12',
',,,12,12,11,11,12,,11,12,11,,,,,,,12,,,,,,12,,,11,,,,,,11,,11,,11,11',
',11,11,11,,11,11,,,,11,11,336,336,11,,336,11,336,336,,,,,,11,,,,,,11',
',,336,,,,,,336,,336,,336,336,,336,336,336,,336,336,336,,,336,336,338',
'338,336,,338,336,338,338,,,,,,336,,,,,,336,,,338,,,,,,338,,338,,338',
'338,,338,338,338,,338,338,338,,,338,338,4,4,338,,4,338,4,,,,,,,338,',
',,,,338,,,4,,,,,,4,,4,,4,4,,4,4,4,4,4,4,4,,,4,4,339,339,4,,339,4,339',
'339,,,,,,4,,,,,,4,,,339,,,,,,339,,339,,339,339,,339,339,339,,339,339',
'339,,,339,339,0,0,339,,0,339,0,,,,,,,339,,,,,,339,,,0,,,,,,0,,0,,0,0',
',0,0,0,,0,0,0,,,0,0,87,87,0,,87,0,87,,,,,,,0,,,,,,0,,,87,,,,,,87,,87',
',87,87,,87,87,87,,87,87,,,,87,87,,,87,,,87,,,,235,235,235,235,87,235',
'235,235,235,235,87,235,235,,,,,,235,235,235,191,191,191,191,,191,191',
'191,191,191,,191,191,,,235,235,,191,191,191,240,240,240,240,,240,240',
'240,240,240,,240,240,,,191,191,,240,240,240,,,,,,,,,,,,,,,,240,240' ]
        racc_action_check = arr = ::Array.new(5016, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4833,   274,   nil,   nil,  4741,   261,   nil,   123,   nil,   nil,
   299,  4603,  4557,  4511,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   179,   221,  4373,  4327,
  4281,  4235,    78,   196,   122,    85,   nil,  4051,    87,   nil,
   nil,   nil,  4002,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   223,  3910,   208,  3588,  3355,  3309,  3263,  3217,  2987,  2570,
    30,     1,  1742,  1788,  1834,  1880,  1926,  1972,  2018,  2064,
  2110,  2156,  2202,  2248,  2294,  2340,  2386,  4879,  2478,  2524,
  1601,   163,  2662,   169,  2757,  2803,   178,   113,   135,   238,
  3033,   nil,   230,   -32,  3171,   360,   nil,   421,   482,   543,
  3401,    94,   nil,   nil,   nil,   106,    -6,   nil,   nil,   nil,
   nil,   nil,   604,    90,   nil,   111,   nil,   nil,   200,   726,
   nil,   101,   nil,   207,   nil,   nil,   nil,   nil,   nil,    22,
   130,   nil,   nil,   nil,   nil,  1239,  1177,  1787,  1741,  1535,
  1219,  1263,  1290,  1314,  1358,  1382,  1426,  1450,  1507,  1564,
   177,   116,    55,    -6,   nil,   nil,  2432,   nil,  1092,  4143,
  4097,  3956,   232,   234,   nil,   nil,     5,   nil,   -10,    13,
   127,   120,    77,    24,    14,   nil,   nil,   nil,   nil,   nil,
   nil,  4927,   787,   195,   nil,   213,   nil,   215,   156,   nil,
  3864,   nil,   205,   nil,   197,    27,   nil,  3818,  3726,  3680,
  1647,   168,   127,   nil,     3,   142,   139,    16,   nil,    24,
  3542,   nil,   nil,     5,  3493,   nil,   nil,   nil,   nil,  3447,
   nil,  3125,  3079,    33,   nil,  4906,   nil,   116,  2941,   131,
  4948,  2895,  2849,   155,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  2711,   153,   nil,   171,
   nil,   113,   157,  2616,   nil,   198,    26,   200,   179,    80,
  1696,   nil,   173,   202,   206,   208,   nil,    59,   nil,   206,
  3634,  3772,   nil,   nil,   848,   nil,   nil,   nil,   909,   nil,
   970,   219,  4189,    19,   nil,   nil,   nil,   nil,  1031,  1153,
   232,   174,   nil,   nil,   nil,   665,    62,   nil,  4419,   240,
   218,   nil,   244,   250,   nil,   nil,   nil,   251,   253,   nil,
  4465,   nil,   nil,   nil,   244,   261,   nil,   262,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,  4649,   nil,  4695,  4787,
   nil,   nil,   266,   nil,   nil,   nil,   nil,   267,   nil,   268,
   nil,   269,   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
  -204,  -205,    -1,    -2,    -3,    -4,    -7,    -9,   -10,   -15,
  -104,  -205,  -205,  -205,   -44,   -45,   -46,   -47,   -48,   -49,
   -50,   -51,   -52,   -53,   -54,   -55,   -56,   -57,   -58,   -59,
   -60,   -61,   -62,   -63,   -64,   -69,   -70,   -74,  -205,  -205,
  -205,  -205,  -205,  -114,  -205,  -205,  -159,  -205,  -205,  -169,
  -170,  -171,  -205,  -173,  -180,  -181,  -182,  -183,  -184,  -185,
  -205,  -205,    -6,  -205,  -205,  -205,  -205,  -205,  -205,  -205,
  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,
  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,  -205,
  -205,  -205,  -122,  -117,  -204,  -204,   -27,  -205,   -34,  -205,
  -205,   -71,  -205,  -205,  -205,  -205,   -81,  -205,  -205,  -205,
  -205,  -204,  -148,  -149,  -115,  -204,  -204,  -140,  -142,  -143,
  -144,  -145,   -42,  -205,  -162,  -205,  -165,  -166,  -205,  -177,
  -172,  -205,   357,    -5,    -8,   -11,   -12,   -13,   -14,  -205,
   -17,   -18,  -157,  -158,   -19,   -20,   -21,   -22,   -23,   -24,
   -25,   -26,   -28,   -29,   -30,   -31,   -32,   -33,   -35,   -36,
   -37,   -38,   -39,  -205,   -40,   -99,  -205,   -75,  -205,  -197,
  -203,  -191,  -188,  -186,  -112,  -123,  -180,  -126,  -184,  -205,
  -194,  -192,  -200,  -182,  -183,  -190,  -195,  -196,  -198,  -199,
  -201,  -122,  -121,  -205,  -120,  -205,   -41,  -186,   -66,   -76,
  -205,   -79,  -186,  -153,  -156,  -205,   -73,  -205,  -205,  -205,
  -122,  -188,  -204,  -150,  -205,  -205,  -205,  -205,  -146,  -205,
  -205,  -160,  -163,  -205,  -205,  -174,  -175,  -176,  -178,  -205,
   -16,  -205,  -205,  -186,  -101,  -122,  -111,  -205,  -189,  -205,
  -187,  -205,  -205,  -186,  -125,  -127,  -191,  -192,  -193,  -194,
  -197,  -200,  -202,  -203,  -118,  -119,  -187,  -205,   -68,  -205,
   -78,  -205,  -187,  -205,   -72,  -205,   -84,  -205,   -90,  -205,
  -205,   -94,  -188,  -186,  -205,  -205,  -134,  -205,  -151,  -186,
  -205,  -205,  -141,  -147,   -43,  -161,  -164,  -167,  -168,  -179,
  -103,  -205,  -187,  -186,  -107,  -113,  -108,  -124,  -128,  -129,
  -205,   -65,   -77,   -80,  -154,  -155,   -84,   -83,  -205,  -205,
   -90,   -89,  -205,  -205,   -98,   -93,   -95,  -205,  -205,  -109,
  -205,  -135,  -136,  -137,  -205,  -205,  -131,  -205,  -139,  -100,
  -102,  -110,  -116,   -67,   -82,   -85,  -205,   -88,  -205,  -205,
  -105,  -106,  -205,  -133,  -152,  -130,  -138,  -205,   -87,  -205,
   -92,  -205,   -97,  -132,   -86,   -91,   -96 ]

racc_goto_table = [
     2,     3,   101,    96,    98,    99,   115,   165,   130,   127,
   173,   172,   128,   202,   119,   307,   313,   121,   237,   212,
   311,   233,   282,   215,   283,   239,   295,   271,   235,   211,
   105,   107,   108,   109,   143,   143,    62,   123,   270,   122,
   141,   144,   142,   142,   129,   135,   136,   137,   138,   257,
   193,   195,   297,   335,   261,   334,   199,   274,   139,   275,
   122,   140,   337,   321,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   234,   168,   291,   192,   192,   316,   216,
   197,   164,   122,   133,   205,   300,   122,   304,   125,   134,
     1,   228,   168,   229,   227,   nil,   nil,   nil,   nil,   243,
   nil,   nil,   213,   nil,   nil,   nil,   213,   218,   317,   nil,
   nil,   nil,   nil,   nil,   279,   318,   nil,   nil,   273,   272,
   nil,   324,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   115,   nil,   nil,   331,   nil,   nil,   nil,   nil,
   nil,   119,   nil,   293,   121,   nil,   nil,   nil,   163,   nil,
   nil,   105,   107,   108,   258,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   287,   289,   119,   128,   119,   121,
   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   259,   122,   168,   nil,   nil,   nil,   nil,   265,   267,   330,
   nil,   nil,   284,   276,   nil,   nil,   288,   nil,   nil,   nil,
   nil,   129,   nil,   284,   290,   nil,   nil,   nil,   nil,   nil,
   168,   nil,   nil,   298,   299,   nil,   nil,   nil,   nil,   322,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   nil,
   nil,   nil,   nil,   nil,   nil,   305,   nil,   nil,   nil,   nil,
   nil,   nil,   122,   nil,   nil,   nil,   nil,   333,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   325,   327,   nil,   nil,   163,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   105,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   347,   nil,   349,   351 ]

racc_goto_check = [
     2,     3,    37,     9,     9,     9,    62,    49,    75,    71,
    54,    52,    31,    42,    35,    44,    48,    30,    53,    63,
    45,    50,    68,    63,    68,    36,    55,    47,    56,    52,
     9,     9,     9,     9,    31,    31,     5,    11,    46,     9,
    12,    12,    30,    30,     9,     7,     7,     7,     7,    36,
    58,    58,    59,    43,    36,    44,    41,    53,    11,    64,
     9,     9,    45,    65,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,    49,     9,    36,     9,     9,    47,    67,
    11,    13,     9,     5,    11,    36,     9,    69,    70,     6,
     1,    76,     9,    77,    79,   nil,   nil,   nil,   nil,    54,
   nil,   nil,     3,   nil,   nil,   nil,     3,     3,    53,   nil,
   nil,   nil,   nil,   nil,    42,    36,   nil,   nil,    54,    52,
   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    62,   nil,   nil,    36,   nil,   nil,   nil,   nil,
   nil,    35,   nil,    54,    30,   nil,   nil,   nil,     9,   nil,
   nil,     9,     9,     9,    37,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    71,    75,    35,    31,    35,    30,
   nil,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     9,     9,   nil,   nil,   nil,   nil,     2,     2,    49,
   nil,   nil,     9,     3,   nil,   nil,     9,   nil,   nil,   nil,
   nil,     9,   nil,     9,     9,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,     9,     9,   nil,   nil,   nil,   nil,    62,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,   nil,   nil,   nil,    37,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,     2,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   100,     0,     1,   nil,    32,    36,   -19,   nil,    -8,
   nil,   -10,   -30,     1,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -28,   -36,   nil,   nil,   nil,   -31,  -148,   -34,   nil,   nil,
   nil,   -46,   -90,  -255,  -251,  -248,  -171,  -182,  -253,   -83,
  -145,   nil,   -81,  -154,   -82,  -212,  -140,   nil,   -44,  -188,
   nil,   nil,   -38,   -92,  -153,  -214,   nil,   -27,  -195,  -165,
    50,   -39,   nil,   nil,   nil,   -44,   -30,   -28,   nil,   -27 ]

racc_goto_default = [
   nil,   nil,   nil,   194,     4,     5,     6,     7,     8,    10,
     9,   269,   nil,   nil,    14,    35,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,   nil,   nil,    36,    37,
   102,   nil,   nil,   106,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    41,   nil,   nil,   nil,   174,   nil,    93,   nil,   175,
   179,   177,   111,   nil,   nil,   nil,   116,   nil,   117,   203,
   nil,   nil,    49,    50,    52,   nil,   nil,   nil,   131,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 78, :_reduce_1,
  1, 78, :_reduce_none,
  1, 79, :_reduce_3,
  1, 81, :_reduce_4,
  3, 81, :_reduce_5,
  2, 81, :_reduce_6,
  1, 82, :_reduce_7,
  3, 82, :_reduce_8,
  1, 83, :_reduce_none,
  1, 84, :_reduce_10,
  3, 84, :_reduce_11,
  3, 84, :_reduce_12,
  3, 84, :_reduce_13,
  3, 84, :_reduce_14,
  1, 86, :_reduce_none,
  4, 86, :_reduce_16,
  3, 86, :_reduce_17,
  3, 86, :_reduce_18,
  3, 86, :_reduce_19,
  3, 86, :_reduce_20,
  3, 86, :_reduce_21,
  3, 86, :_reduce_22,
  3, 86, :_reduce_23,
  3, 86, :_reduce_24,
  3, 86, :_reduce_25,
  3, 86, :_reduce_26,
  2, 86, :_reduce_27,
  3, 86, :_reduce_28,
  3, 86, :_reduce_29,
  3, 86, :_reduce_30,
  3, 86, :_reduce_31,
  3, 86, :_reduce_32,
  3, 86, :_reduce_33,
  2, 86, :_reduce_34,
  3, 86, :_reduce_35,
  3, 86, :_reduce_36,
  3, 86, :_reduce_37,
  3, 86, :_reduce_38,
  3, 86, :_reduce_39,
  3, 86, :_reduce_40,
  3, 86, :_reduce_41,
  1, 88, :_reduce_42,
  3, 88, :_reduce_43,
  1, 87, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 92, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 108, :_reduce_63,
  1, 108, :_reduce_64,
  5, 91, :_reduce_65,
  3, 91, :_reduce_66,
  6, 91, :_reduce_67,
  4, 91, :_reduce_68,
  1, 91, :_reduce_69,
  1, 95, :_reduce_70,
  2, 95, :_reduce_71,
  4, 115, :_reduce_72,
  3, 115, :_reduce_73,
  1, 115, :_reduce_74,
  3, 116, :_reduce_75,
  2, 114, :_reduce_76,
  3, 118, :_reduce_77,
  2, 118, :_reduce_78,
  2, 117, :_reduce_79,
  4, 117, :_reduce_80,
  2, 98, :_reduce_81,
  5, 120, :_reduce_82,
  4, 120, :_reduce_83,
  0, 121, :_reduce_none,
  2, 121, :_reduce_85,
  4, 121, :_reduce_86,
  3, 121, :_reduce_87,
  6, 99, :_reduce_88,
  5, 99, :_reduce_89,
  0, 122, :_reduce_none,
  4, 122, :_reduce_91,
  3, 122, :_reduce_92,
  5, 97, :_reduce_93,
  1, 123, :_reduce_94,
  2, 123, :_reduce_95,
  5, 124, :_reduce_96,
  4, 124, :_reduce_97,
  1, 125, :_reduce_98,
  1, 90, :_reduce_none,
  4, 90, :_reduce_100,
  1, 127, :_reduce_101,
  3, 127, :_reduce_102,
  3, 126, :_reduce_103,
  1, 85, :_reduce_104,
  6, 85, :_reduce_105,
  6, 85, :_reduce_106,
  5, 85, :_reduce_107,
  5, 85, :_reduce_108,
  5, 85, :_reduce_109,
  4, 132, :_reduce_110,
  1, 133, :_reduce_111,
  1, 129, :_reduce_112,
  3, 129, :_reduce_113,
  1, 128, :_reduce_114,
  2, 128, :_reduce_115,
  6, 96, :_reduce_116,
  2, 96, :_reduce_117,
  3, 134, :_reduce_118,
  3, 134, :_reduce_119,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  0, 131, :_reduce_122,
  1, 131, :_reduce_123,
  3, 131, :_reduce_124,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  3, 136, :_reduce_128,
  3, 136, :_reduce_129,
  6, 100, :_reduce_130,
  5, 100, :_reduce_131,
  7, 101, :_reduce_132,
  6, 101, :_reduce_133,
  1, 141, :_reduce_none,
  2, 141, :_reduce_135,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  6, 102, :_reduce_138,
  5, 102, :_reduce_139,
  1, 143, :_reduce_140,
  3, 143, :_reduce_141,
  1, 145, :_reduce_142,
  1, 145, :_reduce_143,
  1, 145, :_reduce_144,
  1, 145, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_147,
  1, 139, :_reduce_148,
  1, 139, :_reduce_149,
  1, 140, :_reduce_150,
  2, 140, :_reduce_151,
  4, 140, :_reduce_152,
  1, 119, :_reduce_153,
  3, 119, :_reduce_154,
  3, 146, :_reduce_155,
  1, 146, :_reduce_156,
  1, 89, :_reduce_none,
  1, 89, :_reduce_none,
  1, 94, :_reduce_159,
  3, 103, :_reduce_160,
  4, 103, :_reduce_161,
  2, 103, :_reduce_162,
  3, 106, :_reduce_163,
  4, 106, :_reduce_164,
  2, 106, :_reduce_165,
  1, 147, :_reduce_166,
  3, 147, :_reduce_167,
  3, 148, :_reduce_168,
  1, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 149, :_reduce_171,
  2, 150, :_reduce_172,
  1, 151, :_reduce_173,
  1, 153, :_reduce_174,
  1, 154, :_reduce_175,
  2, 152, :_reduce_176,
  1, 155, :_reduce_177,
  1, 156, :_reduce_178,
  2, 156, :_reduce_179,
  1, 111, :_reduce_180,
  1, 109, :_reduce_181,
  1, 110, :_reduce_182,
  1, 105, :_reduce_183,
  1, 104, :_reduce_184,
  1, 107, :_reduce_185,
  0, 113, :_reduce_none,
  1, 113, :_reduce_187,
  0, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  0, 80, :_reduce_204 ]

racc_reduce_n = 205

racc_shift_n = 357

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :LBRACK => 6,
  :RBRACK => 7,
  :LBRACE => 8,
  :RBRACE => 9,
  :SYMBOL => 10,
  :FARROW => 11,
  :COMMA => 12,
  :TRUE => 13,
  :FALSE => 14,
  :EQUALS => 15,
  :APPENDS => 16,
  :LESSEQUAL => 17,
  :NOTEQUAL => 18,
  :DOT => 19,
  :COLON => 20,
  :LLCOLLECT => 21,
  :RRCOLLECT => 22,
  :QMARK => 23,
  :LPAREN => 24,
  :RPAREN => 25,
  :ISEQUAL => 26,
  :GREATEREQUAL => 27,
  :GREATERTHAN => 28,
  :LESSTHAN => 29,
  :IF => 30,
  :ELSE => 31,
  :DEFINE => 32,
  :ELSIF => 33,
  :VARIABLE => 34,
  :CLASS => 35,
  :INHERITS => 36,
  :NODE => 37,
  :BOOLEAN => 38,
  :NAME => 39,
  :SEMIC => 40,
  :CASE => 41,
  :DEFAULT => 42,
  :AT => 43,
  :LCOLLECT => 44,
  :RCOLLECT => 45,
  :CLASSREF => 46,
  :NOT => 47,
  :OR => 48,
  :AND => 49,
  :UNDEF => 50,
  :PARROW => 51,
  :PLUS => 52,
  :MINUS => 53,
  :TIMES => 54,
  :DIV => 55,
  :LSHIFT => 56,
  :RSHIFT => 57,
  :UMINUS => 58,
  :MATCH => 59,
  :NOMATCH => 60,
  :REGEX => 61,
  :IN_EDGE => 62,
  :OUT_EDGE => 63,
  :IN_EDGE_SUB => 64,
  :OUT_EDGE_SUB => 65,
  :IN => 66,
  :UNLESS => 67,
  :PIPE => 68,
  :SELBRACE => 69,
  :LOW => 70,
  :HIGH => 71,
  :CALL => 72,
  :MODULO => 73,
  :DELETES => 74,
  :TITLE_COLON => 75,
  :CASE_COLON => 76 }

racc_nt_base = 77

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "SELBRACE",
  "LOW",
  "HIGH",
  "CALL",
  "MODULO",
  "DELETES",
  "TITLE_COLON",
  "CASE_COLON",
  "$start",
  "program",
  "statements",
  "nil",
  "syntactic_statements",
  "syntactic_statement",
  "any_expression",
  "relationship_expression",
  "resource_expression",
  "expression",
  "higher_precedence",
  "expressions",
  "match_rvalue",
  "selector_entries",
  "call_function_expression",
  "primary_expression",
  "literal_expression",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "array",
  "boolean",
  "default",
  "hash",
  "regex",
  "text_or_name",
  "type",
  "undef",
  "name",
  "quotedtext",
  "endcomma",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "case_colon",
  "selector_entry",
  "selector_entry_list",
  "at",
  "resourceinstances",
  "endsemi",
  "attribute_operations",
  "resourceinst",
  "title_colon",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "parameter",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 57)
  def _reduce_1(val, _values, result)
     result = Factory.block_or_expression(*val[0]) 
    result
  end
.,.,

# reduce 2 omitted

module_eval(<<'.,.,', 'egrammar.ra', 62)
  def _reduce_3(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_4(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_5(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_6(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 74)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_8(val, _values, result)
     result = aryfy(val[0]).push val[2] 
    result
  end
.,.,

# reduce 9 omitted

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_11(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_12(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_13(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 85)
  def _reduce_14(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_16(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_17(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_18(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_19(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_20(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_21(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_22(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_23(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 100)
  def _reduce_24(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 101)
  def _reduce_25(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_26(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_27(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_28(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_29(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_30(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_31(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_32(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_33(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_34(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_35(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_36(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_37(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_38(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_39(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 116)
  def _reduce_40(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 117)
  def _reduce_41(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 125)
  def _reduce_42(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_43(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 44 omitted

# reduce 45 omitted

# reduce 46 omitted

# reduce 47 omitted

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

# reduce 53 omitted

# reduce 54 omitted

# reduce 55 omitted

# reduce 56 omitted

# reduce 57 omitted

# reduce 58 omitted

# reduce 59 omitted

# reduce 60 omitted

# reduce 61 omitted

# reduce 62 omitted

module_eval(<<'.,.,', 'egrammar.ra', 156)
  def _reduce_63(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_64(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 165)
  def _reduce_65(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 169)
  def _reduce_66(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 173)
  def _reduce_67(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_68(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_69(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_70(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 188)
  def _reduce_71(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_72(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 192)
  def _reduce_73(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_74(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_75(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_76(val, _values, result)
          result = Factory.LAMBDA(val[0], val[1])
#      loc result, val[1] # TODO
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_77(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_78(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_79(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_80(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 231)
  def _reduce_81(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 238)
  def _reduce_82(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 242)
  def _reduce_83(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 84 omitted

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_85(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 254)
  def _reduce_86(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 258)
  def _reduce_87(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 267)
  def _reduce_88(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 271)
  def _reduce_89(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_91(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_92(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_93(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_94(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_95(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_96(val, _values, result)
            result = Factory.WHEN(val[0], val[3])
        loc result, val[1], val[4]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_97(val, _values, result)
            result = Factory.WHEN(val[0], nil)
        loc result, val[1], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_98(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 99 omitted

module_eval(<<'.,.,', 'egrammar.ra', 324)
  def _reduce_100(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_101(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 330)
  def _reduce_102(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 335)
  def _reduce_103(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_104(val, _values, result)
          result = val[0]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 354)
  def _reduce_105(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        tmp = Factory.RESOURCE(Factory.fqn(token_text(val[1])), val[3])
        tmp.form = val[0]
        tmp
      when :defaults
        error "A resource default can not be virtual or exported"
      when :override
        error "A resource override can not be virtual or exported"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[1], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 369)
  def _reduce_106(val, _values, result)
          result = case Factory.resource_shape(val[1])
      when :resource, :class
        error "Defaults are not virtualizable"
      when :defaults
        error "Defaults are not virtualizable"
      when :override
        error "Defaults are not virtualizable"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 381)
  def _reduce_107(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
      when :defaults
        error "A resource default can not specify a resource name"
      when :override
        error "A resource override does not allow override of name of resource"
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 394)
  def _reduce_108(val, _values, result)
          result = case Factory.resource_shape(val[0])
      when :resource, :class
        # This catches deprecated syntax.
        error "All resource specifications require names"
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO shuld it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error "Expression is not valid as a resource, resource-default, or resource-override"
      end
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_109(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 414)
  def _reduce_110(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_111(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 419)
  def _reduce_112(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 420)
  def _reduce_113(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_114(val, _values, result)
     result = :virtual  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_115(val, _values, result)
     result = :exported 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_116(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 442)
  def _reduce_117(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_118(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 448)
  def _reduce_119(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 120 omitted

# reduce 121 omitted

module_eval(<<'.,.,', 'egrammar.ra', 461)
  def _reduce_122(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 462)
  def _reduce_123(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_124(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_128(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_129(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 493)
  def _reduce_130(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc result, val[0], val[5]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 498)
  def _reduce_131(val, _values, result)
          result = Factory.DEFINITION(classname(val[1][:value]), val[2], nil)
      loc result, val[0], val[4]
      @lexer.indefine = false
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_132(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 518)
  def _reduce_133(val, _values, result)
          @lexer.namepop
      result = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), nil)
      loc result, val[0], val[5]
      
    result
  end
.,.,

# reduce 134 omitted

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_135(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 543)
  def _reduce_138(val, _values, result)
          result = Factory.NODE(val[1], val[2], val[4])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 547)
  def _reduce_139(val, _values, result)
          result = Factory.NODE(val[1], val[2], nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_140(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 558)
  def _reduce_141(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 563)
  def _reduce_142(val, _values, result)
     result = Factory.fqn(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 565)
  def _reduce_144(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 145 omitted

# reduce 146 omitted

module_eval(<<'.,.,', 'egrammar.ra', 571)
  def _reduce_147(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 576)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 577)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 581)
  def _reduce_150(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 582)
  def _reduce_151(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 583)
  def _reduce_152(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 587)
  def _reduce_153(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_154(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_155(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 593)
  def _reduce_156(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_159(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 612)
  def _reduce_160(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_161(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_162(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_163(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_164(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 619)
  def _reduce_165(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_166(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_167(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 626)
  def _reduce_168(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 169 omitted

# reduce 170 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_171(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 633)
  def _reduce_172(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_173(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_174(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_176(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_177(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 641)
  def _reduce_178(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 642)
  def _reduce_179(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_180(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_181(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_182(val, _values, result)
     result = Factory.literal(:undef); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 647)
  def _reduce_183(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_184(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 655)
  def _reduce_185(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_187(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 188 omitted

# reduce 189 omitted

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

# reduce 193 omitted

# reduce 194 omitted

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

# reduce 201 omitted

# reduce 202 omitted

# reduce 203 omitted

module_eval(<<'.,.,', 'egrammar.ra', 684)
  def _reduce_204(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
