#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 754)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'58,61,154,-129,59,53,318,54,-237,80,276,-239,237,134,-238,-226,-240',
'-235,268,269,319,393,279,101,18,104,279,99,100,334,42,374,45,238,47',
'12,335,46,36,39,250,44,37,10,11,-129,135,66,17,103,-237,38,277,-239',
'15,16,-238,-226,-240,-235,58,61,67,300,59,53,237,54,43,111,274,81,35',
'62,111,64,65,63,313,66,48,49,51,50,18,255,52,238,278,370,42,369,45,279',
'47,114,341,46,36,39,112,44,37,111,110,112,107,66,17,110,237,38,360,79',
'15,16,111,370,111,369,58,61,67,66,59,53,253,54,43,254,343,238,35,62',
'112,64,65,79,110,79,48,49,51,50,18,230,52,112,111,112,42,110,45,110',
'47,12,79,46,36,39,69,44,37,10,11,58,61,66,17,59,71,38,330,237,15,16',
'257,256,327,112,58,61,67,110,59,53,66,54,43,72,73,74,35,62,238,64,65',
'351,352,274,48,49,51,50,18,275,52,308,266,354,42,255,45,301,47,12,237',
'46,36,39,357,44,37,10,11,250,313,66,17,66,362,38,363,303,15,16,250,238',
'75,77,76,78,67,249,248,367,307,371,43,373,317,226,35,62,229,64,65,380',
'227,382,48,49,51,50,58,61,52,237,59,53,274,54,323,226,79,79,216,215',
'386,71,120,389,274,120,392,151,314,313,18,58,61,149,396,59,42,373,45',
'398,47,12,399,46,36,39,400,44,37,10,11,121,403,66,17,404,405,38,120',
'79,15,16,71,413,68,415,416,417,67,303,134,,,131,43,,,,35,62,,64,65,',
',,48,49,51,50,58,61,52,67,59,53,,54,409,80,,,,135,62,,,,,,,,,101,18',
'104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,103,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,81,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46',
'36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44',
'37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62',
',64,65,,,,48,49,51,50,58,61,52,,59,53,,54,407,,,,,,,,,,,,,,,,18,58,61',
',,59,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,',
',67,,134,,,131,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,67,59,53,',
'54,402,80,,,,135,62,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,336',
'80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,138,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15',
'16,,,,,58,61,67,,59,53,140,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,',
',,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54,142',
'80,,,,,,,,,,,,,,101,18,104,,99,100,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,,,66,17,103,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61',
'67,,59,53,,153,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47',
'114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,',
'58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,',
'45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,',
'59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12',
',46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54',
'43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39',
',44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11',
',,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,170,184,176,185',
'47,177,187,178,36,169,,172,167,,,,,66,17,188,183,168,,,15,166,,,,,,',
'67,,,,,186,171,,,,35,62,,64,65,,,,179,180,182,181,58,61,52,80,59,53',
',54,,,,,,,,,,101,,104,,99,100,,18,,,,,,42,,45,,47,114,,46,36,39,,44',
'37,103,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64',
'65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17',
',,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51',
'50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16',
',,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,',
'42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62',
',64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,',
'66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48',
'49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,',
'15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,',
'52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58',
'61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45',
',47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36',
'39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,212,35',
'62,,64,65,,,,48,49,51,50,18,214,52,,,,42,,45,,47,12,,46,36,39,,44,37',
'10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,275,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67',
',59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114',
',46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,',
',,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44',
'37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52',
',59,53,,54,142,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37',
'10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65',
',,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,',
',38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50',
'18,,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16',
',,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59,53,,54',
'311,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66',
'17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49',
'51,50,18,242,52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38',
',,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18',
',52,,,,42,,45,,47,12,,46,36,39,,44,37,10,11,,,66,17,,,38,,,15,16,,,',
',58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42',
',45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59',
'53,,54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46',
'36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65',
',,,48,49,51,50,58,61,52,,59,53,,54,375,,,,,,,,,,,,,,,,18,,,,,,42,,45',
',47,114,,46,36,39,,44,37,,,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53',
',54,43,,,,35,62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,12,,46,36',
'39,,44,37,10,11,,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35',
'62,,64,65,,,,48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,',
',,,66,17,,,38,,,15,16,,,,,58,61,67,,59,53,,54,43,,,,35,62,,64,65,,,',
'48,49,51,50,18,,52,,,,42,,45,,47,114,,46,36,39,,44,37,,,,,66,17,,,38',
',,15,16,,,,,,,67,,,,,,43,,,,35,62,,64,65,,,,48,49,51,50,58,61,52,,59',
'53,,54,321,,,,,,,,,,,,,,,,18,,,,,,42,,45,,47,12,,46,36,39,,44,37,10',
'11,80,,66,17,,,38,,,15,16,,,91,101,,104,67,99,100,,92,,43,,,,35,62,',
'64,65,,,,48,49,51,50,,103,52,,,,80,,,84,85,87,86,89,90,,82,83,96,91',
'101,304,104,81,99,100,,92,94,93,95,,58,61,,,59,,,,,,,,88,,103,,,,98',
'97,,,84,85,87,86,89,90,,82,83,80,,245,,,81,,,134,,,131,96,91,101,,104',
',99,100,,92,94,93,95,,88,,,,,67,,,,,,,,,103,135,62,,98,97,,,84,85,87',
'86,89,90,,82,83,80,,244,,,81,,,,,,,96,91,101,,104,,99,100,,92,94,93',
'95,,88,,,,,,,,,,,,,,103,,,,98,97,,,84,85,87,86,89,90,,82,83,80,,243',
',,81,,,,,,,96,91,101,,104,80,99,100,,92,94,93,95,,88,,,,,101,,104,,99',
'100,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,103,,96,91,101,81,104',
',99,100,,92,94,93,95,82,83,,,,,,81,,,,88,,,,103,,,,98,97,,80,84,85,87',
'86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88',
',,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99',
'100,,92,94,93,95,,268,269,,,,,,,,,88,,,,103,,58,61,98,97,59,80,84,85',
'87,86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,',
'134,,88,131,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,67,,,,101,81',
'104,,99,100,135,62,,,,80,,,,,280,,,,,,88,96,91,101,103,104,,99,100,',
'92,94,93,95,87,86,,,,82,83,,,,,,81,,,103,,,,98,97,,80,84,85,87,86,89',
'90,,82,83,,88,96,91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,',
',103,,,,,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100',
',92,94,93,95,80,,,,,,,,,,,88,,,101,103,104,,99,100,80,,,84,85,87,86',
'89,90,,82,83,96,91,101,272,104,81,99,100,103,92,94,93,95,,,,,,,,,,,82',
'83,,88,,103,,81,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101,81,104',
',99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89',
'90,,82,83,,,,,101,81,104,,99,100,,,,,,80,,,,,,,,,,,88,,91,101,103,104',
',99,100,80,92,,84,85,87,86,,,,82,83,,91,101,,104,81,99,100,103,92,,',
',80,,,84,85,87,86,89,90,,82,83,,88,101,103,104,81,99,100,,,,84,85,87',
'86,89,90,80,82,83,,,,,,81,88,,103,96,91,101,,104,,99,100,,92,94,93,95',
',82,83,,88,,,,81,,,,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96',
'91,101,81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,80',
'84,85,87,86,89,90,,82,83,,,96,91,101,81,104,,99,100,,92,94,93,95,,,',
',,,,,,,,88,,,,103,,,,98,97,,80,84,85,87,86,89,90,,82,83,,,96,91,101',
'81,104,,99,100,,92,94,93,95,,,,,,,,,,,,88,,,,103,,,,98,97,,80,84,85',
'87,86,89,90,,82,83,,,,91,101,81,104,,99,100,,92,,80,,,,,,,,,,,,,88,101',
',104,103,99,100,,,,,,84,85,87,86,89,90,,82,83,,,,,,81,103,,,,,80,,,84',
'85,87,86,89,90,,82,83,,,101,88,104,81,99,100,,,,80,,,,,,,,,,,,,,101',
'88,104,103,99,100,,,,,,84,85,87,86,89,90,,82,83,,,,,,81,103,,,,,80,',
',,,87,86,,,,82,83,,,101,88,104,81,99,100,,,,80,,,,,,,,,,,,96,91,101',
'88,104,103,99,100,,92,94,93,95,84,85,87,86,,,,82,83,,,,,,81,103,,,,98',
'97,,,84,85,87,86,89,90,,82,83,,,,88,,81,,,292,184,291,185,,289,187,293',
',286,,288,290,,,,,,88,188,183,294,,,,287,,,,,,,,,,,,186,295,,,,,,,,',
',,,298,299,297,296,292,184,291,185,,289,187,293,,286,,288,290,,,,,,',
'188,183,294,,,,287,,,,,,,,,,,,186,295,,,,,,,,,,,,298,299,297,296,292',
'184,291,185,,289,187,293,,286,,288,290,,,,,,,188,183,294,,,,287,,,,',
',,,,,,,186,295,,,,,,,,,,,,298,299,297,296,292,184,291,185,,289,187,293',
',286,,288,290,,,,,,,188,183,294,,,,287,,,,,,,,,,,,186,295,,,,,,,,,,',
',298,299,297,296' ]
        racc_action_table = arr = ::Array.new(6785, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,68,169,0,0,241,0,181,192,175,179,239,249,182,167,180,168,341,341',
'241,366,324,192,0,192,366,192,192,251,0,324,0,239,0,0,252,0,0,0,213',
'0,0,0,0,169,249,0,0,192,181,0,175,179,0,0,182,167,180,168,404,404,0',
'218,404,404,313,404,0,45,165,192,0,0,307,0,0,0,265,313,0,0,0,0,404,270',
'0,313,190,367,404,367,404,190,404,404,271,404,404,404,45,404,404,12',
'45,307,12,404,404,307,120,404,307,163,404,404,177,321,176,321,4,4,404',
'120,4,4,141,4,404,141,273,120,404,404,12,404,404,162,12,161,404,404',
'404,404,4,120,404,177,114,176,4,177,4,176,4,4,160,4,4,4,4,4,4,4,4,149',
'149,4,4,149,155,4,247,151,4,4,146,146,246,114,399,399,4,114,399,399',
'151,399,4,7,7,7,4,4,151,4,4,281,283,285,4,4,4,4,399,287,4,226,151,302',
'399,144,399,220,399,399,226,399,399,399,305,399,399,399,399,139,309',
'399,399,226,310,399,312,221,399,399,137,226,7,7,7,7,399,129,127,320',
'224,322,399,323,240,126,399,399,119,399,399,328,117,340,399,399,399',
'399,244,244,399,238,244,244,342,244,244,108,106,105,102,101,350,70,352',
'353,356,214,361,63,237,231,244,178,178,62,370,178,244,371,244,373,244',
'244,374,244,244,244,377,244,244,244,244,41,384,244,244,385,391,244,40',
'8,244,244,5,401,1,406,408,410,244,414,178,,,178,244,,,,244,244,,244',
'244,,,,244,244,244,244,398,398,244,178,398,398,,398,398,193,,,,178,178',
',,,,,,,,193,398,193,,193,193,,398,,398,,398,398,,398,398,398,,398,398',
'398,398,,,398,398,193,,398,,,398,398,,,,,245,245,398,,245,245,,245,398',
',,193,398,398,,398,398,,,,398,398,398,398,245,,398,,,,245,,245,,245',
'245,,245,245,245,,245,245,,,,,245,245,,,245,,,245,245,,,,,10,10,245',
',10,10,,10,245,,,,245,245,,245,245,,,,245,245,245,245,10,,245,,,,10',
',10,,10,10,,10,10,10,,10,10,10,10,,,10,10,,,10,,,10,10,,,,,11,11,10',
',11,11,,11,10,,,,10,10,,10,10,,,,10,10,10,10,11,,10,,,,11,,11,,11,11',
',11,11,11,,11,11,11,11,,,11,11,,,11,,,11,11,,,,,250,250,11,,250,250',
',250,11,,,,11,11,,11,11,,,,11,11,11,11,250,,11,,,,250,,250,,250,250',
',250,250,250,,250,250,250,250,,,250,250,,,250,,,250,250,,,,,15,15,250',
',15,15,,15,250,,,,250,250,,250,250,,,,250,250,250,250,15,,250,,,,15',
',15,,15,15,,15,15,15,,15,15,,,,,15,15,,,15,,,15,15,,,,,16,16,15,,16',
'16,,16,15,,,,15,15,,15,15,,,,15,15,15,15,16,,15,,,,16,,16,,16,16,,16',
'16,16,,16,16,,,,,16,16,,,16,,,16,16,,,,,17,17,16,,17,17,,17,16,,,,16',
'16,,16,16,,,,16,16,16,16,17,,16,,,,17,,17,,17,17,,17,17,17,,17,17,,',
',,17,17,,,17,,,17,17,,,,,18,18,17,,18,18,,18,17,,,,17,17,,17,17,,,,17',
'17,17,17,18,,17,,,,18,,18,,18,18,,18,18,18,,18,18,18,18,,,18,18,,,18',
',,18,18,,,,,,,18,,,,,,18,,,,18,18,,18,18,,,,18,18,18,18,396,396,18,',
'396,396,,396,396,,,,,,,,,,,,,,,,396,46,46,,,46,396,,396,,396,396,,396',
'396,396,,396,396,396,396,,,396,396,,,396,,,396,396,,,,,,,396,,46,,,46',
'396,,,,396,396,,396,396,,,,396,396,396,396,380,380,396,46,380,380,,380',
'380,113,,,,46,46,,,,,,,,,113,380,113,,113,113,,380,,380,,380,380,,380',
'380,380,,380,380,380,380,,,380,380,113,,380,,,380,380,,,,,42,42,380',
',42,42,,42,380,,,,380,380,,380,380,,,,380,380,380,380,42,,380,,,,42',
',42,,42,42,,42,42,42,,42,42,,,,,42,42,,,42,,,42,42,,,,,43,43,42,,43',
'43,,43,42,,,,42,42,,42,42,,,,42,42,42,42,43,,42,,,,43,,43,,43,43,,43',
'43,43,,43,43,,,,,43,43,,,43,,,43,43,,,,,44,44,43,,44,44,,44,43,,,,43',
'43,,43,43,,,,43,43,43,43,44,,43,,,,44,,44,,44,44,,44,44,44,,44,44,,',
',,44,44,,,44,,,44,44,,,,,,,44,,,,,,44,,,,44,44,,44,44,,,,44,44,44,44',
'254,254,44,,254,254,,254,254,191,,,,,,,,,,,,,,191,254,191,,191,191,',
'254,,254,,254,254,,254,254,254,,254,254,254,254,,,254,254,191,,254,',
',254,254,,,,,212,212,254,,212,212,,212,254,,,,254,254,,254,254,,,,254',
'254,254,254,212,,254,,,,212,,212,,212,212,,212,212,212,,212,212,,,,',
'212,212,,,212,,,212,212,,,,,52,52,212,,52,52,52,52,212,,,,212,212,,212',
'212,,,,212,212,212,212,52,,212,,,,52,,52,,52,52,,52,52,52,,52,52,52',
'52,,,52,52,,,52,,,52,52,,,,,53,53,52,,53,53,53,53,52,,,,52,52,,52,52',
',,,52,52,52,52,53,,52,,,,53,,53,,53,53,,53,53,53,,53,53,53,53,,,53,53',
',,53,,,53,53,,,,,,,53,,,,,,53,,,,53,53,,53,53,,,,53,53,53,53,54,54,53',
',54,54,,54,54,116,,,,,,,,,,,,,,116,54,116,,116,116,,54,,54,,54,54,,54',
'54,54,,54,54,54,54,,,54,54,116,,54,,,54,54,,,,,60,60,54,,60,60,,60,54',
',,,54,54,,54,54,,,,54,54,54,54,60,,54,,,,60,,60,,60,60,,60,60,60,,60',
'60,60,60,,,60,60,,,60,,,60,60,,,,,369,369,60,,369,369,,369,60,,,,60',
'60,,60,60,,,,60,60,60,60,369,,60,,,,369,,369,,369,369,,369,369,369,',
'369,369,,,,,369,369,,,369,,,369,369,,,,,255,255,369,,255,255,,255,369',
',,,369,369,,369,369,,,,369,369,369,369,255,,369,,,,255,,255,,255,255',
',255,255,255,,255,255,255,255,,,255,255,,,255,,,255,255,,,,,65,65,255',
',65,65,,65,255,,,,255,255,,255,255,,,,255,255,255,255,65,,255,,,,65',
',65,,65,65,,65,65,65,,65,65,,,,,65,65,,,65,,,65,65,,,,,357,357,65,,357',
'357,,357,65,,,,65,65,,65,65,,,,65,65,65,65,357,,65,,,,357,,357,,357',
'357,,357,357,357,,357,357,357,357,,,357,357,,,357,,,357,357,,,,,69,69',
'357,,69,69,,69,357,,,,357,357,,357,357,,,,357,357,357,357,69,,357,,',
',69,,69,,69,69,,69,69,69,,69,69,69,69,,,69,69,,,69,,,69,69,,,,,351,351',
'69,,351,351,,351,69,,,,69,69,,69,69,,,,69,69,69,69,351,,69,,,,351,,351',
',351,351,,351,351,351,,351,351,,,,,351,351,,,351,,,351,351,,,,,71,71',
'351,,71,71,,71,351,,,,351,351,,351,351,,,,351,351,351,351,71,,351,,',
',71,,71,,71,71,,71,71,71,,71,71,71,71,,,71,71,,,71,,,71,71,,,,,72,72',
'71,,72,72,,72,71,,,,71,71,,71,71,,,,71,71,71,71,72,,71,,,,72,,72,,72',
'72,,72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,73,73,72,,73,73,',
'73,72,,,,72,72,,72,72,,,,72,72,72,72,73,,72,,,,73,,73,,73,73,,73,73',
'73,,73,73,73,73,,,73,73,,,73,,,73,73,,,,,74,74,73,,74,74,,74,73,,,,73',
'73,,73,73,,,,73,73,73,73,74,,73,,,,74,,74,,74,74,,74,74,74,,74,74,74',
'74,,,74,74,,,74,,,74,74,,,,,75,75,74,,75,75,,75,74,,,,74,74,,74,74,',
',,74,74,74,74,75,,74,,,,75,,75,,75,75,,75,75,75,,75,75,75,75,,,75,75',
',,75,,,75,75,,,,,76,76,75,,76,76,,76,75,,,,75,75,,75,75,,,,75,75,75',
'75,76,,75,,,,76,,76,,76,76,,76,76,76,,76,76,76,76,,,76,76,,,76,,,76',
'76,,,,,77,77,76,,77,77,,77,76,,,,76,76,,76,76,,,,76,76,76,76,77,,76',
',,,77,,77,,77,77,,77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,78',
'78,77,,78,78,,78,77,,,,77,77,,77,77,,,,77,77,77,77,78,,77,,,,78,,78',
',78,78,,78,78,78,,78,78,78,78,,,78,78,,,78,,,78,78,,,,,79,79,78,,79',
'79,,79,78,,,,78,78,,78,78,,,,78,78,78,78,79,,78,,,,79,79,79,79,79,79',
'79,79,79,79,,79,79,,,,,79,79,79,79,79,,,79,79,,,,,,,79,,,,,79,79,,,',
'79,79,,79,79,,,,79,79,79,79,80,80,79,115,80,80,,80,,,,,,,,,,115,,115',
',115,115,,80,,,,,,80,,80,,80,80,,80,80,80,,80,80,115,,,,80,80,,,80,',
',80,80,,,,,81,81,80,,81,81,,81,80,,,,80,80,,80,80,,,,80,80,80,80,81',
',80,,,,81,,81,,81,81,,81,81,81,,81,81,,,,,81,81,,,81,,,81,81,,,,,82',
'82,81,,82,82,,82,81,,,,81,81,,81,81,,,,81,81,81,81,82,,81,,,,82,,82',
',82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,82,,,,,83,83,82,,83,83,',
'83,82,,,,82,82,,82,82,,,,82,82,82,82,83,,82,,,,83,,83,,83,83,,83,83',
'83,,83,83,,,,,83,83,,,83,,,83,83,,,,,84,84,83,,84,84,,84,83,,,,83,83',
',83,83,,,,83,83,83,83,84,,83,,,,84,,84,,84,84,,84,84,84,,84,84,,,,,84',
'84,,,84,,,84,84,,,,,85,85,84,,85,85,,85,84,,,,84,84,,84,84,,,,84,84',
'84,84,85,,84,,,,85,,85,,85,85,,85,85,85,,85,85,,,,,85,85,,,85,,,85,85',
',,,,86,86,85,,86,86,,86,85,,,,85,85,,85,85,,,,85,85,85,85,86,,85,,,',
'86,,86,,86,86,,86,86,86,,86,86,,,,,86,86,,,86,,,86,86,,,,,87,87,86,',
'87,87,,87,86,,,,86,86,,86,86,,,,86,86,86,86,87,,86,,,,87,,87,,87,87',
',87,87,87,,87,87,,,,,87,87,,,87,,,87,87,,,,,88,88,87,,88,88,,88,87,',
',,87,87,,87,87,,,,87,87,87,87,88,,87,,,,88,,88,,88,88,,88,88,88,,88',
'88,,,,,88,88,,,88,,,88,88,,,,,89,89,88,,89,89,,89,88,,,,88,88,,88,88',
',,,88,88,88,88,89,,88,,,,89,,89,,89,89,,89,89,89,,89,89,,,,,89,89,,',
'89,,,89,89,,,,,90,90,89,,90,90,,90,89,,,,89,89,,89,89,,,,89,89,89,89',
'90,,89,,,,90,,90,,90,90,,90,90,90,,90,90,,,,,90,90,,,90,,,90,90,,,,',
'91,91,90,,91,91,,91,90,,,,90,90,,90,90,,,,90,90,90,90,91,,90,,,,91,',
'91,,91,91,,91,91,91,,91,91,,,,,91,91,,,91,,,91,91,,,,,92,92,91,,92,92',
',92,91,,,,91,91,,91,91,,,,91,91,91,91,92,,91,,,,92,,92,,92,92,,92,92',
'92,,92,92,,,,,92,92,,,92,,,92,92,,,,,93,93,92,,93,93,,93,92,,,,92,92',
',92,92,,,,92,92,92,92,93,,92,,,,93,,93,,93,93,,93,93,93,,93,93,,,,,93',
'93,,,93,,,93,93,,,,,94,94,93,,94,94,,94,93,,,,93,93,,93,93,,,,93,93',
'93,93,94,,93,,,,94,,94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94',
',,,,95,95,94,,95,95,,95,94,,,,94,94,,94,94,,,,94,94,94,94,95,,94,,,',
'95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95,95,,,,,96,96,95,',
'96,96,,96,95,,,,95,95,,95,95,,,,95,95,95,95,96,,95,,,,96,,96,,96,96',
',96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,97,97,96,,97,97,,97,96,',
',,96,96,,96,96,,,,96,96,96,96,97,,96,,,,97,,97,,97,97,,97,97,97,,97',
'97,,,,,97,97,,,97,,,97,97,,,,,98,98,97,,98,98,,98,97,,,,97,97,,97,97',
',,,97,97,97,97,98,,97,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,',
'98,,,98,98,,,,,99,99,98,,99,99,,99,98,,,,98,98,,98,98,,,,98,98,98,98',
'99,,98,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,,',
'100,100,99,,100,100,,100,99,,,99,99,99,,99,99,,,,99,99,99,99,100,100',
'99,,,,100,,100,,100,100,,100,100,100,,100,100,100,100,,,100,100,,,100',
',,100,100,,,,,172,172,100,,172,172,,172,100,,,,100,100,,100,100,,,,100',
'100,100,100,172,,100,,,,172,,172,,172,172,,172,172,172,,172,172,,,,',
'172,172,,,172,,,172,172,,,,,171,171,172,,171,171,,171,172,,,,172,172',
',172,172,,,,172,172,172,172,171,,172,,,,171,,171,,171,171,,171,171,171',
',171,171,,,,,171,171,,,171,,,171,171,,,,,103,103,171,,103,103,,103,171',
',,,171,171,,171,171,,,,171,171,171,171,103,,171,,,,103,,103,,103,103',
',103,103,103,,103,103,,,,,103,103,,,103,,,103,103,,,,,104,104,103,,104',
'104,,104,103,,,,103,103,,103,103,,,,103,103,103,103,104,,103,,,,104',
',104,,104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,',
'170,170,104,,170,170,,170,104,,,,104,104,,104,104,,,,104,104,104,104',
'170,,104,,,,170,,170,,170,170,,170,170,170,,170,170,,,,,170,170,,,170',
',,170,170,,,,,166,166,170,,166,166,,166,170,,166,,170,170,,170,170,',
',,170,170,170,170,166,,170,,,,166,,166,,166,166,,166,166,166,,166,166',
',,,,166,166,,,166,,,166,166,,,,,107,107,166,,107,107,,107,166,,,,166',
'166,,166,166,,,,166,166,166,166,107,,166,,,,107,,107,,107,107,,107,107',
'107,,107,107,,,,,107,107,,,107,,,107,107,,,,,260,260,107,,260,260,,260',
'107,,,,107,107,,107,107,,,,107,107,107,107,260,,107,,,,260,,260,,260',
'260,,260,260,260,,260,260,260,260,,,260,260,,,260,,,260,260,,,,,275',
'275,260,,275,275,,275,260,,,,260,260,,260,260,,,,260,260,260,260,275',
',260,,,,275,,275,,275,275,,275,275,275,,275,275,,,,,275,275,,,275,,',
'275,275,,,,,276,276,275,,276,276,,276,275,,,,275,275,,275,275,,,,275',
'275,275,275,276,,275,,,,276,,276,,276,276,,276,276,276,,276,276,,,,',
'276,276,,,276,,,276,276,,,,,277,277,276,,277,277,,277,276,,,,276,276',
',276,276,,,,276,276,276,276,277,,276,,,,277,,277,,277,277,,277,277,277',
',277,277,,,,,277,277,,,277,,,277,277,,,,,,,277,,,,,,277,,,,277,277,',
'277,277,,,,277,277,277,277,153,153,277,,153,153,,153,153,,,,,,,,,,,',
',,,,153,,,,,,153,,153,,153,153,,153,153,153,,153,153,153,153,,,153,153',
',,153,,,153,153,,,,,303,303,153,,303,303,,303,153,,,,153,153,,153,153',
',,,153,153,153,153,303,,153,,,,303,,303,,303,303,,303,303,303,,303,303',
',,,,303,303,,,303,,,303,303,,,,,327,327,303,,327,327,,327,303,,,,303',
'303,,303,303,,,,303,303,303,303,327,,303,,,,327,,327,,327,327,,327,327',
'327,,327,327,327,327,,,327,327,,,327,,,327,327,,,,,,,327,,,,,,327,,',
',327,327,,327,327,,,,327,327,327,327,229,229,327,,229,229,,229,229,',
',,,,,,,,,,,,,,229,,,,,,229,,229,,229,229,,229,229,229,,229,229,229,229',
',,229,229,,,229,,,229,229,,,,,121,121,229,,121,121,,121,229,,,,229,229',
',229,229,,,,229,229,229,229,121,121,229,,,,121,,121,,121,121,,121,121',
'121,,121,121,121,121,,,121,121,,,121,,,121,121,,,,,150,150,121,,150',
'150,,150,121,,,,121,121,,121,121,,,,121,121,121,121,150,,121,,,,150',
',150,,150,150,,150,150,150,,150,150,150,150,,,150,150,,,150,,,150,150',
',,,,279,279,150,,279,279,,279,150,,,,150,150,,150,150,,,,150,150,150',
'150,279,,150,,,,279,,279,,279,279,,279,279,279,,279,279,,,,,279,279',
',,279,,,279,279,,,,,280,280,279,,280,280,,280,279,,,,279,279,,279,279',
',,,279,279,279,279,280,,279,,,,280,,280,,280,280,,280,280,280,,280,280',
',,,,280,280,,,280,,,280,280,,,,,,,280,,,,,,280,,,,280,280,,280,280,',
',,280,280,280,280,325,325,280,,325,325,,325,325,,,,,,,,,,,,,,,,325,',
',,,,325,,325,,325,325,,325,325,325,,325,325,,,,,325,325,,,325,,,325',
'325,,,,,318,318,325,,318,318,,318,325,,,,325,325,,325,325,,,,325,325',
'325,325,318,,325,,,,318,,318,,318,318,,318,318,318,,318,318,318,318',
',,318,318,,,318,,,318,318,,,,,317,317,318,,317,317,,317,318,,,,318,318',
',318,318,,,,318,318,318,318,317,,318,,,,317,,317,,317,317,,317,317,317',
',317,317,,,,,317,317,,,317,,,317,317,,,,,314,314,317,,314,314,,314,317',
',,,317,317,,317,317,,,,317,317,317,317,314,,317,,,,314,,314,,314,314',
',314,314,314,,314,314,,,,,314,314,,,314,,,314,314,,,,,,,314,,,,,,314',
',,,314,314,,314,314,,,,314,314,314,314,243,243,314,,243,243,,243,243',
',,,,,,,,,,,,,,,243,,,,,,243,,243,,243,243,,243,243,243,,243,243,243',
'243,204,,243,243,,,243,,,243,243,,,204,204,,204,243,204,204,,204,,243',
',,,243,243,,243,243,,,,243,243,243,243,,204,243,,,,222,,,204,204,204',
'204,204,204,,204,204,222,222,222,222,222,204,222,222,,222,222,222,222',
',248,248,,,248,,,,,,,,204,,222,,,,222,222,,,222,222,222,222,222,222',
',222,222,125,,125,,,222,,,248,,,248,125,125,125,,125,,125,125,,125,125',
'125,125,,222,,,,,248,,,,,,,,,125,248,248,,125,125,,,125,125,125,125',
'125,125,,125,125,124,,124,,,125,,,,,,,124,124,124,,124,,124,124,,124',
'124,124,124,,125,,,,,,,,,,,,,,124,,,,124,124,,,124,124,124,124,124,124',
',124,124,122,,122,,,124,,,,,,,122,122,122,,122,198,122,122,,122,122',
'122,122,,124,,,,,198,,198,,198,198,,,,122,,,,122,122,,9,122,122,122',
'122,122,122,,122,122,198,,9,9,9,122,9,,9,9,,9,9,9,9,198,198,,,,,,198',
',,,122,,,,9,,,,9,9,,152,9,9,9,9,9,9,,9,9,,,152,152,152,9,152,,152,152',
',152,152,152,152,,,,,,,,,,,,9,,,,152,,,,152,152,,189,152,152,152,152',
'152,152,,152,152,,,189,189,189,152,189,,189,189,,189,189,189,189,,152',
'152,,,,,,,,,152,,,,189,,330,330,189,189,330,217,189,189,189,189,189',
'189,,189,189,,,217,217,217,189,217,,217,217,,217,217,217,217,,,,,,,',
',,330,,189,330,,,217,,,,217,217,,194,217,217,217,217,217,217,,217,217',
'330,,,,194,217,194,,194,194,330,330,,,,209,,,,,209,,,,,,217,209,209',
'209,194,209,,209,209,,209,209,209,209,194,194,,,,194,194,,,,,,194,,',
'209,,,,209,209,,208,209,209,209,209,209,209,,209,209,,194,208,208,208',
'209,208,,208,208,,208,208,208,208,,,,,,,,,,,,209,,,,208,,,,,208,,207',
'208,208,208,208,208,208,,208,208,,,207,207,207,208,207,,207,207,,207',
'207,207,207,197,,,,,,,,,,,208,,,197,207,197,,197,197,164,,,207,207,207',
'207,207,207,,207,207,164,164,164,164,164,207,164,164,197,164,164,164',
'164,,,,,,,,,,,197,197,,207,,164,,197,,164,164,,345,164,164,164,164,164',
'164,,164,164,,,345,345,345,164,345,,345,345,,345,345,345,345,,,,,,,',
',,,,164,,,,345,,,,345,345,,199,345,345,345,345,345,345,,345,345,,,,',
'199,345,199,,199,199,,,,,,206,,,,,,,,,,,345,,206,206,199,206,,206,206',
'205,206,,199,199,199,199,,,,199,199,,205,205,,205,199,205,205,206,205',
',,,196,,,206,206,206,206,206,206,,206,206,,199,196,205,196,206,196,196',
',,,205,205,205,205,205,205,365,205,205,,,,,,205,206,,196,365,365,365',
',365,,365,365,,365,365,365,365,,196,196,,205,,,,196,,,,,,,365,,,,365',
'365,,347,365,365,365,365,365,365,,365,365,,,347,347,347,365,347,,347',
'347,,347,347,347,347,,,,,,,,,,,,365,,,,347,,,,347,347,,348,347,347,347',
'347,347,347,,347,347,,,348,348,348,347,348,,348,348,,348,348,348,348',
',,,,,,,,,,,347,,,,348,,,,348,348,,349,348,348,348,348,348,348,,348,348',
',,349,349,349,348,349,,349,349,,349,349,349,349,,,,,,,,,,,,348,,,,349',
',,,349,349,,203,349,349,349,349,349,349,,349,349,,,,203,203,349,203',
',203,203,,203,,202,,,,,,,,,,,,,349,202,,202,203,202,202,,,,,,203,203',
'203,203,203,203,,203,203,,,,,,203,202,,,,,201,,,202,202,202,202,202',
'202,,202,202,,,201,203,201,202,201,201,,,,195,,,,,,,,,,,,,,195,202,195',
'201,195,195,,,,,,201,201,201,201,201,201,,201,201,,,,,,201,195,,,,,200',
',,,,195,195,,,,195,195,,,200,201,200,195,200,200,,,,346,,,,,,,,,,,,346',
'346,346,195,346,200,346,346,,346,346,346,346,200,200,200,200,,,,200',
'200,,,,,,200,346,,,,346,346,,,346,346,346,346,346,346,,346,346,,,,200',
',346,,,216,216,216,216,,216,216,216,,216,,216,216,,,,,,346,216,216,216',
',,,216,,,,,,,,,,,,216,216,,,,,,,,,,,,216,216,216,216,274,274,274,274',
',274,274,274,,274,,274,274,,,,,,,274,274,274,,,,274,,,,,,,,,,,,274,274',
',,,,,,,,,,,274,274,274,274,304,304,304,304,,304,304,304,,304,,304,304',
',,,,,,304,304,304,,,,304,,,,,,,,,,,,304,304,,,,,,,,,,,,304,304,304,304',
'272,272,272,272,,272,272,272,,272,,272,272,,,,,,,272,272,272,,,,272',
',,,,,,,,,,,272,272,,,,,,,,,,,,272,272,272,272' ]
        racc_action_check = arr = ::Array.new(6785, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,   322,   nil,   nil,   118,   307,   nil,   173,   308,  5605,
   466,   526,    97,   nil,   nil,   646,   706,   766,   826,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   245,   283,  1054,  1114,  1174,    63,   935,   nil,   nil,   nil,
   nil,   nil,  1378,  1438,  1522,   nil,   nil,   nil,   nil,   nil,
  1582,   nil,   215,   214,   nil,  1762,   nil,   nil,     2,  1882,
   266,  2002,  2062,  2122,  2182,  2242,  2302,  2362,  2422,  2482,
  2566,  2626,  2686,  2746,  2806,  2866,  2926,  2986,  3046,  3106,
  3166,  3226,  3286,  3346,  3406,  3466,  3526,  3586,  3646,  3706,
  3766,   236,   267,  3946,  4006,   266,   265,  4186,   247,   nil,
   nil,   nil,   nil,   998,   142,  2564,  1526,   231,   nil,   245,
    74,  4774,  5558,   nil,  5501,  5444,   225,   231,   nil,   222,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   223,   nil,   212,
   nil,   116,   nil,   nil,   199,   nil,   172,   nil,   nil,   163,
  4834,   137,  5652,  4510,   nil,   157,   nil,   nil,   nil,   nil,
   147,   130,   128,   104,  5957,    57,  4126,     3,     5,    -9,
  4066,  3886,  3826,   nil,   nil,    -2,   112,   110,   287,    -1,
     4,    -4,     2,   nil,   nil,   nil,   nil,   nil,   nil,  5699,
    80,  1262,     2,   350,  5793,  6429,  6121,  5937,  5575,  6051,
  6474,  6406,  6361,  6338,  5342,  6096,  6076,  5912,  5865,  5818,
   nil,   nil,  1318,    27,   212,   nil,  6537,  5746,    15,   nil,
   189,   191,  5387,   nil,   208,   nil,   180,   nil,   nil,  4714,
   nil,   274,   nil,   nil,   nil,   nil,   nil,   270,   231,   -24,
   243,    -7,   nil,  5302,   262,   406,   169,   134,  5418,   -28,
   586,    21,    28,   nil,  1258,  1702,   nil,   nil,   nil,   nil,
  4246,   nil,   nil,   nil,   nil,    65,   nil,   nil,   nil,   nil,
    73,    86,  6699,   120,  6591,  4306,  4366,  4426,   nil,  4894,
  4954,   184,   nil,   171,   nil,   186,   nil,   193,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   199,  4570,  6645,   211,   nil,    68,   nil,   213,
   220,   nil,   161,    30,  5218,   nil,   nil,  5158,  5098,   nil,
   235,    84,   237,   216,     9,  5038,   nil,  4630,   248,   nil,
  5746,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   188,   -62,   257,   nil,   nil,  6004,  6497,  6197,  6244,  6291,
   268,  1942,   209,   271,   nil,   nil,   269,  1822,   nil,   nil,
   nil,   257,   nil,   nil,   nil,  6150,    13,    56,   nil,  1642,
   283,   262,   nil,   288,   291,   nil,   nil,   294,   nil,   nil,
   994,   nil,   nil,   nil,   300,   271,   nil,   nil,   nil,   nil,
   nil,   304,   nil,   nil,   nil,   nil,   910,   nil,   346,   178,
   nil,   311,   nil,   nil,    58,   nil,   313,   nil,   314,   nil,
   315,   nil,   nil,   nil,   285,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -242,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -242,  -242,  -242,   -33,   -34,  -242,  -242,  -242,  -242,   -61,
   -62,   -63,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -86,   -90,  -242,  -242,  -242,  -242,  -242,  -175,  -176,  -177,
  -178,  -179,  -242,  -242,  -242,  -190,  -191,  -192,  -193,  -194,
  -242,  -196,  -242,  -209,  -212,  -242,  -217,  -218,  -242,  -242,
    -7,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -126,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,  -242,
  -242,  -242,  -121,  -241,  -241,   -22,   -23,  -242,  -241,  -136,
  -157,  -158,  -159,   -46,  -242,   -47,   -54,  -242,   -87,  -242,
  -242,  -242,  -242,   -97,  -242,  -242,  -241,  -219,  -145,  -147,
  -148,  -149,  -150,  -151,  -153,  -154,   -14,  -219,  -181,  -219,
  -183,  -242,  -186,  -187,  -242,  -195,  -242,  -200,  -203,  -242,
  -207,  -242,  -242,  -242,   419,    -6,    -9,   -11,   -12,   -13,
   -17,   -18,   -19,   -20,  -242,  -219,  -242,   -79,   -80,   -81,
  -230,  -236,  -224,  -127,  -130,  -242,  -227,  -225,  -233,  -176,
  -177,  -178,  -179,  -223,  -228,  -229,  -231,  -232,  -234,   -59,
  -242,   -36,   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -48,   -49,   -50,   -51,   -52,   -53,   -55,   -56,  -242,
   -57,  -115,  -242,  -219,   -83,   -91,  -126,  -125,  -242,  -124,
  -242,  -221,  -242,   -28,  -241,  -160,  -242,   -58,   -92,  -242,
   -95,  -219,  -163,  -165,  -166,  -167,  -168,  -170,  -242,  -242,
  -173,  -242,   -89,  -242,  -242,  -242,  -242,  -241,  -220,  -242,
  -220,  -242,  -242,  -184,  -242,  -242,  -197,  -198,  -199,  -201,
  -242,  -204,  -205,  -206,  -208,  -219,  -210,  -213,  -215,  -216,
    -8,  -242,  -126,  -242,  -220,  -242,  -242,  -242,   -35,  -242,
  -242,  -219,  -117,  -242,   -85,  -219,  -129,  -242,  -224,  -225,
  -226,  -227,  -230,  -233,  -235,  -236,  -237,  -238,  -239,  -240,
  -122,  -123,  -242,  -222,  -126,  -242,  -139,  -242,  -161,  -219,
  -242,   -94,  -242,  -220,  -242,  -171,  -172,  -242,  -242,   -88,
  -242,  -100,  -242,  -106,  -242,  -242,  -110,  -241,  -242,  -155,
  -242,  -146,  -152,   -15,  -180,  -182,  -185,  -188,  -189,  -202,
  -242,  -242,  -219,   -26,  -128,  -133,  -131,  -132,   -60,  -119,
  -242,  -220,   -82,  -242,   -25,   -29,  -219,  -241,  -140,  -141,
  -142,  -242,   -93,   -96,  -164,  -169,  -242,  -100,   -99,  -242,
  -242,  -106,  -105,  -242,  -242,  -109,  -111,  -242,  -137,  -138,
  -242,  -156,  -211,  -214,  -242,   -30,  -116,  -118,   -84,  -120,
   -27,  -242,  -162,  -174,   -98,  -101,  -242,  -104,  -242,  -241,
  -134,  -242,  -144,   -24,   -31,  -135,  -242,  -103,  -242,  -108,
  -242,  -113,  -114,  -143,  -221,  -102,  -107,  -112,   -32 ]

racc_goto_table = [
     2,   113,   115,   116,   118,   117,   225,   221,   126,   130,
   132,   190,   211,   145,   267,   302,   331,   240,   231,   326,
   377,    70,   218,   220,   225,   247,   410,   165,   122,   124,
   125,   325,   281,   395,   344,   251,   224,   252,   228,   136,
   136,   144,   368,   137,   139,   210,   372,   147,   240,   265,
   391,   152,   105,   106,   246,   355,   305,   358,   156,   157,
   158,   159,   328,   273,   384,   164,   189,   191,   192,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
   204,   205,   206,   207,   208,   209,   155,   136,   394,   217,
   217,   213,   332,   222,   397,   364,   316,   315,   381,   376,
   337,   261,   262,     3,   259,   260,   258,   148,   136,   150,
   263,   283,   241,     1,   nil,   nil,   nil,   160,   161,   162,
   163,   nil,   306,   240,   309,   282,   nil,   nil,   nil,   312,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   126,
   270,   130,   132,   nil,   nil,   329,   nil,   nil,   nil,   nil,
   264,   nil,   115,   271,   nil,   nil,   122,   124,   125,   nil,
   nil,   nil,   nil,   340,   285,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   350,
   nil,   nil,   nil,   353,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   nil,
   nil,   nil,   nil,   383,   nil,   nil,   nil,   361,   418,   nil,
   240,   130,   132,   339,   nil,   nil,   nil,   nil,   nil,   nil,
   342,   nil,   nil,   nil,   nil,   379,   nil,   nil,   nil,   310,
   nil,   189,   nil,   nil,   nil,   nil,   nil,   333,   nil,   nil,
   385,   144,   338,   320,   322,   nil,   nil,   147,   366,   nil,
   nil,   nil,   356,   nil,   390,   379,   nil,   nil,   nil,   nil,
   nil,   345,   346,   347,   387,   348,   349,   nil,   nil,   nil,
   359,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   222,
   nil,   nil,   nil,   130,   132,   nil,   nil,   411,   nil,   nil,
   365,   nil,   nil,   189,   414,   333,   nil,   nil,   nil,   nil,
   nil,   189,   nil,   nil,   nil,   nil,   388,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   209,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   401,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   222,   nil,   nil,   nil,   nil,   nil,   406,   nil,   408,   412 ]

racc_goto_check = [
     2,    10,    10,    10,    37,     6,    49,    13,    57,    35,
    34,    19,    50,    80,    88,    14,    65,    36,    42,    47,
    59,     5,    53,    53,    49,    15,    48,    11,    10,    10,
    10,    46,    51,    43,    54,    15,    58,    15,    41,     6,
     6,     6,    44,     8,     8,    20,    45,     6,    36,    42,
    59,    10,     9,     9,    58,    16,    61,    62,     6,     6,
     6,     6,    64,    15,    12,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,     5,     6,    44,    10,
    10,     8,    67,    10,    45,    68,    69,    71,    65,    47,
    75,    76,    77,     3,    81,    82,    84,    85,     6,    86,
    87,    15,     8,     1,   nil,   nil,   nil,     9,     9,     9,
     9,   nil,    49,    36,    42,    50,   nil,   nil,   nil,    15,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,
     6,    35,    34,   nil,   nil,    49,   nil,   nil,   nil,   nil,
     2,   nil,    10,     2,   nil,   nil,    10,    10,    10,   nil,
   nil,   nil,   nil,    15,    11,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    37,    15,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,   nil,    88,   nil,   nil,   nil,    15,    14,   nil,
    36,    35,    34,    80,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,     2,
   nil,    10,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
    15,     6,     6,     2,     2,   nil,   nil,     6,    19,   nil,
   nil,   nil,    11,   nil,    15,    49,   nil,   nil,   nil,   nil,
   nil,    10,    10,    10,    50,    10,    10,   nil,   nil,   nil,
    57,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,    35,    34,   nil,   nil,    49,   nil,   nil,
    10,   nil,   nil,    10,    13,     6,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,   nil,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,   113,     0,   103,   nil,    17,   -13,   nil,    -9,    42,
   -14,   -52,  -278,  -100,  -206,  -102,  -248,   nil,   nil,   -69,
   -54,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   -36,   -37,  -103,   -36,   nil,   nil,
   nil,   -81,  -102,  -336,  -279,  -277,  -214,  -226,  -373,  -102,
   -87,  -180,   nil,   -81,  -240,   nil,   nil,   -37,   -72,  -307,
   nil,  -168,  -250,   nil,  -185,  -232,   nil,  -157,  -218,  -143,
   nil,  -141,   nil,   nil,   nil,  -154,   -48,   -47,   nil,   nil,
   -47,   -42,   -41,   nil,   -40,    45,    46,   -40,  -138 ]

racc_goto_default = [
   nil,   nil,   378,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   223,    13,    14,   324,
   nil,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,   nil,    40,    41,
   119,   nil,   nil,   123,   nil,   nil,   nil,   nil,   nil,   219,
   nil,   nil,   102,   nil,   173,   175,   174,   109,   nil,   nil,
   108,   nil,   nil,   127,   nil,   128,   129,   133,   232,   233,
   234,   235,   236,   239,   141,   143,    55,    56,    57,    60,
   nil,   nil,   nil,   146,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 92, :_reduce_1,
  1, 92, :_reduce_2,
  0, 92, :_reduce_3,
  1, 93, :_reduce_4,
  1, 95, :_reduce_5,
  3, 95, :_reduce_6,
  2, 95, :_reduce_7,
  1, 96, :_reduce_8,
  3, 96, :_reduce_9,
  1, 97, :_reduce_none,
  3, 97, :_reduce_11,
  3, 97, :_reduce_12,
  3, 97, :_reduce_13,
  1, 99, :_reduce_14,
  3, 99, :_reduce_15,
  1, 98, :_reduce_none,
  3, 98, :_reduce_17,
  3, 98, :_reduce_18,
  3, 98, :_reduce_19,
  3, 98, :_reduce_20,
  1, 100, :_reduce_none,
  2, 100, :_reduce_22,
  2, 100, :_reduce_23,
  7, 100, :_reduce_24,
  5, 100, :_reduce_25,
  5, 100, :_reduce_26,
  4, 107, :_reduce_27,
  1, 104, :_reduce_28,
  3, 104, :_reduce_29,
  1, 103, :_reduce_30,
  2, 103, :_reduce_31,
  4, 103, :_reduce_32,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  4, 101, :_reduce_35,
  3, 101, :_reduce_36,
  3, 101, :_reduce_37,
  3, 101, :_reduce_38,
  3, 101, :_reduce_39,
  3, 101, :_reduce_40,
  3, 101, :_reduce_41,
  3, 101, :_reduce_42,
  3, 101, :_reduce_43,
  3, 101, :_reduce_44,
  3, 101, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  3, 101, :_reduce_48,
  3, 101, :_reduce_49,
  3, 101, :_reduce_50,
  3, 101, :_reduce_51,
  3, 101, :_reduce_52,
  3, 101, :_reduce_53,
  2, 101, :_reduce_54,
  3, 101, :_reduce_55,
  3, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  1, 110, :_reduce_59,
  3, 110, :_reduce_60,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_77,
  1, 108, :_reduce_78,
  1, 108, :_reduce_79,
  1, 108, :_reduce_80,
  1, 108, :_reduce_81,
  5, 109, :_reduce_82,
  3, 109, :_reduce_83,
  6, 109, :_reduce_84,
  4, 109, :_reduce_85,
  1, 113, :_reduce_86,
  2, 113, :_reduce_87,
  4, 129, :_reduce_88,
  3, 129, :_reduce_89,
  1, 129, :_reduce_90,
  3, 130, :_reduce_91,
  2, 128, :_reduce_92,
  3, 132, :_reduce_93,
  2, 132, :_reduce_94,
  2, 131, :_reduce_95,
  4, 131, :_reduce_96,
  2, 116, :_reduce_97,
  5, 134, :_reduce_98,
  4, 134, :_reduce_99,
  0, 135, :_reduce_none,
  2, 135, :_reduce_101,
  4, 135, :_reduce_102,
  3, 135, :_reduce_103,
  6, 117, :_reduce_104,
  5, 117, :_reduce_105,
  0, 136, :_reduce_none,
  4, 136, :_reduce_107,
  3, 136, :_reduce_108,
  5, 115, :_reduce_109,
  1, 137, :_reduce_110,
  2, 137, :_reduce_111,
  5, 138, :_reduce_112,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  1, 111, :_reduce_none,
  4, 111, :_reduce_116,
  1, 142, :_reduce_117,
  3, 142, :_reduce_118,
  3, 141, :_reduce_119,
  6, 114, :_reduce_120,
  2, 114, :_reduce_121,
  3, 143, :_reduce_122,
  3, 143, :_reduce_123,
  1, 144, :_reduce_none,
  1, 144, :_reduce_none,
  0, 102, :_reduce_126,
  1, 102, :_reduce_127,
  3, 102, :_reduce_128,
  1, 146, :_reduce_none,
  1, 146, :_reduce_none,
  3, 145, :_reduce_131,
  3, 145, :_reduce_132,
  3, 145, :_reduce_133,
  6, 118, :_reduce_134,
  7, 119, :_reduce_135,
  1, 151, :_reduce_136,
  1, 150, :_reduce_none,
  1, 150, :_reduce_none,
  1, 152, :_reduce_none,
  2, 152, :_reduce_140,
  1, 153, :_reduce_none,
  1, 153, :_reduce_none,
  7, 120, :_reduce_143,
  6, 120, :_reduce_144,
  1, 154, :_reduce_145,
  3, 154, :_reduce_146,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 156, :_reduce_149,
  1, 156, :_reduce_none,
  1, 157, :_reduce_151,
  3, 157, :_reduce_152,
  1, 158, :_reduce_none,
  1, 158, :_reduce_none,
  1, 155, :_reduce_none,
  2, 155, :_reduce_156,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  1, 148, :_reduce_159,
  1, 149, :_reduce_160,
  2, 149, :_reduce_161,
  4, 149, :_reduce_162,
  1, 133, :_reduce_163,
  3, 133, :_reduce_164,
  1, 159, :_reduce_none,
  1, 159, :_reduce_none,
  1, 160, :_reduce_none,
  1, 160, :_reduce_none,
  3, 162, :_reduce_169,
  1, 162, :_reduce_170,
  2, 163, :_reduce_171,
  2, 161, :_reduce_172,
  1, 164, :_reduce_173,
  4, 164, :_reduce_174,
  1, 112, :_reduce_175,
  1, 122, :_reduce_176,
  1, 122, :_reduce_177,
  1, 122, :_reduce_178,
  1, 122, :_reduce_179,
  4, 123, :_reduce_180,
  2, 123, :_reduce_181,
  4, 123, :_reduce_182,
  2, 123, :_reduce_183,
  3, 124, :_reduce_184,
  4, 124, :_reduce_185,
  2, 124, :_reduce_186,
  1, 165, :_reduce_187,
  3, 165, :_reduce_188,
  3, 166, :_reduce_189,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 167, :_reduce_193,
  1, 167, :_reduce_194,
  2, 168, :_reduce_195,
  1, 170, :_reduce_196,
  1, 172, :_reduce_197,
  1, 173, :_reduce_198,
  2, 171, :_reduce_199,
  1, 174, :_reduce_200,
  1, 175, :_reduce_201,
  2, 175, :_reduce_202,
  2, 169, :_reduce_203,
  2, 176, :_reduce_204,
  2, 176, :_reduce_205,
  3, 94, :_reduce_206,
  0, 178, :_reduce_none,
  1, 178, :_reduce_none,
  0, 177, :_reduce_209,
  2, 177, :_reduce_210,
  4, 177, :_reduce_211,
  1, 121, :_reduce_212,
  3, 121, :_reduce_213,
  5, 121, :_reduce_214,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 127, :_reduce_217,
  1, 125, :_reduce_218,
  0, 106, :_reduce_none,
  1, 106, :_reduce_220,
  0, 105, :_reduce_none,
  1, 105, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  0, 140, :_reduce_241 ]

racc_reduce_n = 242

racc_shift_n = 419

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :LPAREN => 26,
  :RPAREN => 27,
  :ISEQUAL => 28,
  :GREATEREQUAL => 29,
  :GREATERTHAN => 30,
  :LESSTHAN => 31,
  :IF => 32,
  :ELSE => 33,
  :DEFINE => 34,
  :ELSIF => 35,
  :VARIABLE => 36,
  :CLASS => 37,
  :INHERITS => 38,
  :NODE => 39,
  :BOOLEAN => 40,
  :NAME => 41,
  :SEMIC => 42,
  :CASE => 43,
  :DEFAULT => 44,
  :AT => 45,
  :ATAT => 46,
  :LCOLLECT => 47,
  :RCOLLECT => 48,
  :CLASSREF => 49,
  :NOT => 50,
  :OR => 51,
  :AND => 52,
  :UNDEF => 53,
  :PARROW => 54,
  :PLUS => 55,
  :MINUS => 56,
  :TIMES => 57,
  :DIV => 58,
  :LSHIFT => 59,
  :RSHIFT => 60,
  :UMINUS => 61,
  :MATCH => 62,
  :NOMATCH => 63,
  :REGEX => 64,
  :IN_EDGE => 65,
  :OUT_EDGE => 66,
  :IN_EDGE_SUB => 67,
  :OUT_EDGE_SUB => 68,
  :IN => 69,
  :UNLESS => 70,
  :PIPE => 71,
  :LAMBDA => 72,
  :SELBRACE => 73,
  :NUMBER => 74,
  :HEREDOC => 75,
  :SUBLOCATE => 76,
  :RENDER_STRING => 77,
  :RENDER_EXPR => 78,
  :EPP_START => 79,
  :EPP_END => 80,
  :EPP_END_TRIM => 81,
  :FUNCTION => 82,
  :PRIVATE => 83,
  :ATTR => 84,
  :TYPE => 85,
  :LOW => 86,
  :HIGH => 87,
  :LISTSTART => 88,
  :SPLAT => 89,
  :MODULO => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "PRIVATE",
  "ATTR",
  "TYPE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "call_function_expression",
  "expressions",
  "selector_entries",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "hostclass_expression",
  "node_definition_expression",
  "epp_render_expression",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "hashpairs",
  "hashpair",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "optional_statements",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 65)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 66)
  def _reduce_2(val, _values, result)
     result = create_program(Factory.block_or_expression(*val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_3(val, _values, result)
     result = create_empty_program() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 78)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 79)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 87)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 88)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 93)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 94)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 104)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 105)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 115)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :virtual)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 126)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, :exported)
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 137)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 144)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 153)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 175)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 178)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 185)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_35(val, _values, result)
     result = val[0][*val[2]]         ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_36(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 196)
  def _reduce_37(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 197)
  def _reduce_38(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 198)
  def _reduce_39(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 199)
  def _reduce_40(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_41(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_42(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_43(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_44(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_45(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_46(val, _values, result)
     result = val[1].minus()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_47(val, _values, result)
     result = val[1].unfold()         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_48(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_49(val, _values, result)
     result = val[0] ==  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_50(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_51(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_52(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_53(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_54(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_55(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_56(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_57(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_58(val, _values, result)
     result = val[1].paren()          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_59(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 228)
  def _reduce_60(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 61 omitted

# reduce 62 omitted

# reduce 63 omitted

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_77(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_78(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 249)
  def _reduce_79(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 250)
  def _reduce_80(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 251)
  def _reduce_81(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 260)
  def _reduce_82(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_83(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 268)
  def _reduce_84(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[2])
      loc result, val[0], val[4]
      result.lambda = val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 273)
  def _reduce_85(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 281)
  def _reduce_86(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_87(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 285)
  def _reduce_88(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 286)
  def _reduce_89(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_90(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_91(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_92(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[1][:value])
      loc result, val[0][:start], val[1][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_93(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_94(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_95(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 310)
  def _reduce_96(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_97(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 325)
  def _reduce_98(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(*val[2]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 329)
  def _reduce_99(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'egrammar.ra', 337)
  def _reduce_101(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 341)
  def _reduce_102(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_103(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 352)
  def _reduce_104(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(*val[3]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 356)
  def _reduce_105(val, _values, result)
          result = Factory.UNLESS(val[1], nil, nil)
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 106 omitted

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_107(val, _values, result)
            result = Factory.block_or_expression(*val[2])
        loc result, val[0], val[3]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 370)
  def _reduce_108(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_109(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 383)
  def _reduce_110(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 384)
  def _reduce_111(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 389)
  def _reduce_112(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

module_eval(<<'.,.,', 'egrammar.ra', 405)
  def _reduce_116(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_117(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 411)
  def _reduce_118(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_119(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 426)
  def _reduce_120(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_121(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 435)
  def _reduce_122(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_123(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

module_eval(<<'.,.,', 'egrammar.ra', 445)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 447)
  def _reduce_128(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_131(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_132(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], :'+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 471)
  def _reduce_133(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_134(val, _values, result)
          result = add_definition(Factory.DEFINITION(classname(val[1][:value]), val[2], val[4]))
      loc result, val[0], val[5]
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 494)
  def _reduce_135(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      result = add_definition(Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 504)
  def _reduce_136(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

module_eval(<<'.,.,', 'egrammar.ra', 513)
  def _reduce_140(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 530)
  def _reduce_143(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], val[5]))
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 534)
  def _reduce_144(val, _values, result)
          result = add_definition(Factory.NODE(val[1], val[3], nil))
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 544)
  def _reduce_145(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 545)
  def _reduce_146(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 147 omitted

# reduce 148 omitted

module_eval(<<'.,.,', 'egrammar.ra', 552)
  def _reduce_149(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'egrammar.ra', 556)
  def _reduce_151(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 557)
  def _reduce_152(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 584)
  def _reduce_159(val, _values, result)
     error val[0], "'class' is not a valid classname" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 588)
  def _reduce_160(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 589)
  def _reduce_161(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 594)
  def _reduce_163(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_164(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

module_eval(<<'.,.,', 'egrammar.ra', 607)
  def _reduce_169(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_170(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_171(val, _values, result)
     result = val[1]; val[1].captures_rest() 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 614)
  def _reduce_172(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 617)
  def _reduce_173(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 618)
  def _reduce_174(val, _values, result)
     result = val[0][*val[2]] ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_175(val, _values, result)
     result = Factory.fqn(val[0][:value]).var ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 628)
  def _reduce_176(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 629)
  def _reduce_177(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_178(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 631)
  def _reduce_179(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_180(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 638)
  def _reduce_181(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 639)
  def _reduce_182(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 640)
  def _reduce_183(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 643)
  def _reduce_184(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_185(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 645)
  def _reduce_186(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 648)
  def _reduce_187(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 649)
  def _reduce_188(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_189(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 190 omitted

# reduce 191 omitted

# reduce 192 omitted

module_eval(<<'.,.,', 'egrammar.ra', 660)
  def _reduce_193(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 661)
  def _reduce_194(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 663)
  def _reduce_195(val, _values, result)
     result = Factory.string(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 664)
  def _reduce_196(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 665)
  def _reduce_197(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 666)
  def _reduce_198(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 667)
  def _reduce_199(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_200(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 671)
  def _reduce_201(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 672)
  def _reduce_202(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_203(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_204(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 679)
  def _reduce_205(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_206(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 207 omitted

# reduce 208 omitted

module_eval(<<'.,.,', 'egrammar.ra', 689)
  def _reduce_209(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 690)
  def _reduce_210(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 691)
  def _reduce_211(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_212(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_213(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_214(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(*val[2])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 215 omitted

# reduce 216 omitted

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_217(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_218(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 219 omitted

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_220(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 221 omitted

# reduce 222 omitted

# reduce 223 omitted

# reduce 224 omitted

# reduce 225 omitted

# reduce 226 omitted

# reduce 227 omitted

# reduce 228 omitted

# reduce 229 omitted

# reduce 230 omitted

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

module_eval(<<'.,.,', 'egrammar.ra', 738)
  def _reduce_241(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
