#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 914)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'66,78,297,144,63,72,179,73,168,393,131,131,396,322,127,127,323,131,123',
'-273,392,127,264,298,21,20,147,397,-282,-287,131,53,-285,56,127,68,12',
'-141,61,45,48,169,55,46,10,11,130,130,64,19,126,126,47,130,345,17,18',
'126,128,128,-143,418,-273,83,265,128,130,-183,-183,54,126,-282,-287',
'44,79,-285,81,82,128,373,-141,177,174,69,70,175,184,183,176,59,65,66',
'78,71,144,63,72,346,73,508,129,129,131,-143,450,131,127,129,131,127',
'326,325,127,-182,-182,21,20,147,451,285,129,131,53,450,56,127,68,136',
'420,61,45,48,144,55,46,87,-185,-185,130,64,19,130,126,47,130,126,17',
'18,126,286,128,445,300,128,83,147,128,130,514,288,54,126,450,450,44',
'79,392,81,82,128,-227,467,62,50,69,70,57,277,276,60,59,65,66,78,71,426',
'63,72,297,73,170,78,129,131,171,129,131,127,129,131,127,300,463,127',
'462,389,21,20,417,298,73,129,131,53,428,56,127,68,12,387,61,45,48,85',
'55,46,10,11,160,130,64,19,130,126,47,130,126,17,18,126,463,128,462,284',
'128,83,150,128,130,277,276,54,126,277,276,44,79,281,81,82,128,277,276',
'62,50,69,70,57,277,276,60,59,65,66,78,71,435,63,72,436,73,337,338,129',
'131,280,129,131,127,129,72,127,73,343,-272,-187,-187,21,20,-185,-185',
'344,129,131,53,439,56,127,68,12,279,61,45,48,384,55,46,10,11,442,130',
'64,19,130,126,47,320,126,17,18,-184,-184,128,300,392,128,83,-272,392',
'130,133,134,54,126,-182,-182,44,79,382,81,82,128,133,134,62,50,69,70',
'57,150,377,60,59,65,66,78,71,452,63,72,297,73,518,453,129,320,115,129',
'71,456,457,373,371,300,522,460,370,464,21,20,117,298,120,129,114,53',
'116,56,466,68,12,297,61,45,48,290,55,46,10,11,115,351,64,19,300,95,47',
'119,95,17,18,266,298,324,117,87,120,83,114,476,116,87,478,54,200,480',
'335,44,79,96,81,82,523,343,197,62,50,69,70,57,195,119,60,59,65,66,78',
'71,173,63,72,524,73,516,484,84,97,98,528,486,343,95,489,96,490,343,160',
'160,493,21,20,151,150,378,95,95,53,497,56,466,68,12,297,61,45,48,499',
'55,46,10,11,115,500,64,19,300,501,47,502,343,17,18,504,298,526,117,527',
'120,83,114,95,116,509,510,54,511,512,513,44,79,297,81,82,343,314,313',
'62,50,69,70,57,405,119,60,59,65,66,78,71,115,63,72,406,73,407,408,409',
'412,115,95,288,,,117,96,120,,114,,116,21,20,117,,120,,114,53,116,56',
',68,136,,61,45,48,,55,46,119,380,,,64,19,,,47,119,297,17,18,,,97,98',
',,83,,,96,300,,54,,,,44,79,298,81,82,,,,62,50,69,70,57,,115,60,59,65',
'66,78,71,115,63,72,,73,,,117,,120,,114,,116,117,,120,,114,,116,21,20',
',,,,,53,,56,,68,136,119,61,45,48,,55,46,119,,,,64,19,,,47,,,17,18,,',
'97,98,,,83,,,96,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66',
'78,71,115,63,72,,73,88,89,90,,115,,,,,117,,120,,114,,116,21,20,117,',
'120,,114,53,116,56,,68,136,,61,45,48,,55,46,119,,,,64,19,,,47,119,,17',
'18,,91,93,92,94,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,',
',,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70',
'57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,261,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48',
',55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62',
'50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,',
',,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11',
',,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70',
'57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45',
'48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,468,,,,,,,,,,,,,,,',
'21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46',
',,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69',
'70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,',
'56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,',
'54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60',
'59,65,66,78,71,,63,72,,73,455,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12',
',61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54',
',,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,',
',,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59',
'65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69',
'70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,',
'56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,',
'54,,,,44,79,,81,82,,,,177,174,69,70,175,184,183,176,59,65,66,78,71,',
'63,72,,73,,,,,,,,,,,,,,,,,21,20,302,,,,,53,,56,,68,12,,61,45,48,,55',
'46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62',
'50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,421,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,177,174,69,70,175,184,183,176,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,177,174,69,70,175,184,183,176,59,65,66,78,71,,63,72,,73,311,,,,,,',
',,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,401,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,399,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55',
'46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62',
'50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,',
',,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,',
',,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,188,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,177,174,69,70,175,184,183,176,59,65',
'66,78,71,,63,72,,73,,,344,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61',
'45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,',
',,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70',
'57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,',
'47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,80,,,62,50,69,70,57,,,60',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17',
'18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66',
'78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,506,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,143,,,,,53,,56,,68,12,,61,45,48,,55',
'46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62',
'50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,',
',,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,',
',,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,',
'73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55',
'46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53',
',56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,',
',54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19',
',,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60',
'59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,',
'61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,',
',,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18',
',,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78',
'71,,63,72,186,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48',
',55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,',
',,177,174,69,70,175,184,183,176,59,65,66,78,71,,63,72,,73,188,,,,,,',
',,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,177,174,69,70,175,184,183',
'176,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,199,,,,,,,,',
',,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,',
'17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,',
',83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63',
'72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10',
'11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69',
'70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,',
'56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,',
'54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73',
',,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44',
'79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,',
',,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45',
'48,,55,46,10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82',
',,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21',
'20,,,,,,53,,56,,68,12,,61,45,48,,55,46,10,11,,,64,19,,,47,,,17,18,,',
',,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71',
',63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,12,,61,45,48,,55,46',
'10,11,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50',
'69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,217',
'233,224,234,68,226,236,228,45,215,,219,213,,,,,64,19,237,232,214,,,17',
'212,,,,,,,83,,,,,235,218,,,,44,79,,81,82,,,,229,216,230,231,225,239',
'238,227,59,222,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56',
',68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,',
'44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,',
',,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47',
',,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65',
'66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45',
'48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,',
',62,50,69,70,57,,,60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20',
',,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83',
',,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,,,60,59,65,66,78,71,,63,72',
',73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68,136,,61,45,48,,55,46,,,,,64',
'19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79,,81,82,,,,62,50,69,70,57,',
',60,59,65,66,78,71,,63,72,,73,,,,,,,,,,,,,,,,,21,20,,,,,,53,,56,,68',
'136,,61,45,48,,55,46,,,,,64,19,,,47,,,17,18,,,,,,,83,,,,,,54,,,,44,79',
',81,82,,,,62,50,69,70,57,115,,60,59,65,,,71,,,,,111,106,117,,120,115',
'114,,116,,107,109,108,110,,,,,106,117,,120,,114,,116,,107,,119,,,,,',
',,99,100,102,101,104,105,,97,98,119,,,,,96,,115,99,100,102,101,104,105',
',97,98,,,,106,117,96,120,115,114,,116,,107,,,103,,,,,106,117,,120,,114',
',116,,107,,119,103,,,,,,,99,100,102,101,104,105,,97,98,119,,,,,96,,115',
'99,100,102,101,104,105,,97,98,,,,106,117,96,120,,114,,116,,107,,,103',
',,,,,,,,,,,,,,,119,103,,,,115,,,99,100,102,101,104,105,,97,98,111,106',
'117,341,120,96,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,,,103,113',
'112,,,99,100,102,101,104,105,,97,98,115,,303,,,96,,,,,,,111,106,117',
',120,,114,,116,,107,109,108,110,,,,,,,103,,,,,,,,,119,,,,113,112,,,99',
'100,102,101,104,105,,97,98,115,,304,,,96,,,,,,,111,106,117,,120,,114',
',116,,107,109,108,110,,,,,,,103,,,,,,,,,119,,,,113,112,,,99,100,102',
'101,104,105,,97,98,115,,305,,,96,,,,,,,111,106,117,,120,115,114,,116',
',107,109,108,110,,,,,,117,103,120,,114,,116,170,78,,119,171,,,113,112',
',,99,100,102,101,104,105,,97,98,119,,,,,96,,,99,100,102,101,104,105',
',97,98,115,,,168,,96,165,,,,,,111,106,117,103,120,,114,,116,,107,109',
'108,110,83,,,,,,103,,,,169,79,,,,119,,,,113,112,,,99,100,102,101,104',
'105,115,97,98,,,347,,,96,,,,111,106,117,,120,,114,,116,,107,109,108',
'110,,,,,,,,,,103,,,,,,119,,,,113,112,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119',
'103,,,,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,',
'114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119,103,,,113,112,,115,99,100',
'102,101,104,105,,97,98,,,111,106,117,96,120,115,114,,116,,107,109,108',
'110,337,338,,,,117,,120,,114,,116,,,,119,103,,,113,112,,,99,100,102',
'101,104,105,,97,98,119,,,115,,96,,,99,100,102,101,104,105,,97,98,117',
',120,115,114,96,116,,,,,,,,,103,,117,,120,,114,,116,,,,119,,,,,103,',
',99,100,102,101,,,,97,98,119,,,,,96,,,99,100,102,101,,115,,97,98,170',
'78,,,171,96,,,111,106,117,,120,,114,103,116,,107,109,108,110,,,,,,,',
',,,103,,,,,119,,,168,113,112,165,115,99,100,102,101,104,105,,97,98,',
',111,106,117,96,120,,114,83,116,,107,109,108,110,,,,169,79,,,,,,,,,',
',119,103,,,113,112,,115,99,100,102,101,104,105,,97,98,,,111,106,117',
'96,120,115,114,,116,,107,109,108,110,,,,,,117,,120,,114,,116,,,,119',
'103,,,113,112,,,99,100,102,101,104,105,,97,98,119,,,115,,96,,,,,102',
'101,,,,97,98,117,,120,,114,96,116,,,,,,,,,103,,,,,,,,,,,,119,,,,,103',
',115,,,102,101,,,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108',
'110,,,,,,,,,,,,,,,,119,103,,,113,112,,115,99,100,102,101,104,105,,97',
'98,,,111,106,117,96,120,,114,,116,,107,109,108,110,,,,,,,,,,,,,,,,119',
'103,,,113,112,,,99,100,102,101,104,105,115,97,98,,,,,,96,,,,111,106',
'117,374,120,,114,,116,,107,109,108,110,,,,,,,,,,103,,,,,,119,,,,113',
'112,,115,99,100,102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116',
',107,109,108,110,,,,,,,,,,,,,,,,119,103,170,78,113,112,171,115,99,100',
'102,101,104,105,,97,98,,,111,106,117,96,120,,114,,116,,107,109,108,110',
',,,,170,78,,,171,168,,,165,,,119,103,,,113,112,,,99,100,102,101,104',
'105,,97,98,83,,,,,96,,,,,169,79,168,,,165,,360,233,359,234,,357,236',
'361,,353,,356,358,,,103,,,83,237,232,362,,,,355,,,169,79,,,,,,,,235',
'363,,,,,,,,,,,,366,364,367,365,368,239,238,369,,354,360,233,359,234',
',357,236,361,,353,,356,358,,,,,,,237,232,362,,,,355,,,,,,,,,,,,235,363',
',,,,,,,,,,,366,364,367,365,368,239,238,369,,354,360,233,359,234,,357',
'236,361,,353,,356,358,,,,,,,237,232,362,,,,355,,,,,,,,,,,,235,363,,',
',,,,,,,,,366,364,367,365,368,239,238,369,,354,360,233,359,234,,357,236',
'361,,353,,356,358,,,,,,,237,232,362,,,,355,,,,,,,,,,,,235,363,,,,,,',
',,,,,366,364,367,365,368,239,238,369,,354,360,233,359,234,,357,236,361',
',353,,356,358,,,,,,,237,232,362,,,,355,,,,,,,,,,,,235,363,,,,,,,,,,',
',366,364,367,365,368,239,238,369,,354,360,233,359,234,,357,236,361,',
'353,,356,358,,,,,,,237,232,362,,,,355,,,,,,,,,,,,235,363,,,,,,,,,,,',
'366,364,367,365,368,239,238,369,,354' ]
        racc_action_table = arr = ::Array.new(10326, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'71,71,299,174,71,71,71,71,314,297,224,12,301,187,224,12,187,225,12,213',
'291,225,117,299,71,71,174,301,214,230,158,71,231,71,158,71,71,215,71',
'71,71,314,71,71,71,71,224,12,71,71,224,12,71,225,223,71,71,225,224,12',
'222,319,213,71,117,225,158,63,63,71,158,214,230,71,71,231,71,71,158',
'525,215,71,71,71,71,71,71,71,71,71,71,510,510,71,216,510,510,223,510',
'479,224,12,136,222,479,229,136,225,377,229,192,192,377,215,215,510,510',
'216,385,147,158,56,510,385,510,56,510,510,321,510,510,510,50,510,510',
'5,222,222,136,510,510,229,136,510,377,229,510,510,377,147,136,377,288',
'229,510,50,377,56,494,149,510,56,402,494,510,510,334,510,510,56,339',
'402,510,510,510,510,510,172,172,510,510,510,4,4,510,340,4,4,392,4,195',
'195,136,57,195,229,59,57,377,62,59,392,399,62,399,287,4,4,316,392,316',
'56,175,4,342,4,175,4,4,286,4,4,4,4,4,4,4,4,176,57,4,4,59,57,4,62,59',
'4,4,62,460,57,460,145,59,4,143,62,175,159,159,4,175,157,157,4,4,142',
'4,4,175,156,156,4,4,4,4,4,124,124,4,4,4,500,500,4,348,500,500,350,500',
'426,426,57,226,140,59,177,226,62,173,177,173,352,226,66,66,500,500,65',
'65,355,175,132,500,372,500,132,500,500,139,500,500,500,282,500,500,500',
'500,375,226,500,500,177,226,500,178,177,500,500,64,64,226,173,379,177',
'500,226,381,132,58,58,500,132,48,48,500,500,278,500,500,132,16,16,500',
'500,500,500,500,384,274,500,500,500,499,499,500,386,499,499,150,499',
'499,387,226,185,241,177,173,390,391,271,270,150,503,398,268,400,499',
'499,241,150,241,132,241,499,241,499,401,499,499,197,499,499,499,150',
'499,499,499,499,246,263,499,499,197,122,499,241,121,499,499,118,197',
'190,246,201,246,499,246,410,246,86,415,499,84,425,197,499,499,241,499',
'499,505,427,80,499,499,499,499,499,79,246,499,499,499,497,497,499,67',
'497,497,507,497,497,434,1,246,246,519,438,441,206,446,246,447,448,60',
'227,454,497,497,52,51,276,207,208,497,463,497,464,497,497,276,497,497',
'497,466,497,497,497,497,242,467,497,497,276,470,497,473,474,497,497',
'475,276,515,242,517,242,497,242,209,242,482,483,497,488,491,492,497',
'497,298,497,497,211,163,161,497,497,497,497,497,306,242,497,497,497',
'102,102,497,245,102,102,307,102,308,309,310,312,137,8,315,,,245,242',
'245,,245,,245,102,102,137,,137,,137,102,137,102,,102,102,,102,102,102',
',102,102,245,277,,,102,102,,,102,137,277,102,102,,,245,245,,,102,,,245',
'277,,102,,,,102,102,277,102,102,,,,102,102,102,102,102,,138,102,102',
'102,103,103,102,247,103,103,,103,,,138,,138,,138,,138,247,,247,,247',
',247,103,103,,,,,,103,,103,,103,103,138,103,103,103,,103,103,247,,,',
'103,103,,,103,,,103,103,,,247,247,,,103,,,247,,,103,,,,103,103,,103',
'103,,,,103,103,103,103,103,,,103,103,103,104,104,103,135,104,104,,104',
'7,7,7,,240,,,,,135,,135,,135,,135,104,104,240,,240,,240,104,240,104',
',104,104,,104,104,104,,104,104,135,,,,104,104,,,104,240,,104,104,,7',
'7,7,7,,104,,,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,,,104',
'104,104,105,105,104,,105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,,105,',
'105,,105,105,,105,105,105,,105,105,,,,,105,105,,,105,,,105,105,,,,,',
',105,,,,,,105,,,,105,105,,105,105,,,,105,105,105,105,105,,,105,105,105',
'106,106,105,,106,106,,106,,,,,,,,,,,,,,,,,106,106,,,,,,106,,106,,106',
'106,,106,106,106,,106,106,,,,,106,106,,,106,,,106,106,,,,,,,106,,,,',
',106,,,,106,106,,106,106,,,,106,106,106,106,106,,,106,106,106,107,107',
'106,,107,107,,107,,,,,,,,,,,,,,,,,107,107,,,,,,107,,107,,107,107,,107',
'107,107,,107,107,,,,,107,107,,,107,,,107,107,,,,,,,107,,,,,,107,,,,107',
'107,,107,107,,,,107,107,107,107,107,,,107,107,107,108,108,107,,108,108',
',108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108,,108,108,,108,108,108,,108',
'108,,,,,108,108,,,108,,,108,108,,,,,,,108,,,,,,108,,,,108,108,,108,108',
',,,108,108,108,108,108,,,108,108,108,109,109,108,,109,109,,109,,,,,',
',,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109,109,,109,109,,,,',
'109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109,,109,109,,,,109',
'109,109,109,109,,,109,109,109,110,110,109,,110,110,,110,,,,,,,,,,,,',
',,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,,,110,110',
',,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110,110,110',
'110,110,,,110,110,110,111,111,110,,111,111,,111,,,,,,,,,,,,,,,,,111',
'111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,',
',111,111,,,,,,,111,,,,,,111,,,,111,111,,111,111,,,,111,111,111,111,111',
',,111,111,111,112,112,111,,112,112,,112,,,,,,,,,,,,,,,,,112,112,,,,',
',112,,112,,112,112,,112,112,112,,112,112,,,,,112,112,,,112,,,112,112',
',,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112,,,112',
'112,112,113,113,112,,113,113,,113,,,,,,,,,,,,,,,,,113,113,,,,,,113,',
'113,,113,113,,113,113,113,,113,113,,,,,113,113,,,113,,,113,113,,,,,',
',113,,,,,,113,,,,113,113,,113,113,,,,113,113,113,113,113,,,113,113,113',
'114,114,113,,114,114,,114,,,,,,,,,,,,,,,,,114,114,,,,,,114,,114,,114',
'114,,114,114,114,,114,114,,,,,114,114,,,114,,,114,114,,,,,,,114,,,,',
',114,,,114,114,114,,114,114,,,,114,114,114,114,114,,,114,114,114,115',
'115,114,,115,115,,115,,,,,,,,,,,,,,,,,115,115,,,,,,115,,115,,115,115',
',115,115,115,,115,115,,,,,115,115,,,115,,,115,115,,,,,,,115,,,,,,115',
',,,115,115,,115,115,,,,115,115,115,115,115,,,115,115,115,408,408,115',
',408,408,,408,,,,,,,,,,,,,,,,,408,408,,,,,,408,,408,,408,408,,408,408',
'408,,408,408,408,408,,,408,408,,,408,,,408,408,,,,,,,408,,,,,,408,,',
',408,408,,408,408,,,,408,408,408,408,408,,,408,408,408,406,406,408,',
'406,406,,406,,,,,,,,,,,,,,,,,406,406,,,,,,406,,406,,406,406,,406,406',
'406,,406,406,406,406,,,406,406,,,406,,,406,406,,,,,,,406,,,,,,406,,',
',406,406,,406,406,,,,406,406,406,406,406,,,406,406,406,119,119,406,',
'119,119,,119,,,,,,,,,,,,,,,,,119,119,,,,,,119,,119,,119,119,,119,119',
'119,,119,119,,,,,119,119,,,119,,,119,119,,,,,,,119,,,,,,119,,,,119,119',
',119,119,,,,119,119,119,119,119,,,119,119,119,120,120,119,,120,120,',
'120,,,,,,,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120,,120',
'120,,,,,120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,,120,120',
',,,120,120,120,120,120,,,120,120,120,405,405,120,,405,405,,405,,,,,',
',,,,,,,,,,,405,405,,,,,,405,,405,,405,405,,405,405,405,,405,405,405',
'405,,,405,405,,,405,,,405,405,,,,,,,405,,,,,,405,,,,405,405,,405,405',
',,,405,405,405,405,405,,,405,405,405,403,403,405,,403,403,,403,403,',
',,,,,,,,,,,,,,403,403,,,,,,403,,403,,403,403,,403,403,403,,403,403,',
',,,403,403,,,403,,,403,403,,,,,,,403,,,,,,403,,,,403,403,,403,403,,',
',403,403,403,403,403,,,403,403,403,123,123,403,,123,123,,123,,,,,,,',
',,,,,,,,,123,123,,,,,,123,,123,,123,123,,123,123,123,,123,123,,,,,123',
'123,,,123,,,123,123,,,,,,,123,,,,,,123,,,,123,123,,123,123,,,,123,123',
'123,123,123,,,123,123,123,396,396,123,,396,396,,396,,,,,,,,,,,,,,,,',
'396,396,,,,,,396,,396,,396,396,,396,396,396,,396,396,396,396,,,396,396',
',,396,,,396,396,,,,,,,396,,,,,,396,,,,396,396,,396,396,,,,396,396,396',
'396,396,,,396,396,396,393,393,396,,393,393,,393,,,,,,,,,,,,,,,,,393',
'393,,,,,,393,,393,,393,393,,393,393,393,,393,393,,,,,393,393,,,393,',
',393,393,,,,,,,393,,,,,,393,,,,393,393,,393,393,,,,393,393,393,393,393',
',,393,393,393,389,389,393,,389,389,,389,389,,,,,,,,,,,,,,,,389,389,',
',,,,389,,389,,389,389,,389,389,389,,389,389,389,389,,,389,389,,,389',
',,389,389,,,,,,,389,,,,,,389,,,,389,389,,389,389,,,,389,389,389,389',
'389,,,389,389,389,373,373,389,,373,373,,373,,,,,,,,,,,,,,,,,373,373',
',,,,,373,,373,,373,373,,373,373,373,,373,373,,,,,373,373,,,373,,,373',
'373,,,,,,,373,,,,,,373,,,,373,373,,373,373,,,,373,373,373,373,373,,',
'373,373,373,351,351,373,,351,351,,351,,,,,,,,,,,,,,,,,351,351,,,,,,351',
',351,,351,351,,351,351,351,,351,351,,,,,351,351,,,351,,,351,351,,,,',
',,351,,,,,,351,,,,351,351,,351,351,,,,351,351,351,351,351,,,351,351',
'351,347,347,351,,347,347,,347,,,,,,,,,,,,,,,,,347,347,,,,,,347,,347',
',347,347,,347,347,347,,347,347,,,,,347,347,,,347,,,347,347,,,,,,,347',
',,,,,347,,,,347,347,,347,347,,,,347,347,347,347,347,,,347,347,347,346',
'346,347,,346,346,,346,,,,,,,,,,,,,,,,,346,346,,,,,,346,,346,,346,346',
',346,346,346,,346,346,,,,,346,346,,,346,,,346,346,,,,,,,346,,,,,,346',
',,,346,346,,346,346,,,,346,346,346,346,346,,,346,346,346,345,345,346',
',345,345,,345,,,,,,,,,,,,,,,,,345,345,,,,,,345,,345,,345,345,,345,345',
'345,,345,345,,,,,345,345,,,345,,,345,345,,,,,,,345,,,,,,345,,,,345,345',
',345,345,,,,345,345,345,345,345,,,345,345,345,344,344,345,,344,344,',
'344,,,,,,,,,,,,,,,,,344,344,,,,,,344,,344,,344,344,,344,344,344,,344',
'344,,,,,344,344,,,344,,,344,344,,,,,,,344,,,,,,344,,,,344,344,,344,344',
',,,344,344,344,344,344,,,344,344,344,329,329,344,,329,329,,329,,,,,',
',,,,,,,,,,,329,329,,,,,,329,,329,,329,329,,329,329,329,,329,329,329',
'329,,,329,329,,,329,,,329,329,,,,,,,329,,,,,,329,,,,329,329,,329,329',
',,,329,329,329,329,329,,,329,329,329,324,324,329,,324,324,,324,,,,,',
',,,,,,,,,,,324,324,,,,,,324,,324,,324,324,,324,324,324,,324,324,324',
'324,,,324,324,,,324,,,324,324,,,,,,,324,,,,,,324,,,,324,324,,324,324',
',,,324,324,324,324,324,324,324,324,324,324,151,151,324,,151,151,,151',
',,,,,,,,,,,,,,,,151,151,151,,,,,151,,151,,151,151,,151,151,151,,151',
'151,151,151,,,151,151,,,151,,,151,151,,,,,,,151,,,,,,151,,,,151,151',
',151,151,,,,151,151,151,151,151,,,151,151,151,323,323,151,,323,323,',
'323,323,,,,,,,,,,,,,,,,323,323,,,,,,323,,323,,323,323,,323,323,323,',
'323,323,323,323,,,323,323,,,323,,,323,323,,,,,,,323,,,,,,323,,,,323',
'323,,323,323,,,,323,323,323,323,323,323,323,323,323,323,320,320,323',
',320,320,,320,,,,,,,,,,,,,,,,,320,320,,,,,,320,,320,,320,320,,320,320',
'320,,320,320,320,320,,,320,320,,,320,,,320,320,,,,,,,320,,,,,,320,,',
',320,320,,320,320,,,,320,320,320,320,320,320,320,320,320,320,160,160',
'320,,160,160,,160,160,,,,,,,,,,,,,,,,160,160,,,,,,160,,160,,160,160',
',160,160,160,,160,160,160,160,,,160,160,,,160,,,160,160,,,,,,,160,,',
',,,160,,,,160,160,,160,160,,,,160,160,160,160,160,,,160,160,160,305',
'305,160,,305,305,,305,,,,,,,,,,,,,,,,,305,305,,,,,,305,,305,,305,305',
',305,305,305,,305,305,,,,,305,305,,,305,,,305,305,,,,,,,305,,,,,,305',
',,,305,305,,305,305,,,,305,305,305,305,305,,,305,305,305,304,304,305',
',304,304,,304,304,,,,,,,,,,,,,,,,304,304,,,,,,304,,304,,304,304,,304',
'304,304,,304,304,304,304,,,304,304,,,304,,,304,304,,,,,,,304,,,,,,304',
',,,304,304,,304,304,,,,304,304,304,304,304,,,304,304,304,303,303,304',
',303,303,,303,303,,,,,,,,,,,,,,,,303,303,,,,,,303,,303,,303,303,,303',
'303,303,,303,303,303,303,,,303,303,,,303,,,303,303,,,,,,,303,,,,,,303',
',,,303,303,,303,303,,,,303,303,303,303,303,,,303,303,303,285,285,303',
',285,285,,285,,,,,,,,,,,,,,,,,285,285,,,,,,285,,285,,285,285,,285,285',
'285,,285,285,285,285,,,285,285,,,285,,,285,285,,,,,,,285,,,,,,285,,',
',285,285,,285,285,,,,285,285,285,285,285,,,285,285,285,284,284,285,',
'284,284,,284,,,,,,,,,,,,,,,,,284,284,,,,,,284,,284,,284,284,,284,284',
'284,,284,284,,,,,284,284,,,284,,,284,284,,,,,,,284,,,,,,284,,,,284,284',
',284,284,,,,284,284,284,284,284,,,284,284,284,281,281,284,,281,281,',
'281,,,,,,,,,,,,,,,,,281,281,,,,,,281,,281,,281,281,,281,281,281,,281',
'281,281,281,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,,,281,281',
',281,281,,,,281,281,281,281,281,,,281,281,281,261,261,281,,261,261,',
'261,,,,,,,,,,,,,,,,,261,261,,,,,,261,,261,,261,261,,261,261,261,,261',
'261,,,,,261,261,,,261,,,261,261,,,,,,,261,,,,,,261,,,,261,261,,261,261',
',,,261,261,261,261,261,,,261,261,261,196,196,261,,196,196,,196,,,,,',
',,,,,,,,,,,196,196,,,,,,196,,196,,196,196,,196,196,196,,196,196,196',
'196,,,196,196,,,196,,,196,196,,,,,,,196,,,,,,196,,,,196,196,,196,196',
',,,196,196,196,196,196,,,196,196,196,199,199,196,,199,199,,199,199,',
',,,,,,,,,,,,,,199,199,,,,,,199,,199,,199,199,,199,199,199,,199,199,199',
'199,,,199,199,,,199,,,199,199,,,,,,,199,,,,,,199,,,,199,199,,199,199',
',,,199,199,199,199,199,199,199,199,199,199,212,212,199,,212,212,,212',
',,212,,,,,,,,,,,,,,212,212,,,,,,212,,212,,212,212,,212,212,212,,212',
'212,,,,,212,212,,,212,,,212,212,,,,,,,212,,,,,,212,,,,212,212,,212,212',
',,,212,212,212,212,212,,,212,212,212,217,217,212,,217,217,,217,,,,,',
',,,,,,,,,,,217,217,,,,,,217,,217,,217,217,,217,217,217,,217,217,,,,',
'217,217,,,217,,,217,217,,,,,,,217,,,,,,217,,,,217,217,,217,217,,,,217',
'217,217,217,217,,,217,217,217,218,218,217,,218,218,,218,,,,,,,,,,,,',
',,,,218,218,,,,,,218,,218,,218,218,,218,218,218,,218,218,,,,,218,218',
',,218,,,218,218,,,,,,,218,,,,,,218,,,,218,218,,218,218,,,,218,218,218',
'218,218,,,218,218,218,219,219,218,,219,219,,219,,,,,,,,,,,,,,,,,219',
'219,,,,,,219,,219,,219,219,,219,219,219,,219,219,,,,,219,219,,,219,',
',219,219,,,,,,,219,,,,,,219,,,,219,219,,219,219,,,,219,219,219,219,219',
',,219,219,219,0,0,219,,0,0,,0,,,,,,,,,,,,,,,,,0,0,,,,,,0,,0,,0,0,,0',
'0,0,,0,0,0,0,,,0,0,,,0,,,0,0,,,,,,,0,,,,,,0,,,,0,0,,0,0,0,,,0,0,0,0',
'0,,,0,0,0,10,10,0,,10,10,,10,,,,,,,,,,,,,,,,,10,10,,,,,,10,,10,,10,10',
',10,10,10,,10,10,10,10,,,10,10,,,10,,,10,10,,,,,,,10,,,,,,10,,,,10,10',
',10,10,,,,10,10,10,10,10,,,10,10,10,11,11,10,,11,11,,11,,,,,,,,,,,,',
',,,,11,11,,,,,,11,,11,,11,11,,11,11,11,,11,11,11,11,,,11,11,,,11,,,11',
'11,,,,,,,11,,,,,,11,,,,11,11,,11,11,,,,11,11,11,11,11,,,11,11,11,478',
'478,11,,478,478,,478,,,,,,,,,,,,,,,,,478,478,,,,,,478,,478,,478,478',
',478,478,478,,478,478,478,478,,,478,478,,,478,,,478,478,,,,,,,478,,',
',,,478,,,,478,478,,478,478,,,,478,478,478,478,478,,,478,478,478,17,17',
'478,,17,17,,17,,,,,,,,,,,,,,,,,17,17,,,,,,17,,17,,17,17,,17,17,17,,17',
'17,,,,,17,17,,,17,,,17,17,,,,,,,17,,,,,,17,,,,17,17,,17,17,,,,17,17',
'17,17,17,,,17,17,17,18,18,17,,18,18,,18,,,,,,,,,,,,,,,,,18,18,,,,,,18',
',18,,18,18,,18,18,18,,18,18,,,,,18,18,,,18,,,18,18,,,,,,,18,,,,,,18',
',,,18,18,,18,18,,,,18,18,18,18,18,,,18,18,18,19,19,18,,19,19,,19,,,',
',,,,,,,,,,,,,19,19,,,,,,19,,19,,19,19,,19,19,19,,19,19,,,,,19,19,,,19',
',,19,19,,,,,,,19,,,,,,19,,,,19,19,,19,19,,,,19,19,19,19,19,,,19,19,19',
'20,20,19,,20,20,,20,,,,,,,,,,,,,,,,,20,20,,,,,,20,,20,,20,20,,20,20',
'20,,20,20,20,20,,,20,20,,,20,,,20,20,,,,,,,20,,,,,,20,,,,20,20,,20,20',
',,,20,20,20,20,20,,,20,20,20,21,21,20,,21,21,,21,,,,,,,,,,,,,,,,,21',
'21,,,,,,21,,21,,21,21,,21,21,21,,21,21,21,21,,,21,21,,,21,,,21,21,,',
',,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21,21,21,21,,,21,21,21,476,476',
'21,,476,476,,476,476,,,,,,,,,,,,,,,,476,476,,,,,,476,,476,,476,476,',
'476,476,476,,476,476,476,476,,,476,476,,,476,,,476,476,,,,,,,476,,,',
',,476,,,,476,476,,476,476,,,,476,476,476,476,476,,,476,476,476,49,49',
'476,,49,49,,49,,,,,,,,,,,,,,,,,49,49,49,,,,,49,,49,,49,49,,49,49,49',
',49,49,49,49,,,49,49,,,49,,,49,49,,,,,,,49,,,,,,49,,,,49,49,,49,49,',
',,49,49,49,49,49,,,49,49,49,462,462,49,,462,462,,462,,,,,,,,,,,,,,,',
',462,462,,,,,,462,,462,,462,462,,462,462,462,,462,462,,,,,462,462,,',
'462,,,462,462,,,,,,,462,,,,,,462,,,,462,462,,462,462,,,,462,462,462',
'462,462,,,462,462,462,456,456,462,,456,456,,456,,,,,,,,,,,,,,,,,456',
'456,,,,,,456,,456,,456,456,,456,456,456,,456,456,,,,,456,456,,,456,',
',456,456,,,,,,,456,,,,,,456,,,,456,456,,456,456,,,,456,456,456,456,456',
',,456,456,456,53,53,456,,53,53,,53,,,,,,,,,,,,,,,,,53,53,,,,,,53,,53',
',53,53,,53,53,53,,53,53,,,,,53,53,,,53,,,53,53,,,,,,,53,,,,,,53,,,,53',
'53,,53,53,,,,53,53,53,53,53,,,53,53,53,54,54,53,,54,54,,54,,,,,,,,,',
',,,,,,,54,54,,,,,,54,,54,,54,54,,54,54,54,,54,54,,,,,54,54,,,54,,,54',
'54,,,,,,,54,,,,,,54,,,,54,54,,54,54,,,,54,54,54,54,54,,,54,54,54,55',
'55,54,,55,55,,55,,,,,,,,,,,,,,,,,55,55,,,,,,55,,55,,55,55,,55,55,55',
',55,55,,,,,55,55,,,55,,,55,55,,,,,,,55,,,,,,55,,,,55,55,,55,55,,,,55',
'55,55,55,55,,,55,55,55,453,453,55,,453,453,,453,,,,,,,,,,,,,,,,,453',
'453,,,,,,453,,453,,453,453,,453,453,453,,453,453,453,453,,,453,453,',
',453,,,453,453,,,,,,,453,,,,,,453,,,,453,453,,453,453,,,,453,453,453',
'453,453,,,453,453,453,450,450,453,,450,450,,450,,,,,,,,,,,,,,,,,450',
'450,,,,,,450,,450,,450,450,,450,450,450,,450,450,,,,,450,450,,,450,',
',450,450,,,,,,,450,,,,,,450,,,,450,450,,450,450,,,,450,450,450,450,450',
',,450,450,450,442,442,450,,442,442,,442,,,,,,,,,,,,,,,,,442,442,,,,',
',442,,442,,442,442,,442,442,442,,442,442,442,442,,,442,442,,,442,,,442',
'442,,,,,,,442,,,,,,442,,,,442,442,,442,442,,,,442,442,442,442,442,,',
'442,442,442,435,435,442,,435,435,,435,,,,,,,,,,,,,,,,,435,435,,,,,,435',
',435,,435,435,,435,435,435,,435,435,,,,,435,435,,,435,,,435,435,,,,',
',,435,,,,,,435,,,,435,435,,435,435,,,,435,435,435,435,435,,,435,435',
'435,72,72,435,,72,72,72,72,,,,,,,,,,,,,,,,,72,72,,,,,,72,,72,,72,72',
',72,72,72,,72,72,72,72,,,72,72,,,72,,,72,72,,,,,,,72,,,,,,72,,,,72,72',
',72,72,,,,72,72,72,72,72,72,72,72,72,72,73,73,72,,73,73,,73,73,,,,,',
',,,,,,,,,,73,73,,,,,,73,,73,,73,73,,73,73,73,,73,73,73,73,,,73,73,,',
'73,,,73,73,,,,,,,73,,,,,,73,,,,73,73,,73,73,,,,73,73,73,73,73,73,73',
'73,73,73,77,77,73,,77,77,,77,,,,,,,,,,,,,,,,,77,77,,,,,,77,,77,,77,77',
',77,77,77,,77,77,77,77,,,77,77,,,77,,,77,77,,,,,,,77,,,,,,77,,,,77,77',
',77,77,,,,77,77,77,77,77,,,77,77,77,82,82,77,,82,82,,82,,,,,,,,,,,,',
',,,,82,82,,,,,,82,,82,,82,82,,82,82,82,,82,82,,,,,82,82,,,82,,,82,82',
',,,,,,82,,,,,,82,,,,82,82,,82,82,,,,82,82,82,82,82,,,82,82,82,417,417',
'82,,417,417,,417,,,,,,,,,,,,,,,,,417,417,,,,,,417,,417,,417,417,,417',
'417,417,,417,417,,,,,417,417,,,417,,,417,417,,,,,,,417,,,,,,417,,,,417',
'417,,417,417,,,,417,417,417,417,417,,,417,417,417,85,85,417,,85,85,',
'85,,,,,,,,,,,,,,,,,85,85,,,,,,85,,85,,85,85,,85,85,85,,85,85,85,85,',
',85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85,,85,85,,,,85,85,85,85',
'85,,,85,85,85,87,87,85,,87,87,,87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87',
',87,87,,87,87,87,,87,87,87,87,,,87,87,,,87,,,87,87,,,,,,,87,,,,,,87',
',,,87,87,,87,87,,,,87,87,87,87,87,,,87,87,87,88,88,87,,88,88,,88,,,',
',,,,,,,,,,,,,88,88,,,,,,88,,88,,88,88,,88,88,88,,88,88,88,88,,,88,88',
',,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88,,88,88,,,,88,88,88,88,88,,,88',
'88,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89,89,,,,,,89,,89,,89,89,',
'89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,,,,,,89,,,,,,89,,,,89,89',
',89,89,,,,89,89,89,89,89,,,89,89,89,90,90,89,,90,90,,90,,,,,,,,,,,,',
',,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90,,,90,90,,,90,,,90',
'90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90,90,,,90,90,90,91',
'91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91,,91,91,91',
',91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91,,91,91,',
',,91,91,91,91,91,,,91,91,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,,,,92,92',
',,,,,92,,92,,92,92,,92,92,92,,92,92,92,92,,,92,92,,,92,,,92,92,,,,,',
',92,,,,,,92,,,,92,92,,92,92,,,,92,92,92,92,92,,,92,92,92,93,93,92,,93',
'93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93,93,,93,93,93',
'93,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93,93,93',
'93,93,,,93,93,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,94,,,,,,94,',
'94,,94,94,,94,94,94,,94,94,94,94,,,94,94,,,94,,,94,94,,,,,,,94,,,,,',
'94,,,,94,94,,94,94,,,,94,94,94,94,94,,,94,94,94,95,95,94,,95,95,,95',
',,,,,,,,,,,,,,,,95,95,,,,,,95,95,95,95,95,95,95,95,95,95,,95,95,,,,',
'95,95,95,95,95,,,95,95,,,,,,,95,,,,,95,95,,,,95,95,,95,95,,,,95,95,95',
'95,95,95,95,95,95,95,96,96,95,,96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,',
'96,,96,,96,96,,96,96,96,,96,96,,,,,96,96,,,96,,,96,96,,,,,,,96,,,,,',
'96,,,,96,96,,96,96,,,,96,96,96,96,96,,,96,96,96,97,97,96,,97,97,,97',
',,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97,97,,97,97,97,,97,97,,,,,97,97',
',,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97,,97,97,,,,97,97,97,97,97,,,97',
'97,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98,98,,,,,,98,,98,,98,98,',
'98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,,98,,,,,,98,,,,98,98,,98',
'98,,,,98,98,98,98,98,,,98,98,98,99,99,98,,99,99,,99,,,,,,,,,,,,,,,,',
'99,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99,,,99,,,99,99,,,',
',,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,,,99,99,99,100,100,99',
',100,100,,100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100,100,,100,100',
'100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,,,100,,,,100,100',
',100,100,,,,100,100,100,100,100,,,100,100,100,101,101,100,,101,101,',
'101,,,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101,,101',
'101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,,101,101',
',,,101,101,101,101,101,256,,101,101,101,,,101,,,,,256,256,256,,256,255',
'256,,256,,256,256,256,256,,,,,255,255,,255,,255,,255,,255,,256,,,,,',
',,256,256,256,256,256,256,,256,256,255,,,,,256,,254,255,255,255,255',
'255,255,,255,255,,,,254,254,255,254,253,254,,254,,254,,,256,,,,,253',
'253,,253,,253,,253,,253,,254,255,,,,,,,254,254,254,254,254,254,,254',
'254,253,,,,,254,,252,253,253,253,253,253,253,,253,253,,,,252,252,253',
'252,,252,,252,,252,,,254,,,,,,,,,,,,,,,,252,253,,,,210,,,252,252,252',
'252,252,252,,252,252,210,210,210,210,210,252,210,,210,,210,210,210,210',
',,,,,,,,,,,,,,,210,,,252,210,210,,,210,210,210,210,210,210,,210,210',
'152,,152,,,210,,,,,,,152,152,152,,152,,152,,152,,152,152,152,152,,,',
',,,210,,,,,,,,,152,,,,152,152,,,152,152,152,152,152,152,,152,152,154',
',154,,,152,,,,,,,154,154,154,,154,,154,,154,,154,154,154,154,,,,,,,152',
',,,,,,,,154,,,,154,154,,,154,154,154,154,154,154,,154,154,155,,155,',
',154,,,,,,,155,155,155,,155,251,155,,155,,155,155,155,155,,,,,,251,154',
'251,,251,,251,313,313,,155,313,,,155,155,,,155,155,155,155,155,155,',
'155,155,251,,,,,155,,,251,251,251,251,251,251,,251,251,459,,,313,,251',
'313,,,,,,459,459,459,155,459,,459,,459,,459,459,459,459,313,,,,,,251',
',,,313,313,,,,459,,,,459,459,,,459,459,459,459,459,459,258,459,459,',
',258,,,459,,,,258,258,258,,258,,258,,258,,258,258,258,258,,,,,,,,,,459',
',,,,,258,,,,258,258,,257,258,258,258,258,258,258,,258,258,,,257,257',
'257,258,257,,257,,257,,257,257,257,257,,,,,,,,,,,,,,,,257,258,,,,257',
',198,257,257,257,257,257,257,,257,257,,,198,198,198,257,198,,198,,198',
',198,198,198,198,,,,,,,,,,,,,,,,198,257,,,198,198,,9,198,198,198,198',
'198,198,,198,198,,,9,9,9,198,9,250,9,,9,,9,9,9,9,198,198,,,,250,,250',
',250,,250,,,,9,198,,,9,9,,,9,9,9,9,9,9,,9,9,250,,,249,,9,,,250,250,250',
'250,250,250,,250,250,249,,249,248,249,250,249,,,,,,,,,9,,248,,248,,248',
',248,,,,249,,,,,250,,,249,249,249,249,,,,249,249,248,,,,,249,,,248,248',
'248,248,,437,,248,248,412,412,,,412,248,,,437,437,437,,437,,437,249',
'437,,437,437,437,437,,,,,,,,,,,248,,,,,437,,,412,437,437,412,433,437',
'437,437,437,437,437,,437,437,,,433,433,433,437,433,,433,412,433,,433',
'433,433,433,,,,412,412,,,,,,,,,,,433,437,,,433,433,,432,433,433,433',
'433,433,433,,433,433,,,432,432,432,433,432,243,432,,432,,432,432,432',
'432,,,,,,243,,243,,243,,243,,,,432,433,,,432,432,,,432,432,432,432,432',
'432,,432,432,243,,,244,,432,,,,,243,243,,,,243,243,244,,244,,244,243',
'244,,,,,,,,,432,,,,,,,,,,,,244,,,,,243,,431,,,244,244,,,,244,244,,,431',
'431,431,244,431,,431,,431,,431,431,431,431,,,,,,,,,,,,,,,,431,244,,',
'431,431,,430,431,431,431,431,431,431,,431,431,,,430,430,430,431,430',
',430,,430,,430,430,430,430,,,,,,,,,,,,,,,,430,431,,,430,430,,,430,430',
'430,430,430,430,272,430,430,,,,,,430,,,,272,272,272,272,272,,272,,272',
',272,272,272,272,,,,,,,,,,430,,,,,,272,,,,272,272,,267,272,272,272,272',
'272,272,,272,272,,,267,267,267,272,267,,267,,267,,267,267,267,267,,',
',,,,,,,,,,,,,267,272,228,228,267,267,228,262,267,267,267,267,267,267',
',267,267,,,262,262,262,267,262,,262,,262,,262,262,262,262,,,,,61,61',
',,61,228,,,228,,,262,267,,,262,262,,,262,262,262,262,262,262,,262,262',
'228,,,,,262,,,,,228,228,61,,,61,,266,266,266,266,,266,266,266,,266,',
'266,266,,,262,,,61,266,266,266,,,,266,,,61,61,,,,,,,,266,266,,,,,,,',
',,,,266,266,266,266,266,266,266,266,,266,341,341,341,341,,341,341,341',
',341,,341,341,,,,,,,341,341,341,,,,341,,,,,,,,,,,,341,341,,,,,,,,,,',
',341,341,341,341,341,341,341,341,,341,343,343,343,343,,343,343,343,',
'343,,343,343,,,,,,,343,343,343,,,,343,,,,,,,,,,,,343,343,,,,,,,,,,,',
'343,343,343,343,343,343,343,343,,343,374,374,374,374,,374,374,374,,374',
',374,374,,,,,,,374,374,374,,,,374,,,,,,,,,,,,374,374,,,,,,,,,,,,374',
'374,374,374,374,374,374,374,,374,382,382,382,382,,382,382,382,,382,',
'382,382,,,,,,,382,382,382,,,,382,,,,,,,,,,,,382,382,,,,,,,,,,,,382,382',
'382,382,382,382,382,382,,382,407,407,407,407,,407,407,407,,407,,407',
'407,,,,,,,407,407,407,,,,407,,,,,,,,,,,,407,407,,,,,,,,,,,,407,407,407',
'407,407,407,407,407,,407' ]
        racc_action_check = arr = ::Array.new(10326, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  5003,   465,   nil,   nil,   180,   122,   nil,   720,   550,  9348,
  5094,  5185,     9,   nil,   nil,   nil,   264,  5367,  5458,  5549,
  5640,  5731,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   256,  5913,
   105,   410,   454,  6186,  6277,  6368,   119,   191,   252,   194,
   467,  9919,   197,   -21,   242,   211,   207,   442,   nil,   nil,
   nil,    -2,  6823,  6914,   nil,   nil,   nil,  7005,   nil,   373,
   372,   nil,  7096,   nil,   434,  7278,   418,  7369,  7460,  7551,
  7642,  7733,  7824,  7915,  8006,  8097,  8188,  8279,  8370,  8461,
  8552,  8643,   544,   635,   726,   817,   908,   999,  1090,  1181,
  1272,  1363,  1454,  1545,  1636,  1727,   nil,   -20,   412,  2000,
  2091,   409,   406,  2364,   242,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   301,   nil,   nil,   724,   100,   551,   626,   282,
   257,   nil,   244,   174,   nil,   236,   nil,   110,   nil,    98,
   333,  3456,  8958,   nil,  9016,  9074,   235,   227,    28,   223,
  3729,   522,   nil,   513,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   151,   283,   -24,   210,   219,   285,   313,   nil,
   nil,   nil,   nil,   nil,   nil,   362,   nil,     3,   nil,   nil,
   411,   nil,   106,   nil,   nil,   188,  4457,   364,  9300,  4548,
   nil,   412,   nil,   nil,   nil,   nil,   462,   475,   476,   511,
  8900,   520,  4639,     7,    16,    25,    67,  4730,  4821,  4912,
   nil,   nil,    48,    42,     8,    15,   282,   468,  9884,   103,
    17,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   733,   369,   494,  9593,  9637,   542,   403,   633,  9426,  9409,
  9365,  9091,  8854,  8806,  8789,  8741,  8724,  9252,  9204,   nil,
   nil,  4366,  9884,   398,   nil,   nil,  9933,  9836,   337,   nil,
   358,   338,  9788,   nil,   321,   nil,   455,   563,   339,   nil,
   nil,  4275,   286,   nil,  4184,  4093,   169,   196,   102,   nil,
   nil,     7,   nil,   nil,   nil,   nil,   nil,    -7,   493,   -35,
   nil,    -1,   nil,  4002,  3911,  3820,   532,   543,   545,   546,
   546,   nil,   518,  9117,   -34,   499,   201,   nil,   nil,    53,
  3638,   120,   nil,  3547,  3365,   nil,   nil,   nil,   nil,  3274,
   nil,   nil,   nil,   nil,   153,   nil,   nil,   nil,   nil,   158,
   175,  9993,   204, 10053,  3183,  3092,  3001,  2910,   263,   nil,
   271,  2819,   280,   nil,   nil,   289,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   295,  2728, 10113,   310,   nil,   106,   nil,   321,
   nil,   325, 10173,   nil,   287,   110,   357,   364,   nil,  2637,
   372,   308,   151,  2546,   nil,   nil,  2455,   nil,   375,   168,
   377,   364,   149,  2273,   nil,  2182,  1909, 10233,  1818,   nil,
   420,   nil,  9489,   nil,   nil,   423,   nil,  7187,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   363,   200,   430,   nil,   nil,
  9733,  9685,  9576,  9528,   454,  6732,   nil,  9480,   459,   nil,
   nil,   457,  6641,   nil,   nil,   nil,   444,   446,   462,   nil,
  6550,   nil,   nil,  6459,   468,   nil,  6095,   nil,   nil,  9149,
   206,   nil,  6004,   478,   455,   nil,   487,   493,   nil,   nil,
   496,   nil,   nil,   498,   496,   502,  5822,   nil,  5276,    91,
   nil,   nil,   512,   480,   nil,   nil,   nil,   nil,   515,   nil,
   nil,   516,   517,   nil,   150,   nil,   nil,   453,   nil,   362,
   271,   nil,   nil,   374,   nil,   432,   nil,   451,   nil,   nil,
    89,   nil,   nil,   nil,   nil,   504,   nil,   506,   nil,   458,
   nil,   nil,   nil,   nil,   nil,    36,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -293,    -1,    -2,    -4,    -5,    -8,   -10,   -16,   -21,
  -293,  -293,  -186,   -33,   -34,   -35,   -36,  -293,  -293,  -293,
  -293,  -293,   -64,   -65,   -66,   -67,   -68,   -69,   -70,   -71,
   -72,   -73,   -74,   -75,   -76,   -77,   -78,   -79,   -80,   -81,
   -82,   -83,   -84,   -85,   -86,   -87,   -88,   -89,   -90,  -293,
  -293,   -97,  -101,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
  -293,  -293,  -293,  -241,  -264,  -216,  -240,  -293,  -213,  -214,
  -215,  -293,  -293,  -293,  -237,  -238,  -239,  -293,  -243,  -293,
  -256,  -259,  -293,  -265,  -293,  -293,    -7,  -293,  -293,  -293,
  -293,  -293,  -293,  -293,  -293,  -138,  -293,  -293,  -293,  -293,
  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
  -293,  -293,  -293,  -293,  -293,  -293,   -95,  -293,  -133,  -292,
  -292,   -22,   -23,  -293,  -292,  -155,  -182,  -183,  -184,  -185,
  -186,  -187,  -293,  -151,  -152,   -47,  -186,   -48,   -55,  -293,
  -293,   -14,  -266,   -92,   -96,  -203,  -210,  -264,   -98,  -292,
  -293,  -293,  -293,  -109,  -293,  -293,  -292,  -292,  -293,  -292,
  -293,  -266,  -166,  -168,  -169,  -170,  -171,  -172,  -174,  -175,
  -240,  -241,  -292,  -293,  -231,  -233,  -236,  -232,  -266,  -218,
  -227,  -228,  -229,  -234,  -235,  -266,  -220,  -293,  -223,  -224,
  -293,  -242,  -293,  -247,  -250,  -293,  -254,  -293,  -293,  -293,
   530,    -6,    -9,   -11,   -12,   -13,   -17,   -18,   -19,   -20,
  -293,  -266,  -293,   -88,   -89,   -90,  -284,  -277,  -283,  -271,
  -139,  -142,  -216,  -293,  -274,  -288,  -186,  -291,  -280,  -286,
  -214,  -215,  -270,  -275,  -276,  -278,  -279,  -281,  -289,  -290,
   -37,   -38,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -49,   -50,   -51,   -52,   -53,   -54,   -56,   -57,  -293,   -58,
  -127,  -293,   -62,  -266,  -102,  -103,  -138,  -137,  -293,  -136,
  -293,  -268,  -293,   -28,  -292,  -188,  -293,  -293,  -293,   -59,
   -60,  -267,  -293,   -94,  -293,  -254,  -293,  -293,  -293,  -181,
  -107,  -266,  -193,  -195,  -196,  -197,  -198,  -200,  -293,  -293,
  -264,  -293,  -100,  -293,  -293,  -293,  -293,  -293,  -293,  -293,
  -293,  -163,  -292,  -267,  -293,  -292,  -207,  -208,  -209,  -293,
  -267,  -293,  -221,  -293,  -293,  -244,  -245,  -246,  -248,  -293,
  -251,  -252,  -253,  -255,  -266,  -257,  -260,  -262,  -263,    -8,
  -293,  -138,  -293,  -267,  -293,  -293,  -293,  -293,  -266,  -129,
  -293,  -267,  -266,  -141,  -143,  -293,  -271,  -272,  -273,  -274,
  -277,  -280,  -282,  -283,  -284,  -285,  -286,  -287,  -288,  -291,
  -134,  -135,  -293,  -269,  -138,  -293,  -158,  -293,  -189,  -266,
  -190,  -266,  -138,   -15,   -91,  -293,  -293,  -293,  -104,  -293,
  -179,  -293,  -267,  -293,  -201,  -202,  -293,   -99,  -293,  -112,
  -293,  -118,  -293,  -293,  -122,  -292,  -292,  -138,  -292,  -162,
  -293,  -176,  -293,  -167,  -173,  -293,  -205,  -293,  -217,  -230,
  -219,  -222,  -225,  -226,  -249,  -293,  -293,  -266,   -26,  -140,
  -146,  -144,  -145,  -131,  -293,  -267,   -61,   -63,  -293,   -25,
   -29,  -266,  -292,  -159,  -160,  -161,  -293,  -293,  -266,   -93,
  -293,  -204,  -211,  -254,  -293,  -106,  -293,  -108,  -194,  -199,
  -112,  -111,  -293,  -293,  -118,  -117,  -293,  -293,  -121,  -123,
  -293,  -156,  -157,  -293,  -266,  -293,  -293,  -177,  -292,  -293,
  -258,  -261,  -293,   -30,  -128,  -130,  -132,   -27,  -293,  -191,
  -192,  -293,  -293,  -105,  -293,  -110,  -113,  -293,  -116,  -293,
  -292,  -147,  -148,  -293,  -153,  -293,  -165,  -293,  -206,   -24,
   -31,  -154,  -150,  -212,  -180,  -293,  -115,  -293,  -120,  -293,
  -125,  -126,  -149,  -164,  -178,  -268,  -114,  -119,  -124,   -32 ]

racc_goto_table = [
     2,   125,   135,   137,   138,   271,   139,   140,   164,   166,
   263,   145,   269,   269,   148,   336,   260,   372,   146,   317,
   332,   182,   182,   287,   191,   291,   142,   413,   132,   211,
   331,   404,     3,   121,   122,   141,   482,    86,   152,   154,
   155,   440,   289,   259,   465,   156,   157,   318,   125,   461,
   388,   172,   268,   270,   178,   185,   496,   180,   180,   180,
   403,   519,   348,   193,   429,   470,   473,   198,   475,   159,
   158,   375,   334,   202,   203,   204,   205,   443,   410,   414,
   210,   240,   241,   242,   243,   244,   245,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
   262,   458,   488,   395,   267,   267,   283,   498,   272,   386,
   495,   145,   394,   282,   206,   207,   208,   209,   201,   422,
   330,   278,   274,     1,   328,   125,   477,   329,   301,   469,
   327,   194,   312,   196,   316,   145,   nil,   141,   507,   nil,
   nil,   nil,   146,   nil,   nil,   nil,   nil,   308,   nil,   319,
   nil,   379,   381,   nil,   306,   307,   321,   309,   145,   nil,
   310,   nil,   416,   349,   157,   nil,   172,   376,   nil,   nil,
   315,   nil,   nil,   nil,   nil,   164,   166,   145,   nil,   385,
   nil,   nil,   342,   nil,   146,   339,   nil,   nil,   nil,   415,
   nil,   nil,   nil,   nil,   nil,   nil,   333,   137,   nil,   340,
   352,   nil,   152,   154,   155,   411,   nil,   nil,   289,   nil,
   nil,   nil,   nil,   156,   157,   125,   nil,   nil,   172,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   350,   nil,   nil,   145,   145,   nil,
   nil,   nil,   nil,   481,   nil,   nil,   258,   nil,   nil,   390,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   164,   166,   391,   nil,   nil,   nil,   nil,   383,   nil,   262,
   419,   529,   nil,   nil,   423,   427,   424,   492,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   333,   nil,   nil,   nil,   nil,
   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   472,   472,
   nil,   472,   nil,   398,   400,   425,   180,   nil,   441,   180,
   180,   nil,   479,   nil,   nil,   193,   448,   nil,   nil,   434,
   nil,   nil,   nil,   438,   nil,   nil,   nil,   nil,   nil,   430,
   431,   432,   433,   nil,   nil,   472,   437,   485,   nil,   nil,
   nil,   474,   nil,   nil,   nil,   nil,   nil,   449,   nil,   nil,
   446,   494,   447,   145,   nil,   nil,   nil,   nil,   272,   164,
   166,   nil,   nil,   nil,   nil,   nil,   444,   nil,   nil,   nil,
   nil,   472,   nil,   nil,   nil,   nil,   nil,   nil,   459,   nil,
   nil,   nil,   383,   nil,   nil,   nil,   nil,   nil,   262,   454,
   nil,   nil,   525,   520,   nil,   nil,   nil,   nil,   483,   nil,
   nil,   nil,   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   487,   nil,   nil,   nil,   nil,   nil,   nil,   491,
   258,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   437,   nil,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   503,   nil,   152,   nil,   nil,
   nil,   nil,   nil,   333,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   505,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   272,   nil,   515,   nil,   517,
   521 ]

racc_goto_check = [
     2,    67,    10,    10,    10,    13,     6,     6,    43,    42,
    22,    44,    59,    59,    46,   103,    60,    14,    84,    41,
    86,    90,    90,    50,    96,    52,     8,    76,    70,    11,
    93,    57,     3,     9,     9,     6,    12,     5,    10,    10,
    10,    16,    59,    21,    55,    67,    67,    40,    67,    54,
    51,    67,    63,    63,    87,    87,    53,     6,     6,     6,
    56,    58,    61,     6,    64,    69,    69,    10,    69,    71,
    70,    72,    52,     6,     6,     6,     6,    73,    75,    78,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    10,    10,    10,    10,    10,    10,    10,    10,    10,
    10,    79,    69,    80,    10,    10,    46,    55,    10,    86,
    54,    44,    82,    15,     9,     9,     9,     9,     5,    89,
    92,    67,    68,     1,    97,    67,    76,    98,     8,    57,
   100,   101,    15,   102,    44,    44,   nil,     6,    69,   nil,
   nil,   nil,    84,   nil,   nil,   nil,   nil,    67,   nil,    15,
   nil,    52,    52,   nil,    68,    68,    15,    68,    44,   nil,
     2,   nil,    41,    60,    67,   nil,    67,    59,   nil,   nil,
    68,   nil,   nil,   nil,   nil,    43,    42,    44,   nil,    22,
   nil,   nil,    15,   nil,    84,     6,   nil,   nil,   nil,    50,
   nil,   nil,   nil,   nil,   nil,   nil,     2,    10,   nil,     2,
    11,   nil,    10,    10,    10,    59,   nil,   nil,    59,   nil,
   nil,   nil,   nil,    67,    67,    67,   nil,   nil,    67,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,    44,    44,   nil,
   nil,   nil,   nil,   103,   nil,   nil,    10,   nil,   nil,    44,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    43,    42,    15,   nil,   nil,   nil,   nil,     6,   nil,    10,
    90,    14,   nil,   nil,    90,    11,    96,    86,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    59,    59,
   nil,    59,   nil,     2,     2,    15,     6,   nil,    11,     6,
     6,   nil,    22,   nil,   nil,     6,    11,   nil,   nil,    15,
   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,    10,
    10,    10,    10,   nil,   nil,    59,    10,    60,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,
    15,    22,    15,    44,   nil,   nil,   nil,   nil,    10,    43,
    42,   nil,   nil,   nil,   nil,   nil,    67,   nil,   nil,   nil,
   nil,    59,   nil,   nil,   nil,   nil,   nil,   nil,    10,   nil,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,    10,     2,
   nil,   nil,    13,    59,   nil,   nil,   nil,   nil,    15,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,   nil,    15,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,   nil,    15,   nil,    10,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    10,   nil,     2,   nil,     2,
     2 ]

racc_goto_pointer = [
   nil,   123,     0,    32,   nil,    33,   -14,   nil,   -23,    23,
   -15,   -66,  -391,  -118,  -254,   -29,  -332,   nil,   nil,   nil,
   nil,   -71,  -105,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  -126,  -154,   -52,   -53,   -39,   nil,   -37,   nil,   nil,   nil,
  -126,  -237,  -125,  -406,  -350,  -357,  -245,  -274,  -439,  -107,
   -98,  -199,   nil,   -67,  -279,   nil,   nil,   -11,    -2,  -340,
    12,    10,  -203,  -300,   nil,  -234,  -286,   nil,  -235,  -291,
  -196,   nil,  -186,   nil,   -32,   nil,  -176,   -17,   nil,  -204,
   -50,   nil,   -75,  -165,   nil,   nil,   -53,   -68,   -65,   nil,
   -62,    52,    53,  -183 ]

racc_goto_default = [
   nil,   nil,   471,   nil,     4,     5,     6,     7,   nil,     8,
     9,   nil,   nil,   nil,   nil,   nil,   273,    13,    14,    15,
    16,   nil,   402,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    49,   nil,    51,    52,   149,
   nil,   nil,   nil,   153,   nil,   nil,   nil,   nil,   nil,   275,
   nil,   nil,   118,   nil,   220,   223,   221,    58,   nil,   nil,
   nil,   124,   nil,   nil,   161,   nil,   162,   163,   167,   292,
   293,   294,   295,   296,   299,    67,   nil,   nil,   187,   189,
   190,   181,    74,    75,    76,    77,   nil,   nil,   nil,   192,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 99, :_reduce_1,
  1, 99, :_reduce_2,
  0, 99, :_reduce_3,
  1, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 103, :_reduce_8,
  3, 103, :_reduce_9,
  1, 104, :_reduce_none,
  3, 104, :_reduce_11,
  3, 104, :_reduce_12,
  3, 104, :_reduce_13,
  1, 106, :_reduce_14,
  3, 106, :_reduce_15,
  1, 105, :_reduce_none,
  3, 105, :_reduce_17,
  3, 105, :_reduce_18,
  3, 105, :_reduce_19,
  3, 105, :_reduce_20,
  1, 107, :_reduce_none,
  2, 107, :_reduce_22,
  2, 107, :_reduce_23,
  7, 107, :_reduce_24,
  5, 107, :_reduce_25,
  5, 107, :_reduce_26,
  4, 114, :_reduce_27,
  1, 111, :_reduce_28,
  3, 111, :_reduce_29,
  1, 110, :_reduce_30,
  2, 110, :_reduce_31,
  4, 110, :_reduce_32,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  3, 108, :_reduce_37,
  3, 108, :_reduce_38,
  3, 108, :_reduce_39,
  3, 108, :_reduce_40,
  3, 108, :_reduce_41,
  3, 108, :_reduce_42,
  3, 108, :_reduce_43,
  3, 108, :_reduce_44,
  3, 108, :_reduce_45,
  3, 108, :_reduce_46,
  2, 108, :_reduce_47,
  2, 108, :_reduce_48,
  3, 108, :_reduce_49,
  3, 108, :_reduce_50,
  3, 108, :_reduce_51,
  3, 108, :_reduce_52,
  3, 108, :_reduce_53,
  3, 108, :_reduce_54,
  2, 108, :_reduce_55,
  3, 108, :_reduce_56,
  3, 108, :_reduce_57,
  3, 108, :_reduce_58,
  3, 108, :_reduce_59,
  3, 108, :_reduce_60,
  5, 118, :_reduce_61,
  1, 120, :_reduce_62,
  3, 120, :_reduce_63,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_86,
  1, 115, :_reduce_87,
  1, 115, :_reduce_88,
  1, 115, :_reduce_89,
  1, 115, :_reduce_90,
  4, 117, :_reduce_91,
  2, 117, :_reduce_92,
  5, 117, :_reduce_93,
  3, 117, :_reduce_94,
  2, 143, :_reduce_95,
  2, 143, :_reduce_96,
  1, 122, :_reduce_97,
  2, 122, :_reduce_98,
  4, 145, :_reduce_99,
  3, 145, :_reduce_100,
  1, 145, :_reduce_101,
  3, 146, :_reduce_102,
  3, 146, :_reduce_103,
  3, 144, :_reduce_104,
  3, 149, :_reduce_105,
  2, 149, :_reduce_106,
  2, 147, :_reduce_107,
  4, 147, :_reduce_108,
  2, 125, :_reduce_109,
  5, 151, :_reduce_110,
  4, 151, :_reduce_111,
  0, 152, :_reduce_none,
  2, 152, :_reduce_113,
  4, 152, :_reduce_114,
  3, 152, :_reduce_115,
  6, 126, :_reduce_116,
  5, 126, :_reduce_117,
  0, 153, :_reduce_none,
  4, 153, :_reduce_119,
  3, 153, :_reduce_120,
  5, 124, :_reduce_121,
  1, 154, :_reduce_122,
  2, 154, :_reduce_123,
  5, 155, :_reduce_124,
  1, 156, :_reduce_none,
  1, 156, :_reduce_none,
  1, 119, :_reduce_none,
  4, 119, :_reduce_128,
  1, 159, :_reduce_129,
  3, 159, :_reduce_130,
  3, 158, :_reduce_131,
  6, 123, :_reduce_132,
  2, 123, :_reduce_133,
  3, 160, :_reduce_134,
  3, 160, :_reduce_135,
  1, 161, :_reduce_none,
  1, 161, :_reduce_none,
  0, 109, :_reduce_138,
  1, 109, :_reduce_139,
  3, 109, :_reduce_140,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  3, 162, :_reduce_144,
  3, 162, :_reduce_145,
  3, 162, :_reduce_146,
  6, 127, :_reduce_147,
  6, 128, :_reduce_148,
  7, 116, :_reduce_149,
  7, 116, :_reduce_150,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  6, 130, :_reduce_153,
  7, 129, :_reduce_154,
  1, 169, :_reduce_155,
  1, 167, :_reduce_none,
  1, 167, :_reduce_none,
  1, 170, :_reduce_none,
  2, 170, :_reduce_159,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  4, 132, :_reduce_162,
  3, 132, :_reduce_163,
  7, 131, :_reduce_164,
  6, 131, :_reduce_165,
  1, 172, :_reduce_166,
  3, 172, :_reduce_167,
  1, 174, :_reduce_none,
  1, 174, :_reduce_none,
  1, 174, :_reduce_170,
  1, 174, :_reduce_none,
  1, 175, :_reduce_172,
  3, 175, :_reduce_173,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 173, :_reduce_none,
  2, 173, :_reduce_177,
  7, 134, :_reduce_178,
  2, 148, :_reduce_179,
  5, 148, :_reduce_180,
  1, 148, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_186,
  1, 165, :_reduce_187,
  1, 166, :_reduce_188,
  2, 166, :_reduce_189,
  2, 166, :_reduce_190,
  4, 166, :_reduce_191,
  4, 166, :_reduce_192,
  1, 150, :_reduce_193,
  3, 150, :_reduce_194,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  3, 180, :_reduce_199,
  1, 180, :_reduce_200,
  2, 181, :_reduce_201,
  2, 179, :_reduce_202,
  1, 182, :_reduce_203,
  4, 182, :_reduce_204,
  4, 135, :_reduce_205,
  6, 135, :_reduce_206,
  3, 135, :_reduce_207,
  3, 135, :_reduce_208,
  3, 135, :_reduce_209,
  2, 183, :_reduce_210,
  5, 136, :_reduce_211,
  7, 136, :_reduce_212,
  1, 121, :_reduce_213,
  1, 137, :_reduce_214,
  1, 137, :_reduce_215,
  1, 137, :_reduce_216,
  4, 138, :_reduce_217,
  2, 138, :_reduce_218,
  4, 138, :_reduce_219,
  2, 138, :_reduce_220,
  3, 139, :_reduce_221,
  4, 139, :_reduce_222,
  2, 139, :_reduce_223,
  1, 186, :_reduce_224,
  3, 186, :_reduce_225,
  3, 187, :_reduce_226,
  1, 188, :_reduce_none,
  1, 188, :_reduce_228,
  1, 185, :_reduce_229,
  3, 185, :_reduce_230,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 141, :_reduce_none,
  1, 190, :_reduce_240,
  1, 190, :_reduce_241,
  2, 191, :_reduce_242,
  1, 193, :_reduce_243,
  1, 195, :_reduce_244,
  1, 196, :_reduce_245,
  2, 194, :_reduce_246,
  1, 197, :_reduce_247,
  1, 198, :_reduce_248,
  2, 198, :_reduce_249,
  2, 192, :_reduce_250,
  2, 199, :_reduce_251,
  2, 199, :_reduce_252,
  3, 101, :_reduce_253,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 200, :_reduce_256,
  2, 200, :_reduce_257,
  4, 200, :_reduce_258,
  1, 133, :_reduce_259,
  3, 133, :_reduce_260,
  5, 133, :_reduce_261,
  1, 201, :_reduce_none,
  1, 201, :_reduce_none,
  1, 142, :_reduce_264,
  1, 140, :_reduce_265,
  0, 113, :_reduce_none,
  1, 113, :_reduce_267,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  0, 157, :_reduce_292 ]

racc_reduce_n = 293

racc_shift_n = 530

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :PLAN => 91,
  :PLAN_R => 92,
  :LOW => 93,
  :HIGH => 94,
  :LISTSTART => 95,
  :SPLAT => 96,
  :MODULO => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "PLAN",
  "PLAN_R",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "assignments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "plan_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hashpair",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 70)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 71)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 75)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 83)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 84)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 91)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 92)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 98)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 99)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_14(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 103)
  def _reduce_15(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_17(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 108)
  def _reduce_18(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 109)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 110)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 21 omitted

module_eval(<<'.,.,', 'egrammar.ra', 119)
  def _reduce_22(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 130)
  def _reduce_23(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 141)
  def _reduce_24(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 148)
  def _reduce_25(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 157)
  def _reduce_26(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 179)
  def _reduce_27(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 182)
  def _reduce_28(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_29(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 189)
  def _reduce_30(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 190)
  def _reduce_31(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 191)
  def _reduce_32(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

# reduce 36 omitted

module_eval(<<'.,.,', 'egrammar.ra', 200)
  def _reduce_37(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 201)
  def _reduce_38(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 202)
  def _reduce_39(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 203)
  def _reduce_40(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_41(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_42(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_43(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_44(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_45(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_46(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_47(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_48(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_49(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_50(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_51(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_52(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_53(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_54(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_55(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_56(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_57(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_58(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_59(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_60(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_61(val, _values, result)
     result = val[0].access(val[2])         ; loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 235)
  def _reduce_62(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 236)
  def _reduce_63(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 64 omitted

# reduce 65 omitted

# reduce 66 omitted

# reduce 67 omitted

# reduce 68 omitted

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

module_eval(<<'.,.,', 'egrammar.ra', 261)
  def _reduce_86(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 262)
  def _reduce_87(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 263)
  def _reduce_88(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 264)
  def _reduce_89(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 265)
  def _reduce_90(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_91(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_92(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 282)
  def _reduce_93(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_94(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 293)
  def _reduce_95(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 294)
  def _reduce_96(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 299)
  def _reduce_97(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_98(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 303)
  def _reduce_99(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 304)
  def _reduce_100(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 305)
  def _reduce_101(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 309)
  def _reduce_102(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_103(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 321)
  def _reduce_104(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_105(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 327)
  def _reduce_106(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 331)
  def _reduce_107(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 332)
  def _reduce_108(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_109(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 347)
  def _reduce_110(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 351)
  def _reduce_111(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 112 omitted

module_eval(<<'.,.,', 'egrammar.ra', 359)
  def _reduce_113(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 363)
  def _reduce_114(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 366)
  def _reduce_115(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 373)
  def _reduce_116(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 377)
  def _reduce_117(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 118 omitted

module_eval(<<'.,.,', 'egrammar.ra', 387)
  def _reduce_119(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_120(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 397)
  def _reduce_121(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 403)
  def _reduce_122(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 404)
  def _reduce_123(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 409)
  def _reduce_124(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

module_eval(<<'.,.,', 'egrammar.ra', 425)
  def _reduce_128(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 430)
  def _reduce_129(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 431)
  def _reduce_130(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 436)
  def _reduce_131(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 446)
  def _reduce_132(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 450)
  def _reduce_133(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 455)
  def _reduce_134(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 456)
  def _reduce_135(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'egrammar.ra', 465)
  def _reduce_138(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 466)
  def _reduce_139(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 467)
  def _reduce_140(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

module_eval(<<'.,.,', 'egrammar.ra', 483)
  def _reduce_144(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 487)
  def _reduce_145(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 491)
  def _reduce_146(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 500)
  def _reduce_147(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_148(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 519)
  def _reduce_149(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 526)
  def _reduce_150(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 151 omitted

# reduce 152 omitted

module_eval(<<'.,.,', 'egrammar.ra', 540)
  def _reduce_153(val, _values, result)
          # Remove this plan's name from the namestack as all nested plans have been parsed
      namepop
      definition = Factory.PLAN(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 553)
  def _reduce_154(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 564)
  def _reduce_155(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

module_eval(<<'.,.,', 'egrammar.ra', 573)
  def _reduce_159(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 590)
  def _reduce_162(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 595)
  def _reduce_163(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 606)
  def _reduce_164(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 611)
  def _reduce_165(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 622)
  def _reduce_166(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 623)
  def _reduce_167(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 168 omitted

# reduce 169 omitted

module_eval(<<'.,.,', 'egrammar.ra', 630)
  def _reduce_170(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 171 omitted

module_eval(<<'.,.,', 'egrammar.ra', 634)
  def _reduce_172(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 635)
  def _reduce_173(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 174 omitted

# reduce 175 omitted

# reduce 176 omitted

module_eval(<<'.,.,', 'egrammar.ra', 644)
  def _reduce_177(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 650)
  def _reduce_178(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 656)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 657)
  def _reduce_180(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 181 omitted

# reduce 182 omitted

# reduce 183 omitted

# reduce 184 omitted

# reduce 185 omitted

module_eval(<<'.,.,', 'egrammar.ra', 668)
  def _reduce_186(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_187(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 673)
  def _reduce_188(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_189(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_190(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_191(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_192(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 681)
  def _reduce_193(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_194(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 195 omitted

# reduce 196 omitted

# reduce 197 omitted

# reduce 198 omitted

module_eval(<<'.,.,', 'egrammar.ra', 694)
  def _reduce_199(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_200(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 698)
  def _reduce_201(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 701)
  def _reduce_202(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 704)
  def _reduce_203(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_204(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 710)
  def _reduce_205(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 715)
  def _reduce_206(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 720)
  def _reduce_207(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 725)
  def _reduce_208(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 730)
  def _reduce_209(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 736)
  def _reduce_210(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 742)
  def _reduce_211(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 747)
  def _reduce_212(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 756)
  def _reduce_213(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 767)
  def _reduce_214(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 768)
  def _reduce_215(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_216(val, _values, result)
     result = Factory.RESERVED(val[0][:value], true) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 776)
  def _reduce_217(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_218(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_219(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 779)
  def _reduce_220(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_221(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_222(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 784)
  def _reduce_223(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_224(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 788)
  def _reduce_225(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 791)
  def _reduce_226(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 227 omitted

module_eval(<<'.,.,', 'egrammar.ra', 795)
  def _reduce_228(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 798)
  def _reduce_229(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_230(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 231 omitted

# reduce 232 omitted

# reduce 233 omitted

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

module_eval(<<'.,.,', 'egrammar.ra', 816)
  def _reduce_240(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 817)
  def _reduce_241(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 819)
  def _reduce_242(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 820)
  def _reduce_243(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 821)
  def _reduce_244(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 822)
  def _reduce_245(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 823)
  def _reduce_246(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 824)
  def _reduce_247(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 827)
  def _reduce_248(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 828)
  def _reduce_249(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 831)
  def _reduce_250(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 834)
  def _reduce_251(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 835)
  def _reduce_252(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 838)
  def _reduce_253(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 254 omitted

# reduce 255 omitted

module_eval(<<'.,.,', 'egrammar.ra', 845)
  def _reduce_256(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 846)
  def _reduce_257(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 847)
  def _reduce_258(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 850)
  def _reduce_259(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 851)
  def _reduce_260(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 852)
  def _reduce_261(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 262 omitted

# reduce 263 omitted

module_eval(<<'.,.,', 'egrammar.ra', 858)
  def _reduce_264(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 861)
  def _reduce_265(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 266 omitted

module_eval(<<'.,.,', 'egrammar.ra', 867)
  def _reduce_267(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

module_eval(<<'.,.,', 'egrammar.ra', 898)
  def _reduce_292(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
