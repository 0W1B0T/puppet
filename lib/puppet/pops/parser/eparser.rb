#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'puppet'
require 'puppet/pops'

module Puppet
  class ParseError < Puppet::Error; end
  class ImportError < Racc::ParseError; end
  class AlreadyImportedError < ImportError; end
end

module Puppet
  module Pops
    module Parser
      class Parser < Racc::Parser

module_eval(<<'...end egrammar.ra/module_eval...', 'egrammar.ra', 918)

# Make emacs happy
# Local Variables:
# mode: ruby
# End:
...end egrammar.ra/module_eval...
##### State transition tables begin ###

clist = [
'63,75,298,-146,61,69,395,70,85,86,87,69,112,70,-276,301,322,286,173',
'323,298,396,-285,299,21,20,114,344,117,-290,111,52,113,55,81,65,12,291',
'59,44,47,299,54,45,10,11,-146,287,62,19,264,174,46,116,301,17,18,-276',
'88,90,89,91,127,80,127,-285,124,84,124,53,345,120,-290,43,76,93,78,79',
'77,-185,-185,60,49,66,67,56,376,92,58,63,75,68,265,61,69,298,70,68,126',
'156,126,112,123,-288,123,298,449,416,301,70,125,448,125,21,20,114,299',
'117,301,111,52,113,55,157,65,12,299,59,44,47,82,54,45,10,11,112,165',
'62,19,465,334,46,116,178,17,18,-288,194,466,114,196,117,80,111,461,113',
'460,127,53,378,199,124,43,76,93,78,79,-275,298,84,60,49,66,67,56,266',
'116,58,63,75,68,301,61,69,150,70,461,298,460,299,92,94,95,126,92,127',
'150,123,93,124,301,279,21,20,280,125,150,153,299,52,-275,55,-230,65',
'12,281,59,44,47,153,54,45,10,11,112,156,62,19,165,153,46,126,506,17',
'18,123,284,448,114,285,117,80,111,125,113,289,127,53,313,127,124,43',
'76,124,78,79,129,130,314,60,49,66,67,56,320,116,58,63,75,68,512,61,69',
'-231,70,448,-185,-185,129,130,94,95,126,320,127,126,123,93,124,123,84',
'21,20,92,125,175,75,125,52,176,55,92,65,12,92,59,44,47,92,54,45,10,11',
'112,342,62,19,-186,-186,46,126,165,17,18,123,-187,-187,114,350,117,80',
'111,125,113,368,127,53,369,127,124,43,76,124,78,79,-189,-189,371,60',
'49,66,67,56,375,116,58,63,75,68,380,61,69,382,70,99,98,277,276,386,94',
'95,126,388,127,126,123,93,124,123,301,21,20,391,125,277,276,125,52,392',
'55,298,65,132,405,59,44,47,406,54,45,407,100,112,408,62,19,277,276,46',
'126,411,17,18,123,277,276,114,289,117,80,111,125,113,417,127,53,419',
'127,124,43,76,124,78,79,325,324,391,60,49,66,67,56,-230,116,58,63,75',
'68,424,61,69,426,70,99,98,336,337,433,94,95,126,434,127,126,123,93,124',
'123,342,21,20,343,125,437,440,125,52,391,55,391,65,132,156,59,44,47',
'450,54,45,451,100,454,455,62,19,458,462,46,126,464,17,18,123,474,476',
'175,75,127,80,176,125,124,478,342,53,482,484,342,43,76,487,78,79,488',
'342,491,60,49,66,67,56,495,464,58,63,75,68,497,61,69,499,70,500,126',
'501,173,112,123,170,342,443,507,508,509,510,125,511,520,21,20,114,521',
'117,522,111,52,113,55,80,65,132,524,59,44,47,525,54,45,174,76,112,526',
'62,19,371,,46,116,,17,18,,,,114,,117,80,111,,113,,,53,,,,43,76,,78,79',
',,,60,49,66,67,56,,116,58,63,75,68,,61,69,,70,,,,,112,94,95,,,,,,93',
',,,21,20,114,,117,,111,52,113,55,,65,12,,59,44,47,,54,45,10,11,112,',
'62,19,,,46,116,,17,18,,,,114,,117,80,111,,113,,,53,,,,43,76,,78,79,',
',,60,49,66,67,56,,116,58,63,75,68,,61,69,,70,,,,,112,,,,,,,,,,,,21,20',
'114,,117,,111,52,113,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,116',
',17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,141,,,,,52,,55,,65,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,175,75,,80,176,,,,,53,,,,43,76',
',78,79,,,,145,142,66,67,143,149,148,144,63,75,68,,61,69,,70,,,,173,',
',170,,,,,,,,,,21,20,,,,,,52,,55,80,65,132,,59,44,47,,54,45,174,76,,',
'62,19,,,46,,,17,18,,,,175,75,,80,176,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,70,,,,173,,,170,,,,,,,,,,21,20,,,,,,52',
',55,80,65,132,,59,44,47,,54,45,174,76,,,62,19,,,46,,,17,18,,,,175,75',
',80,176,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69',
',70,,,,173,,,170,,,,,,,,,,21,20,,,,,,52,,55,80,65,132,,59,44,47,,54',
'45,174,76,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60',
'49,66,67,56,,,58,63,75,68,,61,69,180,70,,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,',
',53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75,68,,61,69',
'185,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142',
'66,67,143,149,148,144,63,75,68,,61,69,,70,187,,,,,,,,,,,,,,,,21,20,',
',,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,',
'80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,198,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,',
'43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53',
',,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60',
'49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,',
'53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,',
'46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63',
'75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,',
',,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,',
',52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80',
',,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,',
',,,,,,,,,,,,,,,21,20,,,,,,216,231,222,232,65,224,234,226,44,214,,218',
'212,,,,,62,19,235,230,213,,,17,211,,,,,,,80,,,,,233,217,,,,43,76,,78',
'79,,,,227,215,228,229,223,237,236,225,63,75,68,,61,69,,70,,,,,,,,,,',
',,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65',
'132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,',
'70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,',
',58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79',
',,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,',
',,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63',
'75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60',
'49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53',
',,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65',
'132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,',
'70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,',
',58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59',
'44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79',
',,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,',
',,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,',
',,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,',
',,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,',
'46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63',
'75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47',
',54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,259,43,76,,78,79,,',
',60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,',
'52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,',
',,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75,68,,61',
'69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,',
',,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67',
'56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132',
',59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78',
'79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80',
',,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,',
',,,,,,,,,,,,,,,21,20,303,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,',
'62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67',
'143,149,148,144,63,75,68,,61,69,,70,311,,,,,,,,,,,,,,,,21,20,,,,,,52',
',55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,',
',53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,',
',,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,',
',46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58',
'63,75,68,,61,69,,70,187,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78',
'79,,,,145,142,66,67,143,149,148,144,63,75,68,,61,69,,70,,,343,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65',
'132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,',
'70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62',
'19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,',
',58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78',
'79,,,,145,142,66,67,143,149,148,144,63,75,68,,61,69,,70,,,,,,,,,,,,',
',,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144',
'63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44',
'47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79',
',,,145,142,66,67,143,149,148,144,63,75,68,,61,69,,70,,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18',
',,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61',
'69,,70,398,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45',
'10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,70,400,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,',
'53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145',
'142,66,67,143,149,148,144,63,75,68,,61,69,,70,420,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60',
'49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53',
',,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17',
'18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65',
'132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,70,453,,,,,,,,,,,,,,,,21,20,,,,,,52,',
'55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,',
'53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46',
',,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54',
'45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145',
'142,66,67,143,149,148,144,63,75,68,,61,69,,70,467,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,',
',80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,',
'70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,',
',62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67',
'56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12',
',59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21',
'20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,',
',,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75',
'68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54',
'45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49',
'66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53',
',,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,',
',,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46',
',,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148',
'144,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59',
'44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78',
'79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20',
',,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,',
',80,,,,,,53,,,,43,76,,78,79,,,,145,142,66,67,143,149,148,144,63,75,68',
',61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,132,,59,44,47,,54,45',
',,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65',
'132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76',
',78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,504,,,,,,,,,,,,,,',
',21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18',
',,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61',
'69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10',
'11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66',
'67,56,,,58,63,75,68,,61,69,,70,514,,,,,,,,,,,,,,,,21,20,,,,,,52,,55',
',65,12,,59,44,47,,54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53',
',,,43,76,,78,79,,,,60,49,66,67,56,,,58,63,75,68,,61,69,,70,516,,,,,',
',,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47,,54,45,10,11,,,62,19,,',
'46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,,,,60,49,66,67,56,,,58,63',
'75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,,,52,,55,,65,12,,59,44,47',
',54,45,10,11,,,62,19,,,46,,,17,18,,,,,,,80,,,,,,53,,,,43,76,,78,79,',
',,60,49,66,67,56,,,58,63,75,68,,61,69,,70,,,,,,,,,,,,,,,,,21,20,,,,',
',52,,55,,65,132,,59,44,47,,54,45,,,,,62,19,,,46,,,17,18,,,,,,,80,,,',
',,53,,,,43,76,,78,79,,,112,60,49,66,67,56,,,58,,,68,108,103,114,,117',
',111,,113,,104,106,105,107,,,,,,,,,,,,,,,,116,,,,110,109,,,96,97,99',
'98,101,102,,94,95,112,,304,,,93,,,,,,,108,103,114,,117,,111,,113,,104',
'106,105,107,,,,,100,,,,,,,,,,,116,,,,110,109,,,96,97,99,98,101,102,',
'94,95,112,,305,,,93,,,,,,,108,103,114,,117,,111,,113,,104,106,105,107',
',,,,100,,,,,,,,,,,116,,,,110,109,,,96,97,99,98,101,102,,94,95,112,,306',
',,93,,,,,,,108,103,114,,117,,111,,113,,104,106,105,107,,,,,100,,,,,',
',,,,,116,,,,110,109,,112,96,97,99,98,101,102,,94,95,,,108,103,114,93',
'117,,111,,113,,104,106,105,107,,,,,,,,,,,,,,,100,116,,,,110,109,,,96',
'97,99,98,101,102,,94,95,,,,,,93,,,,112,,,,,,,336,337,,,,108,103,114',
'340,117,112,111,,113,100,104,106,105,107,,,,,,114,,117,,111,,113,,,',
'116,,,,110,109,,,96,97,99,98,101,102,,94,95,116,,,112,,93,,,96,97,99',
'98,,,,94,95,114,,117,112,111,93,113,,,,,,,100,,,,114,,117,,111,,113',
',,,116,,,100,,,,,96,97,99,98,,,,94,95,116,,,112,,93,,,96,97,99,98,101',
'102,,94,95,114,,117,112,111,93,113,,,,,,,100,,,103,114,,117,,111,,113',
',104,,116,,,100,,,,,96,97,99,98,101,102,,94,95,116,,,,,93,,112,96,97',
'99,98,101,102,,94,95,,,,103,114,93,117,112,111,,113,,104,100,,,,,,,103',
'114,,117,,111,,113,,104,100,116,,,,,,,,96,97,99,98,101,102,,94,95,116',
',,,,93,,112,96,97,99,98,101,102,,94,95,,,,103,114,93,117,,111,,113,',
'104,100,,,,,,,,,,,,,,,,,100,116,,,,,112,,,96,97,99,98,101,102,,94,95',
'108,103,114,,117,93,111,,113,,104,106,105,107,,,,,,,,,,,,,,,,116,100',
',,,112,,,96,97,99,98,101,102,,94,95,108,103,114,,117,93,111,,113,,104',
'106,105,107,,,,,,,,,,,,,,,,116,100,,,,109,,,96,97,99,98,101,102,112',
'94,95,,,346,,,93,,,,108,103,114,,117,,111,,113,,104,106,105,107,,,,',
',,,100,,,,,,,,116,,,,110,109,,,96,97,99,98,101,102,,94,95,112,-66,,',
',93,-66,,,,,,108,103,114,,117,,111,,113,,104,106,105,107,,,,,100,,,',
',,,,,,,116,,,,110,109,,112,96,97,99,98,101,102,,94,95,,,108,103,114',
'93,117,,111,,113,,104,106,105,107,,,,,,,,,,,,,,,100,116,,,,110,109,',
',96,97,99,98,101,102,112,94,95,,,,,,93,,,,108,103,114,372,117,,111,',
'113,,104,106,105,107,,,,,,,,100,,,,,,,,116,,,,110,109,,112,96,97,99',
'98,101,102,,94,95,,,108,103,114,93,117,,111,,113,,104,106,105,107,,',
',,,,,,,,,,,,100,116,,,,110,109,,112,96,97,99,98,101,102,,94,95,,,108',
'103,114,93,117,,111,,113,,104,106,105,107,,,,,,,,,,,,,,,100,116,,,,110',
'109,,112,96,97,99,98,101,102,,94,95,,,108,103,114,93,117,,111,,113,',
'104,106,105,107,,,,,,,,,,,,,,,100,116,,,,110,109,,112,96,97,99,98,101',
'102,,94,95,,,108,103,114,93,117,,111,,113,,104,106,105,107,,,,,,,,,',
',,,,,100,116,,,,110,109,,112,96,97,99,98,101,102,,94,95,,,108,103,114',
'93,117,,111,,113,,104,106,105,107,,,,,,,,,,,,,,,100,116,,,,110,109,',
'112,96,97,99,98,101,102,,94,95,,,108,103,114,93,117,,111,,113,,104,106',
'105,107,,,,,,,,,,,,,,,100,116,,,,110,109,,112,96,97,99,98,101,102,,94',
'95,,,108,103,114,93,117,,111,,113,,104,106,105,107,,,,,,,,,,,,,,,100',
'116,,,,110,109,,,96,97,99,98,101,102,,94,95,,358,231,357,232,93,355',
'234,359,,352,,354,356,,,,,,,235,230,360,,,,353,,,,100,,,,,,,,233,361',
',,,,,,,,,,,364,362,365,363,366,237,236,367,358,231,357,232,,355,234',
'359,,352,,354,356,,,,,,,235,230,360,,,,353,,,,,,,,,,,,233,361,,,,,,',
',,,,,364,362,365,363,366,237,236,367,358,231,357,232,,355,234,359,,352',
',354,356,,,,,,,235,230,360,,,,353,,,,,,,,,,,,233,361,,,,,,,,,,,,364',
'362,365,363,366,237,236,367,358,231,357,232,,355,234,359,,352,,354,356',
',,,,,,235,230,360,,,,353,,,,,,,,,,,,233,361,,,,,,,,,,,,364,362,365,363',
'366,237,236,367,358,231,357,232,,355,234,359,,352,,354,356,,,,,,,235',
'230,360,,,,353,,,,,,,,,,,,233,361,,,,,,,,,,,,364,362,365,363,366,237',
'236,367,358,231,357,232,,355,234,359,,352,,354,356,,,,,,,235,230,360',
',,,353,,,,,,,,,,,,233,361,,,,,,,,,,,,364,362,365,363,366,237,236,367' ]
        racc_action_table = arr = ::Array.new(10127, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'0,0,156,214,0,0,302,0,7,7,7,178,239,178,212,156,186,153,314,186,300',
'302,213,156,0,0,239,221,239,228,239,0,239,0,1,0,0,156,0,0,0,300,0,0',
'0,0,214,153,0,0,114,314,0,239,178,0,0,212,7,7,7,7,55,0,12,213,55,5,12',
'0,221,12,228,0,0,239,0,0,0,214,214,0,0,0,0,0,276,8,0,4,4,0,114,4,4,276',
'4,178,55,50,12,240,55,229,12,196,384,316,276,316,55,384,12,4,4,240,276',
'240,196,240,4,240,4,51,4,4,196,4,4,4,4,4,4,4,4,243,58,4,4,402,196,4',
'240,64,4,4,229,76,402,243,77,243,4,243,398,243,398,224,4,277,81,224',
'4,4,240,4,4,224,277,83,4,4,4,4,4,115,243,4,10,10,4,277,10,10,49,10,458',
'391,458,277,118,243,243,224,119,56,142,224,243,56,391,135,10,10,136',
'224,215,49,391,10,224,10,137,10,10,140,10,10,10,142,10,10,10,10,244',
'141,10,10,144,215,10,56,477,10,10,56,146,477,244,151,244,10,244,56,244',
'155,60,10,166,128,60,10,10,128,10,10,16,16,168,10,10,10,10,10,179,244',
'10,11,11,10,492,11,11,182,11,492,47,47,57,57,244,244,60,184,132,128',
'60,244,132,128,200,11,11,205,60,194,194,128,11,194,11,206,11,11,207',
'11,11,11,208,11,11,11,11,241,210,11,11,61,61,11,132,225,11,11,132,62',
'62,241,261,241,11,241,132,241,268,143,11,270,145,143,11,11,145,11,11',
'63,63,271,11,11,11,11,11,274,241,11,17,17,11,278,17,17,282,17,241,241',
'121,121,287,241,241,143,288,164,145,143,241,164,145,289,17,17,292,143',
'162,162,145,17,298,17,299,17,17,307,17,17,17,308,17,17,309,241,242,310',
'17,17,163,163,17,164,312,17,17,164,177,177,242,315,242,17,242,164,242',
'319,222,17,321,223,222,17,17,223,17,17,191,191,333,17,17,17,17,17,338',
'242,17,18,18,17,339,18,18,341,18,242,242,424,424,347,242,242,222,349',
'227,223,222,242,227,223,351,18,18,353,222,370,373,223,18,377,18,379',
'18,18,382,18,18,18,385,18,18,386,242,389,390,18,18,397,399,18,227,400',
'18,18,227,409,414,59,59,375,18,59,227,375,423,425,18,432,436,439,18',
'18,444,18,18,445,446,452,18,18,18,18,18,461,462,18,19,19,18,464,19,19',
'466,19,469,375,472,59,131,375,59,473,375,480,481,486,489,375,490,502',
'19,19,131,503,131,505,131,19,131,19,59,19,19,513,19,19,19,515,19,19',
'59,59,245,517,19,19,523,,19,131,,19,19,,,,245,,245,19,245,,245,,,19',
',,,19,19,,19,19,,,,19,19,19,19,19,,245,19,20,20,19,,20,20,,20,,,,,133',
'245,245,,,,,,245,,,,20,20,133,,133,,133,20,133,20,,20,20,,20,20,20,',
'20,20,20,20,134,,20,20,,,20,133,,20,20,,,,134,,134,20,134,,134,,,20',
',,,20,20,,20,20,,,,20,20,20,20,20,,134,20,21,21,20,,21,21,,21,,,,,238',
',,,,,,,,,,,21,21,238,,238,,238,21,238,21,,21,21,,21,21,21,,21,21,21',
'21,,,21,21,,,21,238,,21,21,,,,,,,21,,,,,,21,,,,21,21,,21,21,,,,21,21',
'21,21,21,,,21,48,48,21,,48,48,,48,,,,,,,,,,,,,,,,,48,48,48,,,,,48,,48',
',48,48,,48,48,48,,48,48,48,48,,,48,48,,,48,,,48,48,,,,226,226,,48,226',
',,,,48,,,,48,48,,48,48,,,,48,48,48,48,48,48,48,48,52,52,48,,52,52,,52',
',,,226,,,226,,,,,,,,,,52,52,,,,,,52,,52,226,52,52,,52,52,52,,52,52,226',
'226,,,52,52,,,52,,,52,52,,,,313,313,,52,313,,,,,52,,,,52,52,,52,52,',
',,52,52,52,52,52,,,52,53,53,52,,53,53,,53,,,,313,,,313,,,,,,,,,,53,53',
',,,,,53,,53,313,53,53,,53,53,53,,53,53,313,313,,,53,53,,,53,,,53,53',
',,,411,411,,53,411,,,,,53,,,,53,53,,53,53,,,,53,53,53,53,53,,,53,54',
'54,53,,54,54,,54,,,,411,,,411,,,,,,,,,,54,54,,,,,,54,,54,411,54,54,',
'54,54,54,,54,54,411,411,,,54,54,,,54,,,54,54,,,,,,,54,,,,,,54,,,,54',
'54,,54,54,,,,54,54,54,54,54,,,54,68,68,54,,68,68,68,68,,,,,,,,,,,,,',
',,,68,68,,,,,,68,,68,,68,68,,68,68,68,,68,68,68,68,,,68,68,,,68,,,68',
'68,,,,,,,68,,,,,,68,,,,68,68,,68,68,,,,68,68,68,68,68,68,68,68,69,69',
'68,,69,69,69,69,,,,,,,,,,,,,,,,,69,69,,,,,,69,,69,,69,69,,69,69,69,',
'69,69,69,69,,,69,69,,,69,,,69,69,,,,,,,69,,,,,,69,,,,69,69,,69,69,,',
',69,69,69,69,69,69,69,69,70,70,69,,70,70,,70,70,,,,,,,,,,,,,,,,70,70',
',,,,,70,,70,,70,70,,70,70,70,,70,70,70,70,,,70,70,,,70,,,70,70,,,,,',
',70,,,,,,70,,,,70,70,,70,70,,,,70,70,70,70,70,70,70,70,74,74,70,,74',
'74,,74,,,,,,,,,,,,,,,,,74,74,,,,,,74,,74,,74,74,,74,74,74,,74,74,74',
'74,,,74,74,,,74,,,74,74,,,,,,,74,,,,,,74,,,,74,74,,74,74,,,,74,74,74',
'74,74,,,74,79,79,74,,79,79,,79,,,,,,,,,,,,,,,,,79,79,,,,,,79,,79,,79',
'79,,79,79,79,,79,79,,,,,79,79,,,79,,,79,79,,,,,,,79,,,,,,79,,,,79,79',
',79,79,,,,79,79,79,79,79,,,79,82,82,79,,82,82,,82,,,,,,,,,,,,,,,,,82',
'82,,,,,,82,,82,,82,82,,82,82,82,,82,82,82,82,,,82,82,,,82,,,82,82,,',
',,,,82,,,,,,82,,,,82,82,,82,82,,,,82,82,82,82,82,,,82,84,84,82,,84,84',
',84,,,,,,,,,,,,,,,,,84,84,,,,,,84,,84,,84,84,,84,84,84,,84,84,84,84',
',,84,84,,,84,,,84,84,,,,,,,84,,,,,,84,,,,84,84,,84,84,,,,84,84,84,84',
'84,,,84,85,85,84,,85,85,,85,,,,,,,,,,,,,,,,,85,85,,,,,,85,,85,,85,85',
',85,85,85,,85,85,85,85,,,85,85,,,85,,,85,85,,,,,,,85,,,,,,85,,,,85,85',
',85,85,,,,85,85,85,85,85,,,85,86,86,85,,86,86,,86,,,,,,,,,,,,,,,,,86',
'86,,,,,,86,,86,,86,86,,86,86,86,,86,86,86,86,,,86,86,,,86,,,86,86,,',
',,,,86,,,,,,86,,,,86,86,,86,86,,,,86,86,86,86,86,,,86,87,87,86,,87,87',
',87,,,,,,,,,,,,,,,,,87,87,,,,,,87,,87,,87,87,,87,87,87,,87,87,87,87',
',,87,87,,,87,,,87,87,,,,,,,87,,,,,,87,,,,87,87,,87,87,,,,87,87,87,87',
'87,,,87,88,88,87,,88,88,,88,,,,,,,,,,,,,,,,,88,88,,,,,,88,,88,,88,88',
',88,88,88,,88,88,88,88,,,88,88,,,88,,,88,88,,,,,,,88,,,,,,88,,,,88,88',
',88,88,,,,88,88,88,88,88,,,88,89,89,88,,89,89,,89,,,,,,,,,,,,,,,,,89',
'89,,,,,,89,,89,,89,89,,89,89,89,,89,89,89,89,,,89,89,,,89,,,89,89,,',
',,,,89,,,,,,89,,,,89,89,,89,89,,,,89,89,89,89,89,,,89,90,90,89,,90,90',
',90,,,,,,,,,,,,,,,,,90,90,,,,,,90,,90,,90,90,,90,90,90,,90,90,90,90',
',,90,90,,,90,,,90,90,,,,,,,90,,,,,,90,,,,90,90,,90,90,,,,90,90,90,90',
'90,,,90,91,91,90,,91,91,,91,,,,,,,,,,,,,,,,,91,91,,,,,,91,,91,,91,91',
',91,91,91,,91,91,91,91,,,91,91,,,91,,,91,91,,,,,,,91,,,,,,91,,,,91,91',
',91,91,,,,91,91,91,91,91,,,91,92,92,91,,92,92,,92,,,,,,,,,,,,,,,,,92',
'92,,,,,,92,92,92,92,92,92,92,92,92,92,,92,92,,,,,92,92,92,92,92,,,92',
'92,,,,,,,92,,,,,92,92,,,,92,92,,92,92,,,,92,92,92,92,92,92,92,92,93',
'93,92,,93,93,,93,,,,,,,,,,,,,,,,,93,93,,,,,,93,,93,,93,93,,93,93,93',
',93,93,,,,,93,93,,,93,,,93,93,,,,,,,93,,,,,,93,,,,93,93,,93,93,,,,93',
'93,93,93,93,,,93,94,94,93,,94,94,,94,,,,,,,,,,,,,,,,,94,94,,,,,,94,',
'94,,94,94,,94,94,94,,94,94,,,,,94,94,,,94,,,94,94,,,,,,,94,,,,,,94,',
',,94,94,,94,94,,,,94,94,94,94,94,,,94,95,95,94,,95,95,,95,,,,,,,,,,',
',,,,,,95,95,,,,,,95,,95,,95,95,,95,95,95,,95,95,,,,,95,95,,,95,,,95',
'95,,,,,,,95,,,,,,95,,,,95,95,,95,95,,,,95,95,95,95,95,,,95,96,96,95',
',96,96,,96,,,,,,,,,,,,,,,,,96,96,,,,,,96,,96,,96,96,,96,96,96,,96,96',
',,,,96,96,,,96,,,96,96,,,,,,,96,,,,,,96,,,,96,96,,96,96,,,,96,96,96',
'96,96,,,96,97,97,96,,97,97,,97,,,,,,,,,,,,,,,,,97,97,,,,,,97,,97,,97',
'97,,97,97,97,,97,97,,,,,97,97,,,97,,,97,97,,,,,,,97,,,,,,97,,,,97,97',
',97,97,,,,97,97,97,97,97,,,97,98,98,97,,98,98,,98,,,,,,,,,,,,,,,,,98',
'98,,,,,,98,,98,,98,98,,98,98,98,,98,98,,,,,98,98,,,98,,,98,98,,,,,,',
'98,,,,,,98,,,,98,98,,98,98,,,,98,98,98,98,98,,,98,99,99,98,,99,99,,99',
',,,,,,,,,,,,,,,,99,99,,,,,,99,,99,,99,99,,99,99,99,,99,99,,,,,99,99',
',,99,,,99,99,,,,,,,99,,,,,,99,,,,99,99,,99,99,,,,99,99,99,99,99,,,99',
'100,100,99,,100,100,,100,,,,,,,,,,,,,,,,,100,100,,,,,,100,,100,,100',
'100,,100,100,100,,100,100,,,,,100,100,,,100,,,100,100,,,,,,,100,,,,',
',100,,,,100,100,,100,100,,,,100,100,100,100,100,,,100,101,101,100,,101',
'101,,101,,,,,,,,,,,,,,,,,101,101,,,,,,101,,101,,101,101,,101,101,101',
',101,101,,,,,101,101,,,101,,,101,101,,,,,,,101,,,,,,101,,,,101,101,',
'101,101,,,,101,101,101,101,101,,,101,102,102,101,,102,102,,102,,,,,',
',,,,,,,,,,,102,102,,,,,,102,,102,,102,102,,102,102,102,,102,102,,,,',
'102,102,,,102,,,102,102,,,,,,,102,,,,,,102,,,,102,102,,102,102,,,,102',
'102,102,102,102,,,102,103,103,102,,103,103,,103,,,,,,,,,,,,,,,,,103',
'103,,,,,,103,,103,,103,103,,103,103,103,,103,103,,,,,103,103,,,103,',
',103,103,,,,,,,103,,,,,,103,,,,103,103,,103,103,,,,103,103,103,103,103',
',,103,104,104,103,,104,104,,104,,,,,,,,,,,,,,,,,104,104,,,,,,104,,104',
',104,104,,104,104,104,,104,104,,,,,104,104,,,104,,,104,104,,,,,,,104',
',,,,,104,,,,104,104,,104,104,,,,104,104,104,104,104,,,104,105,105,104',
',105,105,,105,,,,,,,,,,,,,,,,,105,105,,,,,,105,,105,,105,105,,105,105',
'105,,105,105,,,,,105,105,,,105,,,105,105,,,,,,,105,,,,,,105,,,,105,105',
',105,105,,,,105,105,105,105,105,,,105,106,106,105,,106,106,,106,,,,',
',,,,,,,,,,,,106,106,,,,,,106,,106,,106,106,,106,106,106,,106,106,,,',
',106,106,,,106,,,106,106,,,,,,,106,,,,,,106,,,,106,106,,106,106,,,,106',
'106,106,106,106,,,106,107,107,106,,107,107,,107,,,,,,,,,,,,,,,,,107',
'107,,,,,,107,,107,,107,107,,107,107,107,,107,107,,,,,107,107,,,107,',
',107,107,,,,,,,107,,,,,,107,,,,107,107,,107,107,,,,107,107,107,107,107',
',,107,108,108,107,,108,108,,108,,,,,,,,,,,,,,,,,108,108,,,,,,108,,108',
',108,108,,108,108,108,,108,108,,,,,108,108,,,108,,,108,108,,,,,,,108',
',,,,,108,,,,108,108,,108,108,,,,108,108,108,108,108,,,108,109,109,108',
',109,109,,109,,,,,,,,,,,,,,,,,109,109,,,,,,109,,109,,109,109,,109,109',
'109,,109,109,,,,,109,109,,,109,,,109,109,,,,,,,109,,,,,,109,,,,109,109',
',109,109,,,,109,109,109,109,109,,,109,110,110,109,,110,110,,110,,,,',
',,,,,,,,,,,,110,110,,,,,,110,,110,,110,110,,110,110,110,,110,110,,,',
',110,110,,,110,,,110,110,,,,,,,110,,,,,,110,,,,110,110,,110,110,,,,110',
'110,110,110,110,,,110,111,111,110,,111,111,,111,,,,,,,,,,,,,,,,,111',
'111,,,,,,111,,111,,111,111,,111,111,111,,111,111,,,,,111,111,,,111,',
',111,111,,,,,,,111,,,,,,111,,,111,111,111,,111,111,,,,111,111,111,111',
'111,,,111,112,112,111,,112,112,,112,,,,,,,,,,,,,,,,,112,112,,,,,,112',
',112,,112,112,,112,112,112,,112,112,112,112,,,112,112,,,112,,,112,112',
',,,,,,112,,,,,,112,,,,112,112,,112,112,,,,112,112,112,112,112,112,112',
'112,116,116,112,,116,116,,116,,,,,,,,,,,,,,,,,116,116,,,,,,116,,116',
',116,116,,116,116,116,,116,116,,,,,116,116,,,116,,,116,116,,,,,,,116',
',,,,,116,,,,116,116,,116,116,,,,116,116,116,116,116,,,116,117,117,116',
',117,117,,117,,,,,,,,,,,,,,,,,117,117,,,,,,117,,117,,117,117,,117,117',
'117,,117,117,,,,,117,117,,,117,,,117,117,,,,,,,117,,,,,,117,,,,117,117',
',117,117,,,,117,117,117,117,117,,,117,120,120,117,,120,120,,120,,,,',
',,,,,,,,,,,,120,120,,,,,,120,,120,,120,120,,120,120,120,,120,120,,,',
',120,120,,,120,,,120,120,,,,,,,120,,,,,,120,,,,120,120,,120,120,,,,120',
'120,120,120,120,,,120,157,157,120,,157,157,,157,,,,,,,,,,,,,,,,,157',
'157,157,,,,,157,,157,,157,157,,157,157,157,,157,157,157,157,,,157,157',
',,157,,,157,157,,,,,,,157,,,,,,157,,,,157,157,,157,157,,,,157,157,157',
'157,157,157,157,157,165,165,157,,165,165,,165,165,,,,,,,,,,,,,,,,165',
'165,,,,,,165,,165,,165,165,,165,165,165,,165,165,165,165,,,165,165,',
',165,,,165,165,,,,,,,165,,,,,,165,,,,165,165,,165,165,,,,165,165,165',
'165,165,,,165,195,195,165,,195,195,,195,,,,,,,,,,,,,,,,,195,195,,,,',
',195,,195,,195,195,,195,195,195,,195,195,195,195,,,195,195,,,195,,,195',
'195,,,,,,,195,,,,,,195,,,,195,195,,195,195,,,,195,195,195,195,195,,',
'195,198,198,195,,198,198,,198,198,,,,,,,,,,,,,,,,198,198,,,,,,198,,198',
',198,198,,198,198,198,,198,198,198,198,,,198,198,,,198,,,198,198,,,',
',,,198,,,,,,198,,,,198,198,,198,198,,,,198,198,198,198,198,198,198,198',
'211,211,198,,211,211,,211,,,211,,,,,,,,,,,,,,211,211,,,,,,211,,211,',
'211,211,,211,211,211,,211,211,,,,,211,211,,,211,,,211,211,,,,,,,211',
',,,,,211,,,,211,211,,211,211,,,,211,211,211,211,211,,,211,216,216,211',
',216,216,,216,,,,,,,,,,,,,,,,,216,216,,,,,,216,,216,,216,216,,216,216',
'216,,216,216,,,,,216,216,,,216,,,216,216,,,,,,,216,,,,,,216,,,,216,216',
',216,216,,,,216,216,216,216,216,,,216,217,217,216,,217,217,,217,,,,',
',,,,,,,,,,,,217,217,,,,,,217,,217,,217,217,,217,217,217,,217,217,,,',
',217,217,,,217,,,217,217,,,,,,,217,,,,,,217,,,,217,217,,217,217,,,,217',
'217,217,217,217,,,217,218,218,217,,218,218,,218,,,,,,,,,,,,,,,,,218',
'218,,,,,,218,,218,,218,218,,218,218,218,,218,218,,,,,218,218,,,218,',
',218,218,,,,,,,218,,,,,,218,,,,218,218,,218,218,,,,218,218,218,218,218',
',,218,259,259,218,,259,259,,259,,,,,,,,,,,,,,,,,259,259,,,,,,259,,259',
',259,259,,259,259,259,,259,259,,,,,259,259,,,259,,,259,259,,,,,,,259',
',,,,,259,,,,259,259,,259,259,,,,259,259,259,259,259,,,259,281,281,259',
',281,281,,281,,,,,,,,,,,,,,,,,281,281,,,,,,281,,281,,281,281,,281,281',
'281,,281,281,281,281,,,281,281,,,281,,,281,281,,,,,,,281,,,,,,281,,',
',281,281,,281,281,,,,281,281,281,281,281,281,281,281,284,284,281,,284',
'284,,284,,,,,,,,,,,,,,,,,284,284,,,,,,284,,284,,284,284,,284,284,284',
',284,284,284,284,,,284,284,,,284,,,284,284,,,,,,,284,,,,,,284,,,,284',
'284,,284,284,,,,284,284,284,284,284,284,284,284,285,285,284,,285,285',
',285,,,,,,,,,,,,,,,,,285,285,,,,,,285,,285,,285,285,,285,285,285,,285',
'285,285,285,,,285,285,,,285,,,285,285,,,,,,,285,,,,,,285,,,,285,285',
',285,285,,,,285,285,285,285,285,285,285,285,286,286,285,,286,286,,286',
',,,,,,,,,,,,,,,,286,286,,,,,,286,,286,,286,286,,286,286,286,,286,286',
'286,286,,,286,286,,,286,,,286,286,,,,,,,286,,,,,,286,,,,286,286,,286',
'286,,,,286,286,286,286,286,,,286,304,304,286,,304,304,,304,304,,,,,',
',,,,,,,,,,304,304,,,,,,304,,304,,304,304,,304,304,304,,304,304,304,304',
',,304,304,,,304,,,304,304,,,,,,,304,,,,,,304,,,,304,304,,304,304,,,',
'304,304,304,304,304,,,304,305,305,304,,305,305,,305,305,,,,,,,,,,,,',
',,,305,305,,,,,,305,,305,,305,305,,305,305,305,,305,305,305,305,,,305',
'305,,,305,,,305,305,,,,,,,305,,,,,,305,,,,305,305,,305,305,,,,305,305',
'305,305,305,,,305,306,306,305,,306,306,,306,,,,,,,,,,,,,,,,,306,306',
',,,,,306,,306,,306,306,,306,306,306,,306,306,,,,,306,306,,,306,,,306',
'306,,,,,,,306,,,,,,306,,,,306,306,,306,306,,,,306,306,306,306,306,,',
'306,320,320,306,,320,320,,320,,,,,,,,,,,,,,,,,320,320,,,,,,320,,320',
',320,320,,320,320,320,,320,320,320,320,,,320,320,,,320,,,320,320,,,',
',,,320,,,,,,320,,,,320,320,,320,320,,,,320,320,320,320,320,320,320,320',
'323,323,320,,323,323,,323,323,,,,,,,,,,,,,,,,323,323,,,,,,323,,323,',
'323,323,,323,323,323,,323,323,323,323,,,323,323,,,323,,,323,323,,,,',
',,323,,,,,,323,,,,323,323,,323,323,,,,323,323,323,323,323,323,323,323',
'328,328,323,,328,328,,328,,,,,,,,,,,,,,,,,328,328,,,,,,328,,328,,328',
'328,,328,328,328,,328,328,328,328,,,328,328,,,328,,,328,328,,,,,,,328',
',,,,,328,,,,328,328,,328,328,,,,328,328,328,328,328,,,328,343,343,328',
',343,343,,343,,,,,,,,,,,,,,,,,343,343,,,,,,343,,343,,343,343,,343,343',
'343,,343,343,,,,,343,343,,,343,,,343,343,,,,,,,343,,,,,,343,,,,343,343',
',343,343,,,,343,343,343,343,343,,,343,344,344,343,,344,344,,344,,,,',
',,,,,,,,,,,,344,344,,,,,,344,,344,,344,344,,344,344,344,,344,344,,,',
',344,344,,,344,,,344,344,,,,,,,344,,,,,,344,,,,344,344,,344,344,,,,344',
'344,344,344,344,,,344,345,345,344,,345,345,,345,,,,,,,,,,,,,,,,,345',
'345,,,,,,345,,345,,345,345,,345,345,345,,345,345,,,,,345,345,,,345,',
',345,345,,,,,,,345,,,,,,345,,,,345,345,,345,345,,,,345,345,345,345,345',
',,345,346,346,345,,346,346,,346,,,,,,,,,,,,,,,,,346,346,,,,,,346,,346',
',346,346,,346,346,346,,346,346,,,,,346,346,,,346,,,346,346,,,,,,,346',
',,,,,346,,,,346,346,,346,346,,,,346,346,346,346,346,,,346,350,350,346',
',350,350,,350,,,,,,,,,,,,,,,,,350,350,,,,,,350,,350,,350,350,,350,350',
'350,,350,350,350,350,,,350,350,,,350,,,350,350,,,,,,,350,,,,,,350,,',
',350,350,,350,350,,,,350,350,350,350,350,350,350,350,371,371,350,,371',
'371,,371,,,,,,,,,,,,,,,,,371,371,,,,,,371,,371,,371,371,,371,371,371',
',371,371,,,,,371,371,,,371,,,371,371,,,,,,,371,,,,,,371,,,,371,371,',
'371,371,,,,371,371,371,371,371,,,371,388,388,371,,388,388,,388,388,',
',,,,,,,,,,,,,,388,388,,,,,,388,,388,,388,388,,388,388,388,,388,388,388',
'388,,,388,388,,,388,,,388,388,,,,,,,388,,,,,,388,,,,388,388,,388,388',
',,,388,388,388,388,388,,,388,392,392,388,,392,392,,392,,,,,,,,,,,,,',
',,,392,392,,,,,,392,,392,,392,392,,392,392,392,,392,392,,,,,392,392',
',,392,,,392,392,,,,,,,392,,,,,,392,,,,392,392,,392,392,,,,392,392,392',
'392,392,,,392,395,395,392,,395,395,,395,,,,,,,,,,,,,,,,,395,395,,,,',
',395,,395,,395,395,,395,395,395,,395,395,395,395,,,395,395,,,395,,,395',
'395,,,,,,,395,,,,,,395,,,,395,395,,395,395,,,,395,395,395,395,395,395',
'395,395,403,403,395,,403,403,,403,403,,,,,,,,,,,,,,,,403,403,,,,,,403',
',403,,403,403,,403,403,403,,403,403,,,,,403,403,,,403,,,403,403,,,,',
',,403,,,,,,403,,,,403,403,,403,403,,,,403,403,403,403,403,,,403,405',
'405,403,,405,405,,405,,,,,,,,,,,,,,,,,405,405,,,,,,405,,405,,405,405',
',405,405,405,,405,405,405,405,,,405,405,,,405,,,405,405,,,,,,,405,,',
',,,405,,,,405,405,,405,405,,,,405,405,405,405,405,,,405,406,406,405',
',406,406,,406,,,,,,,,,,,,,,,,,406,406,,,,,,406,,406,,406,406,,406,406',
'406,,406,406,406,406,,,406,406,,,406,,,406,406,,,,,,,406,,,,,,406,,',
',406,406,,406,406,,,,406,406,406,406,406,,,406,416,416,406,,416,416',
',416,,,,,,,,,,,,,,,,,416,416,,,,,,416,,416,,416,416,,416,416,416,,416',
'416,416,416,,,416,416,,,416,,,416,416,,,,,,,416,,,,,,416,,,,416,416',
',416,416,,,,416,416,416,416,416,416,416,416,433,433,416,,433,433,,433',
',,,,,,,,,,,,,,,,433,433,,,,,,433,,433,,433,433,,433,433,433,,433,433',
',,,,433,433,,,433,,,433,433,,,,,,,433,,,,,,433,,,,433,433,,433,433,',
',,433,433,433,433,433,,,433,440,440,433,,440,440,,440,,,,,,,,,,,,,,',
',,440,440,,,,,,440,,440,,440,440,,440,440,440,,440,440,440,440,,,440',
'440,,,440,,,440,440,,,,,,,440,,,,,,440,,,,440,440,,440,440,,,,440,440',
'440,440,440,,,440,448,448,440,,448,448,,448,,,,,,,,,,,,,,,,,448,448',
',,,,,448,,448,,448,448,,448,448,448,,448,448,448,448,,,448,448,,,448',
',,448,448,,,,,,,448,,,,,,448,,,,448,448,,448,448,,,,448,448,448,448',
'448,448,448,448,451,451,448,,451,451,,451,,,,,,,,,,,,,,,,,451,451,,',
',,,451,,451,,451,451,,451,451,451,,451,451,451,451,,,451,451,,,451,',
',451,451,,,,,,,451,,,,,,451,,,,451,451,,451,451,,,,451,451,451,451,451',
',,451,454,454,451,,454,454,,454,,,,,,,,,,,,,,,,,454,454,,,,,,454,,454',
',454,454,,454,454,454,,454,454,454,454,,,454,454,,,454,,,454,454,,,',
',,,454,,,,,,454,,,,454,454,,454,454,,,,454,454,454,454,454,454,454,454',
'460,460,454,,460,460,,460,,,,,,,,,,,,,,,,,460,460,,,,,,460,,460,,460',
'460,,460,460,460,,460,460,,,,,460,460,,,460,,,460,460,,,,,,,460,,,,',
',460,,,,460,460,,460,460,,,,460,460,460,460,460,,,460,465,465,460,,465',
'465,,465,,,,,,,,,,,,,,,,,465,465,,,,,,465,,465,,465,465,,465,465,465',
',465,465,,,,,465,465,,,465,,,465,465,,,,,,,465,,,,,,465,,,,465,465,',
'465,465,,,,465,465,465,465,465,,,465,474,474,465,,474,474,,474,474,',
',,,,,,,,,,,,,,474,474,,,,,,474,,474,,474,474,,474,474,474,,474,474,474',
'474,,,474,474,,,474,,,474,474,,,,,,,474,,,,,,474,,,,474,474,,474,474',
',,,474,474,474,474,474,,,474,476,476,474,,476,476,,476,,,,,,,,,,,,,',
',,,476,476,,,,,,476,,476,,476,476,,476,476,476,,476,476,476,476,,,476',
'476,,,476,,,476,476,,,,,,,476,,,,,,476,,,,476,476,,476,476,,,,476,476',
'476,476,476,,,476,495,495,476,,495,495,,495,495,,,,,,,,,,,,,,,,495,495',
',,,,,495,,495,,495,495,,495,495,495,,495,495,495,495,,,495,495,,,495',
',,495,495,,,,,,,495,,,,,,495,,,,495,495,,495,495,,,,495,495,495,495',
'495,,,495,497,497,495,,497,497,,497,497,,,,,,,,,,,,,,,,497,497,,,,,',
'497,,497,,497,497,,497,497,497,,497,497,497,497,,,497,497,,,497,,,497',
'497,,,,,,,497,,,,,,497,,,,497,497,,497,497,,,,497,497,497,497,497,,',
'497,499,499,497,,499,499,,499,,,,,,,,,,,,,,,,,499,499,,,,,,499,,499',
',499,499,,499,499,499,,499,499,499,499,,,499,499,,,499,,,499,499,,,',
',,,499,,,,,,499,,,,499,499,,499,499,,,,499,499,499,499,499,,,499,508',
'508,499,,508,508,,508,,,,,,,,,,,,,,,,,508,508,,,,,,508,,508,,508,508',
',508,508,508,,508,508,,,,,508,508,,,508,,,508,508,,,,,,,508,,,,,,508',
',,,508,508,,508,508,,,9,508,508,508,508,508,,,508,,,508,9,9,9,,9,,9',
',9,,9,9,9,9,,,,,,,,,,,,,,,,9,,,,9,9,,,9,9,9,9,9,9,,9,9,158,,158,,,9',
',,,,,,158,158,158,,158,,158,,158,,158,158,158,158,,,,,9,,,,,,,,,,,158',
',,,158,158,,,158,158,158,158,158,158,,158,158,160,,160,,,158,,,,,,,160',
'160,160,,160,,160,,160,,160,160,160,160,,,,,158,,,,,,,,,,,160,,,,160',
'160,,,160,160,160,160,160,160,,160,160,161,,161,,,160,,,,,,,161,161',
'161,,161,,161,,161,,161,161,161,161,,,,,160,,,,,,,,,,,161,,,,161,161',
',197,161,161,161,161,161,161,,161,161,,,197,197,197,161,197,,197,,197',
',197,197,197,197,,,,,,,,,,,,,,,161,197,,,,197,197,,,197,197,197,197',
'197,197,,197,197,,,,,,197,,,,209,,,,,,,197,197,,,,209,209,209,209,209',
'246,209,,209,197,209,209,209,209,,,,,,246,,246,,246,,246,,,,209,,,,209',
'209,,,209,209,209,209,209,209,,209,209,246,,,247,,209,,,246,246,246',
'246,,,,246,246,247,,247,248,247,246,247,,,,,,,209,,,,248,,248,,248,',
'248,,,,247,,,246,,,,,247,247,247,247,,,,247,247,248,,,249,,247,,,248',
'248,248,248,248,248,,248,248,249,,249,250,249,248,249,,,,,,,247,,,250',
'250,,250,,250,,250,,250,,249,,,248,,,,,249,249,249,249,249,249,,249',
'249,250,,,,,249,,251,250,250,250,250,250,250,,250,250,,,,251,251,250',
'251,252,251,,251,,251,249,,,,,,,252,252,,252,,252,,252,,252,250,251',
',,,,,,,251,251,251,251,251,251,,251,251,252,,,,,251,,253,252,252,252',
'252,252,252,,252,252,,,,253,253,252,253,,253,,253,,253,251,,,,,,,,,',
',,,,,,,252,253,,,,,254,,,253,253,253,253,253,253,,253,253,254,254,254',
',254,253,254,,254,,254,254,254,254,,,,,,,,,,,,,,,,254,253,,,,255,,,254',
'254,254,254,254,254,,254,254,255,255,255,,255,254,255,,255,,255,255',
'255,255,,,,,,,,,,,,,,,,255,254,,,,255,,,255,255,255,255,255,255,256',
'255,255,,,256,,,255,,,,256,256,256,,256,,256,,256,,256,256,256,256,',
',,,,,,255,,,,,,,,256,,,,256,256,,,256,256,256,256,256,256,,256,256,260',
'260,,,,256,260,,,,,,260,260,260,,260,,260,,260,,260,260,260,260,,,,',
'256,,,,,,,,,,,260,,,,260,260,,267,260,260,260,260,260,260,,260,260,',
',267,267,267,260,267,,267,,267,,267,267,267,267,,,,,,,,,,,,,,,260,267',
',,,267,267,,,267,267,267,267,267,267,272,267,267,,,,,,267,,,,272,272',
'272,272,272,,272,,272,,272,272,272,272,,,,,,,,267,,,,,,,,272,,,,272',
'272,,401,272,272,272,272,272,272,,272,272,,,401,401,401,272,401,,401',
',401,,401,401,401,401,,,,,,,,,,,,,,,272,401,,,,401,401,,428,401,401',
'401,401,401,401,,401,401,,,428,428,428,401,428,,428,,428,,428,428,428',
'428,,,,,,,,,,,,,,,401,428,,,,428,428,,429,428,428,428,428,428,428,,428',
'428,,,429,429,429,428,429,,429,,429,,429,429,429,429,,,,,,,,,,,,,,,428',
'429,,,,429,429,,430,429,429,429,429,429,429,,429,429,,,430,430,430,429',
'430,,430,,430,,430,430,430,430,,,,,,,,,,,,,,,429,430,,,,430,430,,431',
'430,430,430,430,430,430,,430,430,,,431,431,431,430,431,,431,,431,,431',
'431,431,431,,,,,,,,,,,,,,,430,431,,,,431,431,,457,431,431,431,431,431',
'431,,431,431,,,457,457,457,431,457,,457,,457,,457,457,457,457,,,,,,',
',,,,,,,,431,457,,,,457,457,,498,457,457,457,457,457,457,,457,457,,,498',
'498,498,457,498,,498,,498,,498,498,498,498,,,,,,,,,,,,,,,457,498,,,',
'498,498,,,498,498,498,498,498,498,,498,498,,266,266,266,266,498,266',
'266,266,,266,,266,266,,,,,,,266,266,266,,,,266,,,,498,,,,,,,,266,266',
',,,,,,,,,,,266,266,266,266,266,266,266,266,340,340,340,340,,340,340',
'340,,340,,340,340,,,,,,,340,340,340,,,,340,,,,,,,,,,,,340,340,,,,,,',
',,,,,340,340,340,340,340,340,340,340,342,342,342,342,,342,342,342,,342',
',342,342,,,,,,,342,342,342,,,,342,,,,,,,,,,,,342,342,,,,,,,,,,,,342',
'342,342,342,342,342,342,342,372,372,372,372,,372,372,372,,372,,372,372',
',,,,,,372,372,372,,,,372,,,,,,,,,,,,372,372,,,,,,,,,,,,372,372,372,372',
'372,372,372,372,380,380,380,380,,380,380,380,,380,,380,380,,,,,,,380',
'380,380,,,,380,,,,,,,,,,,,380,380,,,,,,,,,,,,380,380,380,380,380,380',
'380,380,407,407,407,407,,407,407,407,,407,,407,407,,,,,,,407,407,407',
',,,407,,,,,,,,,,,,407,407,,,,,,,,,,,,407,407,407,407,407,407,407,407' ]
        racc_action_check = arr = ::Array.new(10127, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
    -2,    34,   nil,   nil,    87,    54,   nil,    -8,    78,  8528,
   176,   265,    62,   nil,   nil,   nil,   168,   354,   443,   532,
   621,   710,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   188,   799,   157,
    27,    96,   888,   977,  1066,    60,   193,   190,   127,   503,
   244,   229,   237,   257,   127,   nil,   nil,   nil,  1155,  1244,
  1333,   nil,   nil,   nil,  1422,   nil,    70,    78,   nil,  1511,
   nil,   160,  1600,   156,  1689,  1778,  1867,  1956,  2045,  2134,
  2223,  2312,  2401,  2490,  2579,  2668,  2757,  2846,  2935,  3024,
  3113,  3202,  3291,  3380,  3469,  3558,  3647,  3736,  3825,  3914,
  4003,  4092,  4181,   nil,     8,   166,  4270,  4359,   181,   185,
  4448,   340,   nil,   nil,   nil,   nil,   nil,   nil,   247,   nil,
   nil,   539,   282,   628,   662,   173,   176,   200,   nil,   nil,
   202,   153,   169,   333,   219,   336,   224,   nil,   nil,   nil,
   nil,   232,   nil,     8,   nil,   184,   -35,  4537,  8586,   nil,
  8644,  8702,   358,   380,   371,  4626,   235,   nil,   237,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   388,     4,   251,
   nil,   nil,   261,   nil,   270,   nil,     6,   nil,   nil,   nil,
   nil,   430,   nil,   nil,   293,  4715,    68,  8750,  4804,   nil,
   277,   nil,   nil,   nil,   nil,   284,   292,   295,   299,  8817,
   301,  4893,     2,    10,    -9,   179,  4982,  5071,  5160,   nil,
   nil,    15,   422,   425,   155,   312,   859,   460,    17,    91,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   717,     5,
    94,   306,   395,   128,   217,   573,  8834,  8878,  8895,  8939,
  8956,  9004,  9021,  9069,  9115,  9161,  9216,   nil,   nil,  5249,
  9274,   315,   nil,   nil,   nil,   nil,  9746,  9322,   285,   nil,
   313,   304,  9377,   nil,   314,   nil,    58,   131,   350,   nil,
   nil,  5338,   334,   nil,  5427,  5516,  5605,   318,   363,   329,
   nil,   nil,   369,   nil,   nil,   nil,   nil,   nil,   372,   353,
   -17,   nil,    -7,   nil,  5694,  5783,  5872,   384,   388,   391,
   393,   nil,   371,   948,   -24,   356,   100,   nil,   nil,   415,
  5961,   418,   nil,  6050,   nil,   nil,   nil,   nil,  6139,   nil,
   nil,   nil,   nil,   423,   nil,   nil,   nil,   nil,   430,   438,
  9804,   441,  9862,  6228,  6317,  6406,  6495,   444,   nil,   453,
  6584,   455,   nil,   459,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   463,  6673,  9920,   465,   nil,   505,   nil,   464,   nil,   466,
  9978,   nil,   410,   nil,    98,   476,   480,   nil,  6762,   484,
   420,   150,  6851,   nil,   nil,  6940,   nil,   485,   120,   486,
   465,  9425,   126,  7029,   nil,  7118,  7207, 10036,   nil,   494,
   nil,  1037,   nil,   nil,   495,   nil,  7296,   nil,   nil,   nil,
   nil,   nil,   nil,   440,   374,   500,   nil,   nil,  9473,  9521,
  9569,  9617,   505,  7385,   nil,   nil,   506,   nil,   nil,   504,
  7474,   nil,   nil,   nil,   492,   495,   511,   nil,  7563,   nil,
   nil,  7652,   515,   nil,  7741,   nil,   nil,  9665,   152,   nil,
  7830,   522,   498,   nil,   528,  7919,   531,   nil,   nil,   532,
   nil,   nil,   534,   536,  8008,   nil,  8097,   224,   nil,   nil,
   541,   509,   nil,   nil,   nil,   nil,   543,   nil,   nil,   544,
   546,   nil,   262,   nil,   nil,  8186,   nil,  8275,  9713,  8364,
   nil,   nil,   547,   551,   nil,   553,   nil,   nil,  8453,   nil,
   nil,   nil,   nil,   561,   nil,   565,   nil,   571,   nil,   nil,
   nil,   nil,   nil,   541,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -3,  -296,    -1,    -2,    -4,    -5,    -8,   -10,   -18,   -23,
  -296,  -296,  -188,   -35,   -36,   -37,   -38,  -296,  -296,  -296,
  -296,  -296,   -70,   -71,   -72,   -73,   -74,   -75,   -76,   -77,
   -78,   -79,   -80,   -81,   -82,   -83,   -84,   -85,   -86,   -87,
   -88,   -89,   -90,   -91,   -92,   -93,   -94,   -95,  -296,  -296,
  -102,  -106,  -296,  -296,  -296,  -296,  -296,  -296,  -296,  -296,
  -296,  -244,  -267,  -243,  -296,  -215,  -216,  -217,  -296,  -296,
  -296,  -240,  -241,  -242,  -296,  -246,  -296,  -259,  -262,  -296,
  -268,  -296,  -296,    -7,  -296,  -296,  -296,  -296,  -296,  -296,
  -296,  -296,  -143,  -296,  -296,  -296,  -296,  -296,  -296,  -296,
  -296,  -296,  -296,  -296,  -296,  -296,  -296,  -296,  -296,  -296,
  -296,  -296,  -296,  -100,  -296,  -138,  -295,  -295,   -24,   -25,
  -296,  -295,  -158,  -185,  -186,  -187,  -188,  -189,  -296,  -155,
  -156,   -49,  -188,   -50,   -57,  -296,  -296,   -14,   -15,   -16,
  -269,   -97,  -234,  -236,  -239,  -235,  -296,  -231,  -237,  -238,
  -101,  -205,  -212,  -267,  -103,  -295,  -296,  -296,  -296,  -114,
  -296,  -296,  -295,  -295,  -296,  -296,  -269,  -169,  -171,  -172,
  -173,  -174,  -175,  -177,  -178,  -243,  -244,  -295,  -296,  -269,
  -219,  -228,  -229,  -232,  -269,  -221,  -296,  -224,  -225,  -230,
  -245,  -296,  -250,  -253,  -296,  -257,  -296,  -296,  -296,   528,
    -6,    -9,   -11,   -12,   -13,   -19,   -20,   -21,   -22,  -296,
  -269,  -296,   -93,   -94,   -95,  -287,  -280,  -286,  -274,  -144,
  -147,  -296,  -277,  -291,  -188,  -294,  -283,  -289,  -216,  -217,
  -273,  -278,  -279,  -281,  -282,  -284,  -292,  -293,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -51,   -52,
   -53,   -54,   -55,   -56,   -58,   -59,  -296,   -60,  -132,  -296,
   -23,  -269,   -64,   -67,  -107,  -108,  -143,  -142,  -296,  -141,
  -296,  -271,  -296,   -30,  -295,  -190,  -296,  -296,  -296,   -61,
   -62,  -270,  -296,   -99,  -296,  -296,  -257,  -296,  -296,  -296,
  -184,  -112,  -269,  -195,  -197,  -198,  -199,  -200,  -202,  -296,
  -296,  -267,  -296,  -105,  -296,  -296,  -296,  -296,  -296,  -296,
  -296,  -166,  -295,  -270,  -296,  -295,  -209,  -210,  -211,  -296,
  -270,  -296,  -222,  -296,  -247,  -248,  -249,  -251,  -296,  -254,
  -255,  -256,  -258,  -269,  -260,  -263,  -265,  -266,    -8,  -296,
  -143,  -296,  -270,  -296,  -296,  -296,  -296,  -269,  -134,  -296,
  -270,  -269,  -146,  -296,  -274,  -275,  -276,  -277,  -280,  -283,
  -285,  -286,  -287,  -288,  -289,  -290,  -291,  -294,  -139,  -140,
  -296,  -272,  -143,  -296,  -161,  -296,  -191,  -269,  -192,  -269,
  -143,   -17,   -96,  -227,  -296,  -296,  -296,  -109,  -296,  -182,
  -296,  -270,  -296,  -203,  -204,  -296,  -104,  -296,  -117,  -296,
  -123,   -68,  -296,  -296,  -127,  -295,  -295,  -143,  -165,  -296,
  -179,  -296,  -170,  -176,  -296,  -207,  -296,  -218,  -233,  -220,
  -223,  -226,  -252,  -296,  -296,  -269,   -28,  -145,  -150,  -148,
  -149,  -136,  -296,  -270,   -63,   -65,  -296,   -27,   -31,  -269,
  -295,  -162,  -163,  -164,  -296,  -296,  -269,   -98,  -296,  -206,
  -213,  -257,  -296,  -111,  -296,  -113,  -196,  -201,  -117,  -116,
  -296,  -296,  -123,  -122,  -296,  -296,  -296,  -126,  -128,  -296,
  -159,  -160,  -296,  -269,  -296,  -180,  -295,  -296,  -261,  -264,
  -296,   -32,  -133,  -135,  -137,   -29,  -296,  -193,  -194,  -296,
  -296,  -110,  -296,  -115,  -118,  -296,  -121,  -296,   -69,  -295,
  -151,  -152,  -296,  -296,  -168,  -296,  -208,   -26,   -33,  -157,
  -154,  -214,  -183,  -296,  -120,  -296,  -125,  -296,  -130,  -131,
  -153,  -167,  -181,  -271,  -119,  -124,  -129,   -34 ]

racc_goto_table = [
     2,   271,   335,   188,   122,   131,   133,   134,   171,   169,
   135,   136,   269,   269,   151,   154,   139,   370,   190,   258,
   261,   331,   288,   152,   317,   292,   182,   182,   210,   140,
   435,   412,    83,   404,   268,   270,     1,   128,   137,   463,
   158,   160,   161,   179,   184,   263,     3,   162,   163,   459,
   480,   290,   177,   438,   257,   318,   387,   494,   137,   137,
   189,   403,   517,   347,   192,   333,   427,   197,   469,   472,
   118,   119,   373,   441,   201,   202,   203,   204,   164,   409,
   209,   238,   239,   240,   241,   242,   243,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
   260,   496,   189,   486,   267,   267,   283,   151,   272,   493,
   200,   413,   385,   274,   282,   456,   152,   394,   393,   383,
   278,   151,   418,   329,   122,   139,   330,   327,   435,   475,
   468,   188,   328,   326,   193,   163,   195,   177,   302,   505,
   312,   nil,   nil,   316,   nil,   377,   379,   137,   205,   206,
   207,   208,   nil,   319,   307,   308,   309,   nil,   321,   nil,
   nil,   151,   415,   nil,   nil,   310,   nil,   348,   nil,   315,
   374,   nil,   nil,   nil,   nil,   171,   169,   nil,   nil,   nil,
   151,   nil,   414,   nil,   341,   nil,   nil,   nil,   338,   152,
   nil,   nil,   nil,   384,   nil,   332,   nil,   nil,   339,   133,
   nil,   nil,   351,   nil,   158,   160,   161,   nil,   410,   nil,
   nil,   290,   nil,   nil,   162,   163,   122,   nil,   263,   177,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   479,
   nil,   nil,   nil,   nil,   nil,   349,   nil,   nil,   nil,   nil,
   nil,   151,   151,   nil,   nil,   nil,   nil,   256,   nil,   381,
   nil,   nil,   nil,   nil,   389,   nil,   421,   nil,   nil,   nil,
   nil,   nil,   171,   169,   nil,   nil,   390,   nil,   nil,   527,
   nil,   137,   422,   260,   189,   189,   425,   490,   182,   nil,
   nil,   nil,   nil,   263,   nil,   nil,   332,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   401,   nil,   nil,   nil,   nil,   nil,
   nil,   471,   471,   nil,   397,   399,   nil,   423,   439,   nil,
   137,   nil,   nil,   189,   nil,   nil,   446,   nil,   192,   nil,
   nil,   432,   nil,   nil,   477,   436,   nil,   nil,   nil,   nil,
   nil,   428,   429,   430,   431,   nil,   471,   nil,   260,   nil,
   189,   483,   nil,   473,   nil,   nil,   nil,   447,   nil,   263,
   nil,   444,   nil,   445,   nil,   nil,   151,   nil,   nil,   272,
   171,   169,   492,   381,   nil,   nil,   nil,   442,   nil,   nil,
   nil,   nil,   471,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   457,   263,   nil,   nil,   nil,   137,   nil,   263,   452,   523,
   nil,   401,   nil,   nil,   nil,   518,   nil,   nil,   nil,   481,
   nil,   nil,   nil,   nil,   260,   nil,   189,   nil,   nil,   nil,
   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,   nil,
   489,   256,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   260,   nil,   189,   nil,
   nil,   nil,   260,   nil,   189,   nil,   nil,   502,   158,   nil,
   nil,   332,   nil,   498,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   503,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   513,   272,   515,   nil,   519 ]

racc_goto_check = [
     2,    15,   106,     9,    70,    12,    12,    12,    45,    46,
     6,     6,    62,    62,    47,    49,     8,    16,    99,    63,
    24,    89,    53,    87,    44,    55,    94,    94,    13,    10,
    25,    79,     5,    60,    66,    66,     1,    73,     6,    58,
    12,    12,    12,    90,    90,     9,     3,    70,    70,    57,
    14,    62,    70,    18,    23,    43,    54,    56,     6,     6,
     6,    59,    61,    64,     6,    55,    67,    12,    72,    72,
    11,    11,    75,    76,     6,     6,     6,     6,    73,    78,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    12,    12,    12,    12,    12,    12,    12,    12,    12,
    12,    58,     6,    72,    12,    12,    49,    47,    12,    57,
     5,    81,    89,    71,    17,    82,    87,    83,    85,    92,
    70,    47,    93,    95,    70,     8,    96,   100,    25,    79,
    60,     9,   101,   103,   104,    70,   105,    70,    10,    72,
    17,   nil,   nil,    47,   nil,    55,    55,     6,    11,    11,
    11,    11,   nil,    17,    71,    71,    70,   nil,    17,   nil,
   nil,    47,    44,   nil,   nil,     2,   nil,    63,   nil,    71,
    62,   nil,   nil,   nil,   nil,    45,    46,   nil,   nil,   nil,
    47,   nil,    53,   nil,    17,   nil,   nil,   nil,     6,    87,
   nil,   nil,   nil,    24,   nil,     2,   nil,   nil,     2,    12,
   nil,   nil,    13,   nil,    12,    12,    12,   nil,    62,   nil,
   nil,    62,   nil,   nil,    70,    70,    70,   nil,     9,    70,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,
   nil,   nil,   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,
   nil,    47,    47,   nil,   nil,   nil,   nil,    12,   nil,     8,
   nil,   nil,   nil,   nil,    47,   nil,     9,   nil,   nil,   nil,
   nil,   nil,    45,    46,   nil,   nil,    17,   nil,   nil,    16,
   nil,     6,    99,    12,     6,     6,    13,    89,    94,   nil,
   nil,   nil,   nil,     9,   nil,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,   nil,   nil,   nil,   nil,
   nil,    62,    62,   nil,     2,     2,   nil,    17,    13,   nil,
     6,   nil,   nil,     6,   nil,   nil,    13,   nil,     6,   nil,
   nil,    17,   nil,   nil,    24,    17,   nil,   nil,   nil,   nil,
   nil,    12,    12,    12,    12,   nil,    62,   nil,    12,   nil,
     6,    63,   nil,    13,   nil,   nil,   nil,    49,   nil,     9,
   nil,    17,   nil,    17,   nil,   nil,    47,   nil,   nil,    12,
    45,    46,    24,     8,   nil,   nil,   nil,    70,   nil,   nil,
   nil,   nil,    62,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,     9,   nil,   nil,   nil,     6,   nil,     9,     2,    15,
   nil,    12,   nil,   nil,   nil,    62,   nil,   nil,   nil,    17,
   nil,   nil,   nil,   nil,    12,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,    17,   nil,   nil,   nil,   nil,   nil,   nil,
    17,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,     6,   nil,
   nil,   nil,    12,   nil,     6,   nil,   nil,    17,    12,   nil,
   nil,     2,   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,    12,     2,   nil,     2 ]

racc_goto_pointer = [
   nil,    36,     0,    46,   nil,    28,   -10,   nil,   -32,   -67,
   -19,    60,   -12,   -64,  -375,  -119,  -254,   -26,  -318,   nil,
   nil,   nil,   nil,   -57,   -92,  -320,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,  -123,  -154,   -51,   -50,   -35,   nil,   -35,
   nil,   nil,   nil,  -133,  -232,  -131,  -403,  -349,  -361,  -245,
  -273,  -437,  -104,   -92,  -196,   nil,   -82,  -276,   nil,   nil,
    -8,    -8,  -337,    21,   nil,  -202,  -302,   nil,  -233,  -282,
   nil,  -203,  -276,  -183,   nil,  -181,   nil,   -26,   nil,  -174,
   -25,   nil,  -165,  -198,   -42,   -71,   -68,   nil,   nil,   -56,
   -64,   -59,   nil,   -58,    58,    59,  -195 ]

racc_goto_default = [
   nil,   nil,   470,   nil,     4,     5,     6,     7,   181,   138,
   nil,     8,     9,   nil,   nil,   nil,   nil,   nil,   273,    13,
    14,    15,    16,   nil,   nil,   262,   402,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    48,   nil,
    50,    51,   155,   nil,   nil,   nil,   159,   nil,   nil,   nil,
   nil,   nil,   275,   nil,   nil,   115,   nil,   219,   221,   220,
    57,   nil,   nil,   nil,   121,   nil,   nil,   166,   nil,   167,
   168,   172,   293,   294,   295,   296,   297,   300,    64,   nil,
   nil,   186,   146,   183,   147,    71,    72,    73,    74,   nil,
   nil,   nil,   191,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 97, :_reduce_1,
  1, 97, :_reduce_2,
  0, 97, :_reduce_3,
  1, 98, :_reduce_4,
  1, 100, :_reduce_5,
  3, 100, :_reduce_6,
  2, 100, :_reduce_7,
  1, 101, :_reduce_8,
  3, 101, :_reduce_9,
  1, 102, :_reduce_none,
  3, 102, :_reduce_11,
  3, 102, :_reduce_12,
  3, 102, :_reduce_13,
  1, 104, :_reduce_none,
  1, 104, :_reduce_15,
  1, 106, :_reduce_16,
  3, 106, :_reduce_17,
  1, 103, :_reduce_none,
  3, 103, :_reduce_19,
  3, 103, :_reduce_20,
  3, 103, :_reduce_21,
  3, 103, :_reduce_22,
  1, 107, :_reduce_none,
  2, 107, :_reduce_24,
  2, 107, :_reduce_25,
  7, 107, :_reduce_26,
  5, 107, :_reduce_27,
  5, 107, :_reduce_28,
  4, 114, :_reduce_29,
  1, 111, :_reduce_30,
  3, 111, :_reduce_31,
  1, 110, :_reduce_32,
  2, 110, :_reduce_33,
  4, 110, :_reduce_34,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  3, 108, :_reduce_39,
  3, 108, :_reduce_40,
  3, 108, :_reduce_41,
  3, 108, :_reduce_42,
  3, 108, :_reduce_43,
  3, 108, :_reduce_44,
  3, 108, :_reduce_45,
  3, 108, :_reduce_46,
  3, 108, :_reduce_47,
  3, 108, :_reduce_48,
  2, 108, :_reduce_49,
  2, 108, :_reduce_50,
  3, 108, :_reduce_51,
  3, 108, :_reduce_52,
  3, 108, :_reduce_53,
  3, 108, :_reduce_54,
  3, 108, :_reduce_55,
  3, 108, :_reduce_56,
  2, 108, :_reduce_57,
  3, 108, :_reduce_58,
  3, 108, :_reduce_59,
  3, 108, :_reduce_60,
  3, 108, :_reduce_61,
  3, 108, :_reduce_62,
  5, 118, :_reduce_63,
  1, 120, :_reduce_64,
  3, 120, :_reduce_65,
  1, 121, :_reduce_none,
  1, 121, :_reduce_67,
  1, 122, :_reduce_68,
  3, 122, :_reduce_69,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 115, :_reduce_91,
  1, 115, :_reduce_92,
  1, 115, :_reduce_93,
  1, 115, :_reduce_94,
  1, 115, :_reduce_95,
  4, 117, :_reduce_96,
  2, 117, :_reduce_97,
  5, 117, :_reduce_98,
  3, 117, :_reduce_99,
  2, 144, :_reduce_100,
  2, 144, :_reduce_101,
  1, 124, :_reduce_102,
  2, 124, :_reduce_103,
  4, 146, :_reduce_104,
  3, 146, :_reduce_105,
  1, 146, :_reduce_106,
  3, 147, :_reduce_107,
  3, 147, :_reduce_108,
  3, 145, :_reduce_109,
  3, 150, :_reduce_110,
  2, 150, :_reduce_111,
  2, 148, :_reduce_112,
  4, 148, :_reduce_113,
  2, 127, :_reduce_114,
  5, 152, :_reduce_115,
  4, 152, :_reduce_116,
  0, 153, :_reduce_none,
  2, 153, :_reduce_118,
  4, 153, :_reduce_119,
  3, 153, :_reduce_120,
  6, 128, :_reduce_121,
  5, 128, :_reduce_122,
  0, 154, :_reduce_none,
  4, 154, :_reduce_124,
  3, 154, :_reduce_125,
  5, 126, :_reduce_126,
  1, 155, :_reduce_127,
  2, 155, :_reduce_128,
  5, 156, :_reduce_129,
  1, 157, :_reduce_none,
  1, 157, :_reduce_none,
  1, 119, :_reduce_none,
  4, 119, :_reduce_133,
  1, 160, :_reduce_134,
  3, 160, :_reduce_135,
  3, 159, :_reduce_136,
  6, 125, :_reduce_137,
  2, 125, :_reduce_138,
  3, 161, :_reduce_139,
  3, 161, :_reduce_140,
  1, 162, :_reduce_none,
  1, 162, :_reduce_none,
  0, 109, :_reduce_143,
  1, 109, :_reduce_144,
  3, 109, :_reduce_145,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  3, 163, :_reduce_148,
  3, 163, :_reduce_149,
  3, 163, :_reduce_150,
  6, 129, :_reduce_151,
  6, 130, :_reduce_152,
  7, 116, :_reduce_153,
  7, 116, :_reduce_154,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  7, 131, :_reduce_157,
  1, 170, :_reduce_158,
  1, 168, :_reduce_none,
  1, 168, :_reduce_none,
  1, 171, :_reduce_none,
  2, 171, :_reduce_162,
  1, 172, :_reduce_none,
  1, 172, :_reduce_none,
  4, 133, :_reduce_165,
  3, 133, :_reduce_166,
  7, 132, :_reduce_167,
  6, 132, :_reduce_168,
  1, 173, :_reduce_169,
  3, 173, :_reduce_170,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_173,
  1, 175, :_reduce_none,
  1, 176, :_reduce_175,
  3, 176, :_reduce_176,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 174, :_reduce_none,
  2, 174, :_reduce_180,
  7, 135, :_reduce_181,
  2, 149, :_reduce_182,
  5, 149, :_reduce_183,
  1, 149, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_none,
  1, 166, :_reduce_188,
  1, 166, :_reduce_189,
  1, 167, :_reduce_190,
  2, 167, :_reduce_191,
  2, 167, :_reduce_192,
  4, 167, :_reduce_193,
  4, 167, :_reduce_194,
  1, 151, :_reduce_195,
  3, 151, :_reduce_196,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  3, 181, :_reduce_201,
  1, 181, :_reduce_202,
  2, 182, :_reduce_203,
  2, 180, :_reduce_204,
  1, 183, :_reduce_205,
  4, 183, :_reduce_206,
  4, 136, :_reduce_207,
  6, 136, :_reduce_208,
  3, 136, :_reduce_209,
  3, 136, :_reduce_210,
  3, 136, :_reduce_211,
  2, 184, :_reduce_212,
  5, 137, :_reduce_213,
  7, 137, :_reduce_214,
  1, 123, :_reduce_215,
  1, 138, :_reduce_216,
  1, 138, :_reduce_217,
  4, 139, :_reduce_218,
  2, 139, :_reduce_219,
  4, 139, :_reduce_220,
  2, 139, :_reduce_221,
  3, 140, :_reduce_222,
  4, 140, :_reduce_223,
  2, 140, :_reduce_224,
  1, 187, :_reduce_225,
  3, 187, :_reduce_226,
  3, 105, :_reduce_227,
  1, 189, :_reduce_none,
  1, 189, :_reduce_229,
  1, 188, :_reduce_none,
  1, 188, :_reduce_231,
  1, 186, :_reduce_232,
  3, 186, :_reduce_233,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 142, :_reduce_none,
  1, 191, :_reduce_243,
  1, 191, :_reduce_244,
  2, 192, :_reduce_245,
  1, 194, :_reduce_246,
  1, 196, :_reduce_247,
  1, 197, :_reduce_248,
  2, 195, :_reduce_249,
  1, 198, :_reduce_250,
  1, 199, :_reduce_251,
  2, 199, :_reduce_252,
  2, 193, :_reduce_253,
  2, 200, :_reduce_254,
  2, 200, :_reduce_255,
  3, 99, :_reduce_256,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 201, :_reduce_259,
  2, 201, :_reduce_260,
  4, 201, :_reduce_261,
  1, 134, :_reduce_262,
  3, 134, :_reduce_263,
  5, 134, :_reduce_264,
  1, 202, :_reduce_none,
  1, 202, :_reduce_none,
  1, 143, :_reduce_267,
  1, 141, :_reduce_268,
  0, 113, :_reduce_none,
  1, 113, :_reduce_270,
  0, 112, :_reduce_none,
  1, 112, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  0, 158, :_reduce_295 ]

racc_reduce_n = 296

racc_shift_n = 528

racc_token_table = {
  false => 0,
  :error => 1,
  :STRING => 2,
  :DQPRE => 3,
  :DQMID => 4,
  :DQPOST => 5,
  :WORD => 6,
  :LBRACK => 7,
  :RBRACK => 8,
  :LBRACE => 9,
  :RBRACE => 10,
  :SYMBOL => 11,
  :FARROW => 12,
  :COMMA => 13,
  :TRUE => 14,
  :FALSE => 15,
  :EQUALS => 16,
  :APPENDS => 17,
  :DELETES => 18,
  :LESSEQUAL => 19,
  :NOTEQUAL => 20,
  :DOT => 21,
  :COLON => 22,
  :LLCOLLECT => 23,
  :RRCOLLECT => 24,
  :QMARK => 25,
  :WSLPAREN => 26,
  :LPAREN => 27,
  :RPAREN => 28,
  :ISEQUAL => 29,
  :GREATEREQUAL => 30,
  :GREATERTHAN => 31,
  :LESSTHAN => 32,
  :IF => 33,
  :ELSE => 34,
  :DEFINE => 35,
  :ELSIF => 36,
  :VARIABLE => 37,
  :CLASS => 38,
  :INHERITS => 39,
  :NODE => 40,
  :BOOLEAN => 41,
  :NAME => 42,
  :SEMIC => 43,
  :CASE => 44,
  :DEFAULT => 45,
  :AT => 46,
  :ATAT => 47,
  :LCOLLECT => 48,
  :RCOLLECT => 49,
  :CLASSREF => 50,
  :NOT => 51,
  :OR => 52,
  :AND => 53,
  :UNDEF => 54,
  :PARROW => 55,
  :PLUS => 56,
  :MINUS => 57,
  :TIMES => 58,
  :DIV => 59,
  :LSHIFT => 60,
  :RSHIFT => 61,
  :UMINUS => 62,
  :MATCH => 63,
  :NOMATCH => 64,
  :REGEX => 65,
  :IN_EDGE => 66,
  :OUT_EDGE => 67,
  :IN_EDGE_SUB => 68,
  :OUT_EDGE_SUB => 69,
  :IN => 70,
  :UNLESS => 71,
  :PIPE => 72,
  :LAMBDA => 73,
  :SELBRACE => 74,
  :NUMBER => 75,
  :HEREDOC => 76,
  :SUBLOCATE => 77,
  :RENDER_STRING => 78,
  :RENDER_EXPR => 79,
  :EPP_START => 80,
  :EPP_END => 81,
  :EPP_END_TRIM => 82,
  :FUNCTION => 83,
  :TYPE => 84,
  :PRIVATE => 85,
  :ATTR => 86,
  :APPLICATION => 87,
  :PRODUCES => 88,
  :CONSUMES => 89,
  :SITE => 90,
  :LOW => 91,
  :HIGH => 92,
  :LISTSTART => 93,
  :SPLAT => 94,
  :MODULO => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "STRING",
  "DQPRE",
  "DQMID",
  "DQPOST",
  "WORD",
  "LBRACK",
  "RBRACK",
  "LBRACE",
  "RBRACE",
  "SYMBOL",
  "FARROW",
  "COMMA",
  "TRUE",
  "FALSE",
  "EQUALS",
  "APPENDS",
  "DELETES",
  "LESSEQUAL",
  "NOTEQUAL",
  "DOT",
  "COLON",
  "LLCOLLECT",
  "RRCOLLECT",
  "QMARK",
  "WSLPAREN",
  "LPAREN",
  "RPAREN",
  "ISEQUAL",
  "GREATEREQUAL",
  "GREATERTHAN",
  "LESSTHAN",
  "IF",
  "ELSE",
  "DEFINE",
  "ELSIF",
  "VARIABLE",
  "CLASS",
  "INHERITS",
  "NODE",
  "BOOLEAN",
  "NAME",
  "SEMIC",
  "CASE",
  "DEFAULT",
  "AT",
  "ATAT",
  "LCOLLECT",
  "RCOLLECT",
  "CLASSREF",
  "NOT",
  "OR",
  "AND",
  "UNDEF",
  "PARROW",
  "PLUS",
  "MINUS",
  "TIMES",
  "DIV",
  "LSHIFT",
  "RSHIFT",
  "UMINUS",
  "MATCH",
  "NOMATCH",
  "REGEX",
  "IN_EDGE",
  "OUT_EDGE",
  "IN_EDGE_SUB",
  "OUT_EDGE_SUB",
  "IN",
  "UNLESS",
  "PIPE",
  "LAMBDA",
  "SELBRACE",
  "NUMBER",
  "HEREDOC",
  "SUBLOCATE",
  "RENDER_STRING",
  "RENDER_EXPR",
  "EPP_START",
  "EPP_END",
  "EPP_END_TRIM",
  "FUNCTION",
  "TYPE",
  "PRIVATE",
  "ATTR",
  "APPLICATION",
  "PRODUCES",
  "CONSUMES",
  "SITE",
  "LOW",
  "HIGH",
  "LISTSTART",
  "SPLAT",
  "MODULO",
  "$start",
  "program",
  "statements",
  "epp_expression",
  "syntactic_statements",
  "syntactic_statement",
  "assignment",
  "relationship",
  "argument",
  "hashpair",
  "arguments",
  "resource",
  "expression",
  "attribute_operations",
  "additional_resource_bodies",
  "resource_bodies",
  "endsemi",
  "endcomma",
  "resource_body",
  "primary_expression",
  "capability_mapping",
  "call_function_expression",
  "bracketed_expression",
  "selector_entries",
  "access_args",
  "access_arg",
  "expressions",
  "variable",
  "call_method_with_lambda_expression",
  "collection_expression",
  "case_expression",
  "if_expression",
  "unless_expression",
  "definition_expression",
  "application_expression",
  "hostclass_expression",
  "node_definition_expression",
  "site_definition_expression",
  "epp_render_expression",
  "function_definition",
  "type_alias",
  "type_definition",
  "reserved_word",
  "array",
  "hash",
  "regex",
  "quotedtext",
  "type",
  "call_function_start",
  "lambda",
  "call_method_expression",
  "named_access",
  "lambda_parameter_list",
  "opt_return_type",
  "lambda_rest",
  "parameters",
  "if_part",
  "else",
  "unless_else",
  "case_options",
  "case_option",
  "options_statements",
  "nil",
  "selector_entry",
  "selector_entry_list",
  "collect_query",
  "optional_query",
  "attribute_operation",
  "attribute_name",
  "keyword",
  "classname",
  "parameter_list",
  "opt_statements",
  "capability_kw",
  "stacked_classname",
  "classparent",
  "classnameordefault",
  "hostnames",
  "nodeparent",
  "hostname",
  "dotted_name",
  "name_or_number",
  "parameter",
  "untyped_parameter",
  "typed_parameter",
  "regular_parameter",
  "splat_parameter",
  "parameter_type",
  "type_alias_lhs",
  "optional_statements",
  "collection_entries",
  "hashpairs",
  "hash_entry",
  "collection_entry",
  "collection_entry_keyword",
  "string",
  "dq_string",
  "heredoc",
  "dqpre",
  "dqrval",
  "dqpost",
  "dqmid",
  "text_expression",
  "dqtail",
  "sublocated_text",
  "epp_parameters_list",
  "epp_end" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'egrammar.ra', 67)
  def _reduce_1(val, _values, result)
     result = create_program(Factory.block_or_expression(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 68)
  def _reduce_2(val, _values, result)
     result = create_program(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 69)
  def _reduce_3(val, _values, result)
     result = create_empty_program 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 73)
  def _reduce_4(val, _values, result)
     result = transform_calls(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 80)
  def _reduce_5(val, _values, result)
     result = [val[0]]
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 81)
  def _reduce_6(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 82)
  def _reduce_7(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 89)
  def _reduce_8(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 90)
  def _reduce_9(val, _values, result)
     result = aryfy(val[0]).push(val[1]).push(val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'egrammar.ra', 95)
  def _reduce_11(val, _values, result)
     result = val[0].set(val[2])      ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 96)
  def _reduce_12(val, _values, result)
     result = val[0].plus_set(val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 97)
  def _reduce_13(val, _values, result)
     result = val[0].minus_set(val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'egrammar.ra', 102)
  def _reduce_15(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 106)
  def _reduce_16(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 107)
  def _reduce_17(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 18 omitted

module_eval(<<'.,.,', 'egrammar.ra', 111)
  def _reduce_19(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 112)
  def _reduce_20(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 113)
  def _reduce_21(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 114)
  def _reduce_22(val, _values, result)
     result = val[0].relop(val[1][:value], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 23 omitted

module_eval(<<'.,.,', 'egrammar.ra', 123)
  def _reduce_24(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'virtual')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Virtual (@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 134)
  def _reduce_25(val, _values, result)
          result = val[1]
      unless Factory.set_resource_form(result, 'exported')
        # This is equivalent to a syntax error - additional semantic restrictions apply
        error val[0], "Exported (@@) can only be applied to a Resource Expression"
      end
      # relocate the result
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 145)
  def _reduce_26(val, _values, result)
          bodies = [Factory.RESOURCE_BODY(val[2], val[4])] + val[5]
      result = Factory.RESOURCE(val[0], bodies)
      loc result, val[0], val[6]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 152)
  def _reduce_27(val, _values, result)
            result = Factory.RESOURCE(Factory.fqn(token_text(val[0])), val[2])
        loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 161)
  def _reduce_28(val, _values, result)
           result = case Factory.resource_shape(val[0])
       when :resource, :class
        # This catches deprecated syntax.
        # If the attribute operations does not include +>, then the found expression
        # is actually a LEFT followed by LITERAL_HASH
        #
        unless tmp = transform_resource_wo_title(val[0], val[2], val[1], val[4])
          error val[1], "Syntax error resource body without title or hash with +>"
        end
        tmp
      when :defaults
        Factory.RESOURCE_DEFAULTS(val[0], val[2])
      when :override
        # This was only done for override in original - TODO should it be here at all
        Factory.RESOURCE_OVERRIDE(val[0], val[2])
      else
        error val[0], "Expression is not valid as a resource, resource-default, or resource-override"
      end
     loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 183)
  def _reduce_29(val, _values, result)
     result = Factory.RESOURCE_BODY(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 186)
  def _reduce_30(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 187)
  def _reduce_31(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 193)
  def _reduce_32(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 194)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 195)
  def _reduce_34(val, _values, result)
     result = val[2] 
    result
  end
.,.,

# reduce 35 omitted

# reduce 36 omitted

# reduce 37 omitted

# reduce 38 omitted

module_eval(<<'.,.,', 'egrammar.ra', 204)
  def _reduce_39(val, _values, result)
     result = val[0].in val[2]        ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 205)
  def _reduce_40(val, _values, result)
     result = val[0] =~  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 206)
  def _reduce_41(val, _values, result)
     result = val[0].mne val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 207)
  def _reduce_42(val, _values, result)
     result = val[0] +   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 208)
  def _reduce_43(val, _values, result)
     result = val[0] -   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 209)
  def _reduce_44(val, _values, result)
     result = val[0] /   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 210)
  def _reduce_45(val, _values, result)
     result = val[0] *   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 211)
  def _reduce_46(val, _values, result)
     result = val[0] %   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 212)
  def _reduce_47(val, _values, result)
     result = val[0] <<  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 213)
  def _reduce_48(val, _values, result)
     result = val[0] >>  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 214)
  def _reduce_49(val, _values, result)
     result = val[1].minus            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 215)
  def _reduce_50(val, _values, result)
     result = val[1].unfold           ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 216)
  def _reduce_51(val, _values, result)
     result = val[0].ne  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 217)
  def _reduce_52(val, _values, result)
     result = val[0].eq  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 218)
  def _reduce_53(val, _values, result)
     result = val[0] >   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 219)
  def _reduce_54(val, _values, result)
     result = val[0] >=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 220)
  def _reduce_55(val, _values, result)
     result = val[0] <   val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 221)
  def _reduce_56(val, _values, result)
     result = val[0] <=  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 222)
  def _reduce_57(val, _values, result)
     result = val[1].not              ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 223)
  def _reduce_58(val, _values, result)
     result = val[0].and val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 224)
  def _reduce_59(val, _values, result)
     result = val[0].or  val[2]       ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 225)
  def _reduce_60(val, _values, result)
     result = val[0].select(*val[2])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 226)
  def _reduce_61(val, _values, result)
     result = val[1].paren            ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 227)
  def _reduce_62(val, _values, result)
     result = val[1].paren          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 230)
  def _reduce_63(val, _values, result)
     result = val[0].access(val[2]); loc result, val[0], val[4] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 233)
  def _reduce_64(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 234)
  def _reduce_65(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 66 omitted

module_eval(<<'.,.,', 'egrammar.ra', 238)
  def _reduce_67(val, _values, result)
     result = Factory.HASH_UNFOLDED([val[0]]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 247)
  def _reduce_68(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 248)
  def _reduce_69(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 70 omitted

# reduce 71 omitted

# reduce 72 omitted

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

# reduce 76 omitted

# reduce 77 omitted

# reduce 78 omitted

# reduce 79 omitted

# reduce 80 omitted

# reduce 81 omitted

# reduce 82 omitted

# reduce 83 omitted

# reduce 84 omitted

# reduce 85 omitted

# reduce 86 omitted

# reduce 87 omitted

# reduce 88 omitted

# reduce 89 omitted

# reduce 90 omitted

module_eval(<<'.,.,', 'egrammar.ra', 274)
  def _reduce_91(val, _values, result)
     result = Factory.NUMBER(val[0][:value])          ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 275)
  def _reduce_92(val, _values, result)
     result = Factory.literal(val[0][:value])         ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 276)
  def _reduce_93(val, _values, result)
     result = Factory.literal(:default)               ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 277)
  def _reduce_94(val, _values, result)
     result = Factory.literal(:undef)                 ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 278)
  def _reduce_95(val, _values, result)
     result = Factory.QNAME_OR_NUMBER(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 287)
  def _reduce_96(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[3]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 291)
  def _reduce_97(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 295)
  def _reduce_98(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, val[1])
      loc result, val[0], val[4]
      result.lambda = val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 300)
  def _reduce_99(val, _values, result)
          result = Factory.CALL_NAMED(val[0], true, [])
      loc result, val[0], val[2]
      result.lambda = val[2]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 306)
  def _reduce_100(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 307)
  def _reduce_101(val, _values, result)
     result = Factory.QNAME(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 312)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 313)
  def _reduce_103(val, _values, result)
     result = val[0]; val[0].lambda = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 316)
  def _reduce_104(val, _values, result)
     result = Factory.CALL_METHOD(val[0], val[2]); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 317)
  def _reduce_105(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[1], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 318)
  def _reduce_106(val, _values, result)
     result = Factory.CALL_METHOD(val[0], []); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 322)
  def _reduce_107(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 326)
  def _reduce_108(val, _values, result)
            result = val[0].dot(Factory.fqn(val[2][:value]))
        loc result, val[1], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 334)
  def _reduce_109(val, _values, result)
          result = Factory.LAMBDA(val[0][:value], val[2][:value], val[1])
      loc result, val[0][:start], val[2][:end]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 339)
  def _reduce_110(val, _values, result)
     result = {:end => val[2], :value =>val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 340)
  def _reduce_111(val, _values, result)
     result = {:end => val[1], :value => nil } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 344)
  def _reduce_112(val, _values, result)
     result = {:start => val[0], :value => [] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 345)
  def _reduce_113(val, _values, result)
     result = {:start => val[0], :value => val[1] } 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 353)
  def _reduce_114(val, _values, result)
          result = val[1]
      loc(result, val[0], val[1])
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 360)
  def _reduce_115(val, _values, result)
            result = Factory.IF(val[0], Factory.block_or_expression(val[2], val[1], val[3]), val[4])
        loc(result, val[0], (val[4] ? val[4] : val[3]))
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 364)
  def _reduce_116(val, _values, result)
            result = Factory.IF(val[0], nil, val[3])
        loc(result, val[0], (val[3] ? val[3] : val[2]))
      
    result
  end
.,.,

# reduce 117 omitted

module_eval(<<'.,.,', 'egrammar.ra', 372)
  def _reduce_118(val, _values, result)
            result = val[1]
        loc(result, val[0], val[1])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 376)
  def _reduce_119(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 379)
  def _reduce_120(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 386)
  def _reduce_121(val, _values, result)
          result = Factory.UNLESS(val[1], Factory.block_or_expression(val[3], val[2], val[4]), val[5])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 390)
  def _reduce_122(val, _values, result)
          result = Factory.UNLESS(val[1], nil, val[4])
      loc result, val[0], val[4]
    
    result
  end
.,.,

# reduce 123 omitted

module_eval(<<'.,.,', 'egrammar.ra', 400)
  def _reduce_124(val, _values, result)
            result = Factory.block_or_expression(val[2], val[1], val[3])
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 403)
  def _reduce_125(val, _values, result)
            result = nil # don't think a nop is needed here either
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 410)
  def _reduce_126(val, _values, result)
          result = Factory.CASE(val[1], *val[3])
      loc result, val[0], val[4]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 416)
  def _reduce_127(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 417)
  def _reduce_128(val, _values, result)
     result = val[0].push val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 422)
  def _reduce_129(val, _values, result)
            result = Factory.WHEN(val[0], val[3]); loc result, val[1], val[4]
      
    result
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

module_eval(<<'.,.,', 'egrammar.ra', 438)
  def _reduce_133(val, _values, result)
            result = val[1]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 443)
  def _reduce_134(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 444)
  def _reduce_135(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 449)
  def _reduce_136(val, _values, result)
     result = Factory.MAP(val[0], val[2]) ; loc result, val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 459)
  def _reduce_137(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], val[3])
      loc result, val[0], val[5]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 463)
  def _reduce_138(val, _values, result)
          result = Factory.COLLECT(val[0], val[1], [])
      loc result, val[0], val[1]
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 468)
  def _reduce_139(val, _values, result)
     result = Factory.VIRTUAL_QUERY(val[1])   ; loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 469)
  def _reduce_140(val, _values, result)
     result = Factory.EXPORTED_QUERY(val[1])  ; loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 141 omitted

# reduce 142 omitted

module_eval(<<'.,.,', 'egrammar.ra', 478)
  def _reduce_143(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 479)
  def _reduce_144(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 480)
  def _reduce_145(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 146 omitted

# reduce 147 omitted

module_eval(<<'.,.,', 'egrammar.ra', 495)
  def _reduce_148(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '=>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 499)
  def _reduce_149(val, _values, result)
            result = Factory.ATTRIBUTE_OP(val[0][:value], '+>', val[2])
        loc result, val[0], val[2]
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 503)
  def _reduce_150(val, _values, result)
          result = Factory.ATTRIBUTES_OP(val[2]) ; loc result, val[0], val[2]
   
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 512)
  def _reduce_151(val, _values, result)
          definition = Factory.DEFINITION(classname(val[1][:value]), val[2], val[4])
      loc(definition, val[0], val[5])
      result = add_definition(definition)
      # New lexer does not keep track of this, this is done in validation
      if @lexer.respond_to?(:'indefine=')
        @lexer.indefine = false
      end
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 524)
  def _reduce_152(val, _values, result)
        definition = Factory.APPLICATION(classname(val[1][:value]), val[2], val[4])
    loc(definition, val[0], val[5])
    result = add_definition(definition)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 531)
  def _reduce_153(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        Factory.QNAME(classname(val[0][:value])),
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 538)
  def _reduce_154(val, _values, result)
        result = Factory.CAPABILITY_MAPPING(val[1][:value],
                                        val[0],
                                        classname(val[2][:value]), val[4])
    loc result, val[0], val[6]
    add_mapping(result)
  
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'egrammar.ra', 555)
  def _reduce_157(val, _values, result)
          # Remove this class' name from the namestack as all nested classes have been parsed
      namepop
      definition = Factory.HOSTCLASS(classname(val[1][:value]), val[2], token_text(val[3]), val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 566)
  def _reduce_158(val, _values, result)
     namestack(val[0][:value]) ; result = val[0] 
    result
  end
.,.,

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

module_eval(<<'.,.,', 'egrammar.ra', 575)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 163 omitted

# reduce 164 omitted

module_eval(<<'.,.,', 'egrammar.ra', 592)
  def _reduce_165(val, _values, result)
        definition = Factory.SITE(val[2])
    loc(definition, val[0], val[3])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 597)
  def _reduce_166(val, _values, result)
        definition = Factory.SITE(nil)
    loc(definition, val[0], val[2])
    result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 608)
  def _reduce_167(val, _values, result)
          definition = Factory.NODE(val[1], val[3], val[5])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 613)
  def _reduce_168(val, _values, result)
          definition = Factory.NODE(val[1], val[3], nil)
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 624)
  def _reduce_169(val, _values, result)
     result = [result] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 625)
  def _reduce_170(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 171 omitted

# reduce 172 omitted

module_eval(<<'.,.,', 'egrammar.ra', 632)
  def _reduce_173(val, _values, result)
     result = Factory.literal(:default); loc result, val[0] 
    result
  end
.,.,

# reduce 174 omitted

module_eval(<<'.,.,', 'egrammar.ra', 636)
  def _reduce_175(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 637)
  def _reduce_176(val, _values, result)
     result = Factory.concat(val[0], '.', val[2][:value]); loc result, val[0], val[2] 
    result
  end
.,.,

# reduce 177 omitted

# reduce 178 omitted

# reduce 179 omitted

module_eval(<<'.,.,', 'egrammar.ra', 646)
  def _reduce_180(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 652)
  def _reduce_181(val, _values, result)
          definition = Factory.FUNCTION(val[1][:value], val[2], val[5], val[3])
      loc(definition, val[0], val[6])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 658)
  def _reduce_182(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 659)
  def _reduce_183(val, _values, result)
     result = val[1].access(val[3]) ; loc result, val[1], val[4] 
    result
  end
.,.,

# reduce 184 omitted

# reduce 185 omitted

# reduce 186 omitted

# reduce 187 omitted

module_eval(<<'.,.,', 'egrammar.ra', 669)
  def _reduce_188(val, _values, result)
     error val[0], "'class' keyword not allowed at this location" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 670)
  def _reduce_189(val, _values, result)
     error val[0], "A quoted string is not valid as a name here" 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 674)
  def _reduce_190(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 675)
  def _reduce_191(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 676)
  def _reduce_192(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 677)
  def _reduce_193(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 678)
  def _reduce_194(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 682)
  def _reduce_195(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 683)
  def _reduce_196(val, _values, result)
     result = val[0].push(val[2]) 
    result
  end
.,.,

# reduce 197 omitted

# reduce 198 omitted

# reduce 199 omitted

# reduce 200 omitted

module_eval(<<'.,.,', 'egrammar.ra', 695)
  def _reduce_201(val, _values, result)
     result = Factory.PARAM(val[0][:value], val[2]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 696)
  def _reduce_202(val, _values, result)
     result = Factory.PARAM(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 699)
  def _reduce_203(val, _values, result)
     result = val[1]; val[1].captures_rest 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 702)
  def _reduce_204(val, _values, result)
     val[1].type_expr(val[0]) ; result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 705)
  def _reduce_205(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 706)
  def _reduce_206(val, _values, result)
     result = val[0].access(val[2]) ; loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 711)
  def _reduce_207(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], Factory.KEY_ENTRY(val[2], val[3]))
      loc(definition, val[0], val[3])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 716)
  def _reduce_208(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2].access(val[4]))
      loc(definition, val[0], val[5])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 721)
  def _reduce_209(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 726)
  def _reduce_210(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[2])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 731)
  def _reduce_211(val, _values, result)
          definition = Factory.TYPE_ASSIGNMENT(val[0], val[2])
      loc(definition, val[0], val[4])
      result = add_definition(definition)
    
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 737)
  def _reduce_212(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 743)
  def _reduce_213(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], nil, val[3])
        loc(definition, val[0], val[4])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 748)
  def _reduce_214(val, _values, result)
            definition = Factory.TYPE_DEFINITION(val[1][:value], val[3][:value], val[5])
        loc(definition, val[0], val[6])
        result = add_definition(definition)
      
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 757)
  def _reduce_215(val, _values, result)
         fqn = Factory.fqn(val[0][:value])
     loc(fqn, val[0])
     fqn['offset'] += 1
     fqn['length'] -= 1
     result = fqn.var
     loc(result, val[0])
  
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 768)
  def _reduce_216(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 769)
  def _reduce_217(val, _values, result)
     result = Factory.RESERVED(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 775)
  def _reduce_218(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 776)
  def _reduce_219(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 777)
  def _reduce_220(val, _values, result)
     result = Factory.LIST(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 778)
  def _reduce_221(val, _values, result)
     result = Factory.literal([]) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 781)
  def _reduce_222(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 782)
  def _reduce_223(val, _values, result)
     result = Factory.HASH(val[1]); loc result, val[0], val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 783)
  def _reduce_224(val, _values, result)
     result = Factory.literal({}) ; loc result, val[0], val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 786)
  def _reduce_225(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 787)
  def _reduce_226(val, _values, result)
     result = val[0].push val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 790)
  def _reduce_227(val, _values, result)
     result = Factory.KEY_ENTRY(val[0], val[2]); loc result, val[1] 
    result
  end
.,.,

# reduce 228 omitted

module_eval(<<'.,.,', 'egrammar.ra', 794)
  def _reduce_229(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

# reduce 230 omitted

module_eval(<<'.,.,', 'egrammar.ra', 799)
  def _reduce_231(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 802)
  def _reduce_232(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 803)
  def _reduce_233(val, _values, result)
     result = Factory.ARGUMENTS(val[0], val[2]) 
    result
  end
.,.,

# reduce 234 omitted

# reduce 235 omitted

# reduce 236 omitted

# reduce 237 omitted

# reduce 238 omitted

# reduce 239 omitted

# reduce 240 omitted

# reduce 241 omitted

# reduce 242 omitted

module_eval(<<'.,.,', 'egrammar.ra', 820)
  def _reduce_243(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 821)
  def _reduce_244(val, _values, result)
     result = Factory.literal(val[0][:value]) ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 823)
  def _reduce_245(val, _values, result)
     result = Factory.STRING(val[0], *val[1]) ; loc result, val[0], val[1][-1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 824)
  def _reduce_246(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 825)
  def _reduce_247(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 826)
  def _reduce_248(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 827)
  def _reduce_249(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 828)
  def _reduce_250(val, _values, result)
     result = Factory.TEXT(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 831)
  def _reduce_251(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 832)
  def _reduce_252(val, _values, result)
     result = [val[0]] + val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 835)
  def _reduce_253(val, _values, result)
     result = Factory.HEREDOC(val[0][:value], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 838)
  def _reduce_254(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 839)
  def _reduce_255(val, _values, result)
     result = Factory.SUBLOCATE(val[0], val[1]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 842)
  def _reduce_256(val, _values, result)
     result = Factory.EPP(val[1], val[2]); loc result, val[0] 
    result
  end
.,.,

# reduce 257 omitted

# reduce 258 omitted

module_eval(<<'.,.,', 'egrammar.ra', 849)
  def _reduce_259(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 850)
  def _reduce_260(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 851)
  def _reduce_261(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 854)
  def _reduce_262(val, _values, result)
     result = Factory.RENDER_STRING(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 855)
  def _reduce_263(val, _values, result)
     result = Factory.RENDER_EXPR(val[1]); loc result, val[0], val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 856)
  def _reduce_264(val, _values, result)
     result = Factory.RENDER_EXPR(Factory.block_or_expression(val[2], val[1], val[3])); loc result, val[0], val[4] 
    result
  end
.,.,

# reduce 265 omitted

# reduce 266 omitted

module_eval(<<'.,.,', 'egrammar.ra', 862)
  def _reduce_267(val, _values, result)
     result = Factory.QREF(val[0][:value])  ; loc result, val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'egrammar.ra', 865)
  def _reduce_268(val, _values, result)
     result = Factory.literal(val[0][:value]); loc result, val[0] 
    result
  end
.,.,

# reduce 269 omitted

module_eval(<<'.,.,', 'egrammar.ra', 871)
  def _reduce_270(val, _values, result)
     result = nil 
    result
  end
.,.,

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

# reduce 274 omitted

# reduce 275 omitted

# reduce 276 omitted

# reduce 277 omitted

# reduce 278 omitted

# reduce 279 omitted

# reduce 280 omitted

# reduce 281 omitted

# reduce 282 omitted

# reduce 283 omitted

# reduce 284 omitted

# reduce 285 omitted

# reduce 286 omitted

# reduce 287 omitted

# reduce 288 omitted

# reduce 289 omitted

# reduce 290 omitted

# reduce 291 omitted

# reduce 292 omitted

# reduce 293 omitted

# reduce 294 omitted

module_eval(<<'.,.,', 'egrammar.ra', 902)
  def _reduce_295(val, _values, result)
     result = nil
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

      end   # class Parser
      end   # module Parser
    end   # module Pops
  end   # module Puppet
