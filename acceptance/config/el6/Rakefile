require 'rake/clean'
require 'pp'

REPO_CONFIGS_DIR = "repo-configs"
CLEAN.include('*.tar', REPO_CONFIGS_DIR, 'merged_options.rb', 'preserved_config.yaml')

module HarnessOptions

  DEFAULTS = {
    :type => 'git',
    :helper => ['../../lib/helper.rb'],
    :tests  => ['../../tests'],
    :debug => true,
    :root_keys => true,
    :keyfile => "id_rsa-acceptance",
  }

  class Aggregator
    attr_reader :mode

    def initialize(mode)
      @mode = mode
    end

    def get_options(file_path)
      puts file_path
      if File.exists? file_path
        options = eval(File.read(file_path), binding)
      else
        puts "No options file found at #{File.expand_path(file_path)}"
      end
      options || {}
    end

    def get_mode_options
      get_options("./config/#{mode}/options.rb")
    end

    def get_local_options
      get_options("./local_options.rb")
    end

    def final_options(intermediary_options = {})
      mode_options = get_mode_options
      local_overrides = get_local_options
      final_options = DEFAULTS.merge(mode_options)
      final_options.merge!(intermediary_options)
      final_options.merge(local_overrides)
    end
  end

  def self.options(mode, options)

    final_options = Aggregator.new(mode).final_options(options)
    final_options
  end
end

def beaker_test(mode = :packages, options = {})
  continue_on_error = options.delete(:__continue_on_error)

  final_options = HarnessOptions.options(mode, options)
  options_file = 'merged_options.rb'
  File.open(options_file, 'w') do |merged|
    merged.puts <<-EOS
# Copy this file to local_options.rb and adjust as needed if you wish to run
# with some local overrides.
EOS
    merged.puts(final_options.pretty_inspect)
  end

  overriding_options = (ENV['OPTIONS'])

  tests = ENV['TEST']
  tests = "--tests #{tests}" if tests

  config = ENV['CONFIG']
  config = "--config #{config}" if config

  begin
    sh "beaker -o #{options_file} #{config} #{tests} #{overriding_options}"
  rescue RuntimeError => e
    raise e if !continue_on_error
    puts "Beaker Failed: #{e}"
  end
end

namespace :ci do

  task :_test_and_preserve do
    beaker_test(:package, :preserve_hosts => true, :__continue_on_error => true)
  end

  namespace :test do

    USAGE = <<-EOS
Also must set CONFIG=config/nodes/foo.yaml or path to some other Beaker configuration.
You may set TESTS=path/to/test,and/more/tests.
You may set additional Beakre OPTIONS='--more --options'
EOS

    desc <<-EOS
Run the acceptance tests through Beaker and install packages on the configuration targets.
Requires commit SHA to be put under test as environment variable: SHA='<sha>'.
#{USAGE}
EOS
    task :packages do
      beaker_test
    end

    desc <<-EOS
Run the acceptance tests through Beaker and install from git on the configuration targets.
#{USAGE}
EOS
    task :git do
      beaker_test(:git)
    end
  end

  desc "Capture the master and agent hostname from the latest log and construct a preserved_config.yaml for re-running against preserved hosts without provisioning."
  task :extract_preserved_config do
    nodes = { :master => {}, :agent => {} }
    File.open('log/latest/config.yml', 'r') do |file|
      config = file.read
      config =~ /master:.*?platform: ([\w-]+)\s*$/m
      nodes[:master][:platform] = $1
      config =~ /agent:.*?platform: ([\w-]+)\s*$/m
      nodes[:agent][:platform] = $1
    end
    File.open('log/latest/pre-suite-run.log', 'r') do |log_file|
      while nodes.values.detect { |h| h[:hostname].nil? }
        if log_file.readline =~ /^(\w+) \((master|agent)\)/
          nodes[$2.to_sym][:hostname] = $1
        end
      end
    end
    pp nodes
    File.open('preserved_config.yaml', 'w') do |config_file|
      config_file.puts <<-EOF
HOSTS:
  #{nodes[:master][:hostname]}.delivery.puppetlabs.net:
    roles:
      - master
      - agent
    platform: #{nodes[:master][:platform]} 
  #{nodes[:agent][:hostname]}.delivery.puppetlabs.net:
    roles:
      - agent
    platform: #{nodes[:agent][:platform]}
      EOF
    end
  end

  desc "Run an acceptance test for a given node configuration and preserve the hosts.  Writes a local preserved_config.yaml with the hostnames so that we can rerun."
  task :test_and_preserve_hosts => ['ci:_test_and_preserve', 'ci:extract_preserved_config']

  desc "Rerun an acceptance test using the last captured preserved_config.yaml to skip provisioning. Uses the setup/rsync/pre-suite to rsync the local puppet source onto master and agent."
  task :test_against_preserved_hosts do
    beaker_test(
      :config => 'preserved_config.yaml',
      :no_provision => true,
      :preserve_hosts => true,
      :pre_suite => 'setup/rsync/pre-suite'
    )
  end
end

namespace :standalone do
  desc "Bring up the vagrant environment.  Includes pre-puppet environment packages installation and cross node networking support (/etc/hosts munging)"
  task :up do
    sh "vagrant up"
  end

  desc "Completely destroy the vagrant instances."
  task :clean do
    sh "vagrant destroy -f"
  end

  task :ensure_good_private_key do
    sh "chmod 600 acceptance.priv"
  end

  desc "Bring up vagrant boxes and run the tests through the puppet-acceptance beaker harness.  Specify TEST='../../tests/foo' to customize which tests are to be run, and/or OPTIONS='bar' to pass options to beaker."
  task :test => [:up, :ensure_good_private_key] do
    beaker_test(:git,
      :keyfile => 'acceptance.priv',
      :install => [
        'git://github.com/puppetlabs/facter.git#stable',
        'git://github.com/puppetlabs/hiera.git#stable',
        'file:///vagrant-puppet',
      ]
    )
  end
end

task :default do
  sh('rake -T')
end
